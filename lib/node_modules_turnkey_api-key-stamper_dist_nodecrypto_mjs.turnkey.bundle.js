(self["webpackChunkTurnkeySDK"] = self["webpackChunkTurnkeySDK"] || []).push([["node_modules_turnkey_api-key-stamper_dist_nodecrypto_mjs"],{

/***/ "./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)
/* harmony export */ });
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ "?39c1");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/utils.mjs");



const signWithApiKey = async (input) => {
    const { content, publicKey, privateKey } = input;
    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({
        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0
        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey
        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({
            uncompressedPrivateKeyHex: privateKey,
            compressedPublicKeyHex: publicKey,
        }),
        format: "jwk",
    });
    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign("SHA256");
    sign.write(Buffer.from(content));
    sign.end();
    return sign.sign(privateKeyObject, "hex");
};


//# sourceMappingURL=nodecrypto.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)
/* harmony export */ });
/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs");
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");



/**
 * Converts a Turnkey API key pair into a JSON Web Key (JWK) format.
 * This function accepts P-256 API keys only.
 *
 * @param {Object} input - The Turnkey API key components.
 * @param {string} input.uncompressedPrivateKeyHex - Hexadecimal-encoded uncompressed private key (32-byte scalar).
 * @param {string} input.compressedPublicKeyHex - Hexadecimal-encoded compressed public key (33 bytes).
 * @returns {JsonWebKey} A JSON Web Key object representing the EC P-256 key.
 */
function convertTurnkeyApiKeyToJwk(input) {
    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;
    let jwk;
    try {
        jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));
    }
    catch (e) {
        throw new Error(`unable to load API key: invalid public key. Did you switch your public and private key by accident? Is your public key a valid, compressed P-256 public key?`);
    }
    // Ensure that d is sufficiently padded
    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);
    return jwk;
}


//# sourceMappingURL=utils.mjs.map


/***/ }),

/***/ "?39c1":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);