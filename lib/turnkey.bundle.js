/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@hpke/chacha20poly1305/esm/mod.js":
/*!********************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/mod.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chacha20Poly1305: () => (/* reexport safe */ _src_chacha20Poly1305_js__WEBPACK_IMPORTED_MODULE_0__.Chacha20Poly1305)
/* harmony export */ });
/* harmony import */ var _src_chacha20Poly1305_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/chacha20Poly1305.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha20Poly1305.js");



/***/ }),

/***/ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_arx.js":
/*!********************************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_arx.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCipher: () => (/* binding */ createCipher),
/* harmony export */   rotl: () => (/* binding */ rotl)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/utils.js");
/**
 * This file is based on noble-ciphers (https://github.com/paulmillr/noble-ciphers).
 *
 * noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-ciphers/blob/749cdf9cd07ebdd19e9b957d0f172f1045179695/src/_arx.ts
 */
/**
 * Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.

RFC8439 requires multi-step cipher stream, where
authKey starts with counter: 0, actual msg with counter: 1.

For this, we need a way to re-use nonce / counter:

    const counter = new Uint8Array(4);
    chacha(..., counter, ...); // counter is now 1
    chacha(..., counter, ...); // counter is now 2

This is complicated:

- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB
- Original papers don't allow mutating counters
- Counter overflow is undefined [^1]
- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it
- Caveat: Cannot be re-used through all cases:
- * chacha has (counter | nonce)
- * xchacha has (nonce16 | counter | nonce16)
- Idea B: separate nonce / counter and provide separate API for counter re-use
- Caveat: there are different counter sizes depending on an algorithm.
- salsa & chacha also differ in structures of key & sigma:
  salsa20:      s[0] | k(4) | s[1] | nonce(2) | cnt(2) | s[2] | k(4) | s[3]
  chacha:       s(4) | k(8) | cnt(1) | nonce(3)
  chacha20orig: s(4) | k(8) | cnt(2) | nonce(2)
- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`
- Caveat: we can't re-use counter array

xchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal
(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).

[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/
[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2

 * @module
 */

// Can't use similar utils.utf8ToBytes, because it uses `TextEncoder` - not available in all envs
const _utf8ToBytes = (str) => Uint8Array.from(str.split("").map((c) => c.charCodeAt(0)));
const sigma16 = _utf8ToBytes("expand 16-byte k");
const sigma32 = _utf8ToBytes("expand 32-byte k");
const sigma16_32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(sigma16);
const sigma32_32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(sigma32);
/** Rotate left. */
function rotl(a, b) {
    return (a << b) | (a >>> (32 - b));
}
// Is byte array aligned to 4 byte offset (u32)?
function isAligned32(b) {
    return b.byteOffset % 4 === 0;
}
// Salsa and Chacha block length is always 512-bit
const BLOCK_LEN = 64;
const BLOCK_LEN32 = 16;
// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]
// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]
const MAX_COUNTER = 2 ** 32 - 1;
const U32_EMPTY = Uint32Array.of();
function runCipher(core, sigma, key, nonce, data, output, counter, rounds) {
    const len = data.length;
    const block = new Uint8Array(BLOCK_LEN);
    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(block);
    // Make sure that buffers aligned to 4 bytes
    const isAligned = isAligned32(data) && isAligned32(output);
    const d32 = isAligned ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(data) : U32_EMPTY;
    const o32 = isAligned ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(output) : U32_EMPTY;
    for (let pos = 0; pos < len; counter++) {
        core(sigma, key, nonce, b32, counter, rounds);
        if (counter >= MAX_COUNTER)
            throw new Error("arx: counter overflow");
        const take = Math.min(BLOCK_LEN, len - pos);
        // aligned to 4 bytes
        if (isAligned && take === BLOCK_LEN) {
            const pos32 = pos / 4;
            if (pos % 4 !== 0)
                throw new Error("arx: invalid block position");
            for (let j = 0, posj; j < BLOCK_LEN32; j++) {
                posj = pos32 + j;
                o32[posj] = d32[posj] ^ b32[j];
            }
            pos += BLOCK_LEN;
            continue;
        }
        for (let j = 0, posj; j < take; j++) {
            posj = pos + j;
            output[posj] = data[posj] ^ block[j];
        }
        pos += take;
    }
}
/** Creates ARX-like (ChaCha, Salsa) cipher stream from core function. */
function createCipher(core, opts) {
    const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkOpts)({
        allowShortKeys: false,
        counterLength: 8,
        counterRight: false,
        rounds: 20,
    }, opts);
    if (typeof core !== "function")
        throw new Error("core must be a function");
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(counterLength);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(rounds);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(counterRight);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(allowShortKeys);
    return (key, nonce, data, output, counter = 0) => {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, undefined, "key");
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(nonce, undefined, "nonce");
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data, undefined, "data");
        const len = data.length;
        if (output === undefined)
            output = new Uint8Array(len);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(output, undefined, "output");
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(counter);
        if (counter < 0 || counter >= MAX_COUNTER) {
            throw new Error("arx: counter overflow");
        }
        if (output.length < len) {
            throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);
        }
        const toClean = [];
        // Key & sigma
        // key=16 -> sigma16, k=key|key
        // key=32 -> sigma32, k=key
        const l = key.length;
        let k;
        let sigma;
        if (l === 32) {
            toClean.push(k = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(key));
            sigma = sigma32_32;
        }
        else if (l === 16 && allowShortKeys) {
            k = new Uint8Array(32);
            k.set(key);
            k.set(key, 16);
            sigma = sigma16_32;
            toClean.push(k);
        }
        else {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, 32, "arx key");
            throw new Error("invalid key size");
            // throw new Error(`"arx key" expected Uint8Array of length 32, got length=${l}`);
        }
        // Nonce
        // salsa20:      8   (8-byte counter)
        // chacha20orig: 8   (8-byte counter)
        // chacha20:     12  (4-byte counter)
        // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)
        // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)
        // Align nonce to 4 bytes
        if (!isAligned32(nonce))
            toClean.push(nonce = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(nonce));
        const k32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(k);
        // hsalsa & hchacha: handle extended nonce
        if (extendNonceFn) {
            if (nonce.length !== 24) {
                throw new Error(`arx: extended nonce must be 24 bytes`);
            }
            extendNonceFn(sigma, k32, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(nonce.subarray(0, 16)), k32);
            nonce = nonce.subarray(16);
        }
        // Handle nonce counter
        const nonceNcLen = 16 - counterLength;
        if (nonceNcLen !== nonce.length) {
            throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);
        }
        // Pad counter when nonce is 64 bit
        if (nonceNcLen !== 12) {
            const nc = new Uint8Array(12);
            nc.set(nonce, counterRight ? 0 : 12 - nonce.length);
            nonce = nc;
            toClean.push(nonce);
        }
        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(nonce);
        runCipher(core, sigma, k32, n32, data, output, counter, rounds);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);
        return output;
    };
}


/***/ }),

/***/ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_poly1305.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_poly1305.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Poly1305: () => (/* binding */ Poly1305),
/* harmony export */   poly1305: () => (/* binding */ poly1305),
/* harmony export */   wrapConstructorWithKey: () => (/* binding */ wrapConstructorWithKey)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/utils.js");
/**
 * This file is based on noble-ciphers (https://github.com/paulmillr/noble-ciphers).
 *
 * noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-ciphers/blob/749cdf9cd07ebdd19e9b957d0f172f1045179695/src/_poly1305.ts
 */
/**
 * Poly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),
 * [wiki](https://en.wikipedia.org/wiki/Poly1305))
 * is a fast and parallel secret-key message-authentication code suitable for
 * a wide variety of applications. It was standardized in
 * [RFC 8439](https://www.rfc-editor.org/rfc/rfc8439) and is now used in TLS 1.3.
 *
 * Polynomial MACs are not perfect for every situation:
 * they lack Random Key Robustness: the MAC can be forged, and can't be used in PAKE schemes.
 * See [invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).
 * To combat invisible salamanders, `hash(key)` can be included in ciphertext,
 * however, this would violate ciphertext indistinguishability:
 * an attacker would know which key was used - so `HKDF(key, i)`
 * could be used instead.
 *
 * Check out [original website](https://cr.yp.to/mac.html).
 * Based on Public Domain [poly1305-donna](https://github.com/floodyberry/poly1305-donna).
 * @module
 */
// prettier-ignore

function u8to16(a, i) {
    return (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);
}
// function bytesToNumberLE(bytes: Uint8Array): bigint {
//   return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
// }
// /** Small version of `poly1305` without loop unrolling. Unused, provided for auditability. */
// function poly1305_small(msg: Uint8Array, key: Uint8Array): Uint8Array {
//   abytes(msg);
//   abytes(key, 32, "key");
//   const POW_2_130_5 = BigInt(2) ** BigInt(130) - BigInt(5); // 2^130-5
//   const POW_2_128_1 = BigInt(2) ** BigInt(128) - BigInt(1); // 2^128-1
//   const CLAMP_R = BigInt("0x0ffffffc0ffffffc0ffffffc0fffffff");
//   const r = bytesToNumberLE(key.subarray(0, 16)) & CLAMP_R;
//   const s = bytesToNumberLE(key.subarray(16));
//   // Process by 16 byte chunks
//   let acc = BigInt(0);
//   for (let i = 0; i < msg.length; i += 16) {
//     const m = msg.subarray(i, i + 16);
//     const n = bytesToNumberLE(m) | (BigInt(1) << BigInt(8 * m.length));
//     acc = ((acc + n) * r) % POW_2_130_5;
//   }
//   const res = (acc + s) & POW_2_128_1;
//   return numberToBytesBE(res, 16).reverse(); // LE
// }
// Can be used to replace `computeTag` in chacha.ts. Unused, provided for auditability.
// function poly1305_computeTag_small(
//   authKey: Uint8Array,
//   lengths: Uint8Array,
//   ciphertext: Uint8Array,
//   AAD?: Uint8Array,
// ): Uint8Array {
//   const res = [];
//   const updatePadded2 = (msg: Uint8Array) => {
//     res.push(msg);
//     const leftover = msg.length % 16;
//     if (leftover) res.push(new Uint8Array(16).slice(leftover));
//   };
//   if (AAD) updatePadded2(AAD);
//   updatePadded2(ciphertext);
//   res.push(lengths);
//   return poly1305_small(concatBytes(...res), authKey);
// }
/** Poly1305 class. Prefer poly1305() function instead. */
class Poly1305 {
    // Can be speed-up using BigUint64Array, at the cost of complexity
    constructor(key) {
        Object.defineProperty(this, "blockLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
        Object.defineProperty(this, "outputLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
        Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(16)
        });
        Object.defineProperty(this, "r", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint16Array(10)
        }); // Allocating 1 array with .subarray() here is slower than 3
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint16Array(10)
        });
        Object.defineProperty(this, "pad", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint16Array(8)
        });
        Object.defineProperty(this, "pos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "finished", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, 32, "key"));
        const t0 = u8to16(key, 0);
        const t1 = u8to16(key, 2);
        const t2 = u8to16(key, 4);
        const t3 = u8to16(key, 6);
        const t4 = u8to16(key, 8);
        const t5 = u8to16(key, 10);
        const t6 = u8to16(key, 12);
        const t7 = u8to16(key, 14);
        // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47
        this.r[0] = t0 & 0x1fff;
        this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
        this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
        this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
        this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
        this.r[5] = (t4 >>> 1) & 0x1ffe;
        this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
        this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
        this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
        this.r[9] = (t7 >>> 5) & 0x007f;
        for (let i = 0; i < 8; i++)
            this.pad[i] = u8to16(key, 16 + 2 * i);
    }
    process(data, offset, isLast = false) {
        const hibit = isLast ? 0 : 1 << 11;
        const { h, r } = this;
        const r0 = r[0];
        const r1 = r[1];
        const r2 = r[2];
        const r3 = r[3];
        const r4 = r[4];
        const r5 = r[5];
        const r6 = r[6];
        const r7 = r[7];
        const r8 = r[8];
        const r9 = r[9];
        const t0 = u8to16(data, offset + 0);
        const t1 = u8to16(data, offset + 2);
        const t2 = u8to16(data, offset + 4);
        const t3 = u8to16(data, offset + 6);
        const t4 = u8to16(data, offset + 8);
        const t5 = u8to16(data, offset + 10);
        const t6 = u8to16(data, offset + 12);
        const t7 = u8to16(data, offset + 14);
        const h0 = h[0] + (t0 & 0x1fff);
        const h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);
        const h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);
        const h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);
        const h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);
        const h5 = h[5] + ((t4 >>> 1) & 0x1fff);
        const h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);
        const h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);
        const h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);
        const h9 = h[9] + ((t7 >>> 5) | hibit);
        let c = 0;
        let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) +
            h4 * (5 * r6);
        c = d0 >>> 13;
        d0 &= 0x1fff;
        d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) +
            h9 * (5 * r1);
        c += d0 >>> 13;
        d0 &= 0x1fff;
        let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) +
            h4 * (5 * r7);
        c = d1 >>> 13;
        d1 &= 0x1fff;
        d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) +
            h9 * (5 * r2);
        c += d1 >>> 13;
        d1 &= 0x1fff;
        let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);
        c = d2 >>> 13;
        d2 &= 0x1fff;
        d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) +
            h9 * (5 * r3);
        c += d2 >>> 13;
        d2 &= 0x1fff;
        let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);
        c = d3 >>> 13;
        d3 &= 0x1fff;
        d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) +
            h9 * (5 * r4);
        c += d3 >>> 13;
        d3 &= 0x1fff;
        let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;
        c = d4 >>> 13;
        d4 &= 0x1fff;
        d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) +
            h9 * (5 * r5);
        c += d4 >>> 13;
        d4 &= 0x1fff;
        let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;
        c = d5 >>> 13;
        d5 &= 0x1fff;
        d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) +
            h9 * (5 * r6);
        c += d5 >>> 13;
        d5 &= 0x1fff;
        let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;
        c = d6 >>> 13;
        d6 &= 0x1fff;
        d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);
        c += d6 >>> 13;
        d6 &= 0x1fff;
        let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;
        c = d7 >>> 13;
        d7 &= 0x1fff;
        d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);
        c += d7 >>> 13;
        d7 &= 0x1fff;
        let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;
        c = d8 >>> 13;
        d8 &= 0x1fff;
        d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);
        c += d8 >>> 13;
        d8 &= 0x1fff;
        let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;
        c = d9 >>> 13;
        d9 &= 0x1fff;
        d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;
        c += d9 >>> 13;
        d9 &= 0x1fff;
        c = ((c << 2) + c) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = c >>> 13;
        d1 += c;
        h[0] = d0;
        h[1] = d1;
        h[2] = d2;
        h[3] = d3;
        h[4] = d4;
        h[5] = d5;
        h[6] = d6;
        h[7] = d7;
        h[8] = d8;
        h[9] = d9;
    }
    finalize() {
        const { h, pad } = this;
        const g = new Uint16Array(10);
        let c = h[1] >>> 13;
        h[1] &= 0x1fff;
        for (let i = 2; i < 10; i++) {
            h[i] += c;
            c = h[i] >>> 13;
            h[i] &= 0x1fff;
        }
        h[0] += c * 5;
        c = h[0] >>> 13;
        h[0] &= 0x1fff;
        h[1] += c;
        c = h[1] >>> 13;
        h[1] &= 0x1fff;
        h[2] += c;
        g[0] = h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 0x1fff;
        for (let i = 1; i < 10; i++) {
            g[i] = h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 0x1fff;
        }
        g[9] -= 1 << 13;
        let mask = (c ^ 1) - 1;
        for (let i = 0; i < 10; i++)
            g[i] &= mask;
        mask = ~mask;
        for (let i = 0; i < 10; i++)
            h[i] = (h[i] & mask) | g[i];
        h[0] = (h[0] | (h[1] << 13)) & 0xffff;
        h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;
        h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;
        h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;
        h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;
        h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;
        h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;
        h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;
        let f = h[0] + pad[0];
        h[0] = f & 0xffff;
        for (let i = 1; i < 8; i++) {
            f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;
            h[i] = f & 0xffff;
        }
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(g);
    }
    update(data) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(data);
        const { buffer, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input
            if (take === blockLen) {
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(data, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(buffer, 0, false);
                this.pos = 0;
            }
        }
        return this;
    }
    destroy() {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(this.h, this.r, this.buffer, this.pad);
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);
        this.finished = true;
        const { buffer, h } = this;
        let { pos } = this;
        if (pos) {
            buffer[pos++] = 1;
            for (; pos < 16; pos++)
                buffer[pos] = 0;
            this.process(buffer, 0, true);
        }
        this.finalize();
        let opos = 0;
        for (let i = 0; i < 8; i++) {
            out[opos++] = h[i] >>> 0;
            out[opos++] = h[i] >>> 8;
        }
        return out;
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
}
function wrapConstructorWithKey(hashCons) {
    const hashC = (msg, key) => hashCons(key).update(msg).digest();
    const tmp = hashCons(new Uint8Array(32)); // tmp array, used just once below
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (key) => hashCons(key);
    return hashC;
}
/** Poly1305 MAC from RFC 8439. */
const poly1305 = 
/** @__PURE__ */ (() => wrapConstructorWithKey((key) => new Poly1305(key)))();


/***/ }),

/***/ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/chacha.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/src/chacha/chacha.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _poly1305_aead: () => (/* binding */ _poly1305_aead),
/* harmony export */   chacha20: () => (/* binding */ chacha20),
/* harmony export */   chacha20poly1305: () => (/* binding */ chacha20poly1305)
/* harmony export */ });
/* harmony import */ var _arx_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_arx.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_arx.js");
/* harmony import */ var _poly1305_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_poly1305.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/_poly1305.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/utils.js");
/**
 * This file is based on noble-ciphers (https://github.com/paulmillr/noble-ciphers).
 *
 * noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-ciphers/blob/749cdf9cd07ebdd19e9b957d0f172f1045179695/src/chacha.ts
 */
/**
 * ChaCha stream cipher, released
 * in 2008. Developed after Salsa20, ChaCha aims to increase diffusion per round.
 * It was standardized in [RFC 8439](https://www.rfc-editor.org/rfc/rfc8439) and
 * is now used in TLS 1.3.
 *
 * [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)
 * extended-nonce variant is also provided. Similar to XSalsa, it's safe to use with
 * randomly-generated nonces.
 *
 * Check out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and
 * [wiki](https://en.wikipedia.org/wiki/Salsa20) and
 * [website](https://cr.yp.to/chacha.html).
 *
 * @module
 */



/**
 * ChaCha core function. It is implemented twice:
 * 1. Simple loop (chachaCore_small, hchacha_small)
 * 2. Unrolled loop (chachaCore, hchacha) - 4x faster, but larger & harder to read
 * The specific implementation is selected in `createCipher` below.
 */
function chachaCore(s, k, n, out, cnt, rounds = 20) {
    const y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // "expa"   "nd 3"  "2-by"  "te k"
    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3], // Key      Key     Key     Key
    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7], // Key      Key     Key     Key
    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter	Nonce   Nonce
    // Save state to temporary variables
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let r = 0; r < rounds; r += 2) {
        x00 = (x00 + x04) | 0;
        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 ^ x00, 16);
        x08 = (x08 + x12) | 0;
        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 ^ x08, 12);
        x00 = (x00 + x04) | 0;
        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 ^ x00, 8);
        x08 = (x08 + x12) | 0;
        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 ^ x08, 7);
        x01 = (x01 + x05) | 0;
        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 ^ x01, 16);
        x09 = (x09 + x13) | 0;
        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 ^ x09, 12);
        x01 = (x01 + x05) | 0;
        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 ^ x01, 8);
        x09 = (x09 + x13) | 0;
        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 ^ x09, 7);
        x02 = (x02 + x06) | 0;
        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 ^ x02, 16);
        x10 = (x10 + x14) | 0;
        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 ^ x10, 12);
        x02 = (x02 + x06) | 0;
        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 ^ x02, 8);
        x10 = (x10 + x14) | 0;
        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 ^ x10, 7);
        x03 = (x03 + x07) | 0;
        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 ^ x03, 16);
        x11 = (x11 + x15) | 0;
        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 ^ x11, 12);
        x03 = (x03 + x07) | 0;
        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 ^ x03, 8);
        x11 = (x11 + x15) | 0;
        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 ^ x11, 7);
        x00 = (x00 + x05) | 0;
        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 ^ x00, 16);
        x10 = (x10 + x15) | 0;
        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 ^ x10, 12);
        x00 = (x00 + x05) | 0;
        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 ^ x00, 8);
        x10 = (x10 + x15) | 0;
        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 ^ x10, 7);
        x01 = (x01 + x06) | 0;
        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 ^ x01, 16);
        x11 = (x11 + x12) | 0;
        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 ^ x11, 12);
        x01 = (x01 + x06) | 0;
        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 ^ x01, 8);
        x11 = (x11 + x12) | 0;
        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 ^ x11, 7);
        x02 = (x02 + x07) | 0;
        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 ^ x02, 16);
        x08 = (x08 + x13) | 0;
        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 ^ x08, 12);
        x02 = (x02 + x07) | 0;
        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 ^ x02, 8);
        x08 = (x08 + x13) | 0;
        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 ^ x08, 7);
        x03 = (x03 + x04) | 0;
        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 ^ x03, 16);
        x09 = (x09 + x14) | 0;
        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 ^ x09, 12);
        x03 = (x03 + x04) | 0;
        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 ^ x03, 8);
        x09 = (x09 + x14) | 0;
        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 ^ x09, 7);
    }
    // Write output
    let oi = 0;
    out[oi++] = (y00 + x00) | 0;
    out[oi++] = (y01 + x01) | 0;
    out[oi++] = (y02 + x02) | 0;
    out[oi++] = (y03 + x03) | 0;
    out[oi++] = (y04 + x04) | 0;
    out[oi++] = (y05 + x05) | 0;
    out[oi++] = (y06 + x06) | 0;
    out[oi++] = (y07 + x07) | 0;
    out[oi++] = (y08 + x08) | 0;
    out[oi++] = (y09 + x09) | 0;
    out[oi++] = (y10 + x10) | 0;
    out[oi++] = (y11 + x11) | 0;
    out[oi++] = (y12 + x12) | 0;
    out[oi++] = (y13 + x13) | 0;
    out[oi++] = (y14 + x14) | 0;
    out[oi++] = (y15 + x15) | 0;
}
/**
 * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.
 * With smaller nonce, it's not safe to make it random (CSPRNG), due to collision chance.
 */
const chacha20 = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_0__.createCipher)(chachaCore, {
    counterRight: false,
    counterLength: 4,
    allowShortKeys: false,
});
const ZEROS16 = /* @__PURE__ */ new Uint8Array(16);
// Pad to digest size with zeros
const updatePadded = (h, msg) => {
    h.update(msg);
    const leftover = msg.length % 16;
    if (leftover)
        h.update(ZEROS16.subarray(leftover));
};
const ZEROS32 = /* @__PURE__ */ new Uint8Array(32);
function computeTag(fn, key, nonce, ciphertext, AAD) {
    if (AAD !== undefined)
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abytes)(AAD, undefined, "AAD");
    const authKey = fn(key, nonce, ZEROS32);
    const lengths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u64Lengths)(ciphertext.length, AAD ? AAD.length : 0, true);
    // Methods below can be replaced with
    // return poly1305_computeTag_small(authKey, lengths, ciphertext, AAD)
    const h = _poly1305_js__WEBPACK_IMPORTED_MODULE_1__.poly1305.create(authKey);
    if (AAD)
        updatePadded(h, AAD);
    updatePadded(h, ciphertext);
    h.update(lengths);
    const res = h.digest();
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(authKey, lengths);
    return res;
}
/**
 * AEAD algorithm from RFC 8439.
 * Salsa20 and chacha (RFC 8439) use poly1305 differently.
 * We could have composed them, but it's hard because of authKey:
 * In salsa20, authKey changes position in salsa stream.
 * In chacha, authKey can't be computed inside computeTag, it modifies the counter.
 */
const _poly1305_aead = (xorStream) => (key, nonce, AAD) => {
    const tagLength = 16;
    return {
        encrypt(plaintext, output) {
            const plength = plaintext.length;
            output = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getOutput)(plength + tagLength, output, false);
            output.set(plaintext);
            const oPlain = output.subarray(0, -tagLength);
            // Actual encryption
            xorStream(key, nonce, oPlain, oPlain, 1);
            const tag = computeTag(xorStream, key, nonce, oPlain, AAD);
            output.set(tag, plength); // append tag
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(tag);
            return output;
        },
        decrypt(ciphertext, output) {
            output = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getOutput)(ciphertext.length - tagLength, output, false);
            const data = ciphertext.subarray(0, -tagLength);
            const passedTag = ciphertext.subarray(-tagLength);
            const tag = computeTag(xorStream, key, nonce, data, AAD);
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.equalBytes)(passedTag, tag))
                throw new Error("invalid tag");
            output.set(ciphertext.subarray(0, -tagLength));
            // Actual decryption
            xorStream(key, nonce, output, output, 1); // start stream with i=1
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(tag);
            return output;
        },
    };
};
/**
 * ChaCha20-Poly1305 from RFC 8439.
 *
 * Unsafe to use random nonces under the same key, due to collision chance.
 * Prefer XChaCha instead.
 */
const chacha20poly1305 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapCipher)({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _poly1305_aead(chacha20));


/***/ }),

/***/ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/src/chacha/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   abool: () => (/* binding */ abool),
/* harmony export */   abytes: () => (/* binding */ abytes),
/* harmony export */   aexists: () => (/* binding */ aexists),
/* harmony export */   anumber: () => (/* binding */ anumber),
/* harmony export */   aoutput: () => (/* binding */ aoutput),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),
/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),
/* harmony export */   checkOpts: () => (/* binding */ checkOpts),
/* harmony export */   clean: () => (/* binding */ clean),
/* harmony export */   complexOverlapBytes: () => (/* binding */ complexOverlapBytes),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   copyBytes: () => (/* binding */ copyBytes),
/* harmony export */   createView: () => (/* binding */ createView),
/* harmony export */   equalBytes: () => (/* binding */ equalBytes),
/* harmony export */   getOutput: () => (/* binding */ getOutput),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),
/* harmony export */   isAligned32: () => (/* binding */ isAligned32),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   isLE: () => (/* binding */ isLE),
/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),
/* harmony export */   overlapBytes: () => (/* binding */ overlapBytes),
/* harmony export */   u32: () => (/* binding */ u32),
/* harmony export */   u64Lengths: () => (/* binding */ u64Lengths),
/* harmony export */   u8: () => (/* binding */ u8),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   wrapCipher: () => (/* binding */ wrapCipher)
/* harmony export */ });
/**
 * This file is based on noble-ciphers (https://github.com/paulmillr/noble-ciphers).
 *
 * noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-ciphers/blob/749cdf9cd07ebdd19e9b957d0f172f1045179695/src/utils.ts
 */
/**
 * Utilities for hex, bytes, CSPRNG.
 * @module
 */
/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */
function isBytes(a) {
    return a instanceof Uint8Array ||
        (ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array");
}
/** Asserts something is boolean. */
function abool(b) {
    if (typeof b !== "boolean")
        throw new Error(`boolean expected, not ${b}`);
}
/** Asserts something is positive integer. */
function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0) {
        throw new Error("positive integer expected, got " + n);
    }
}
/** Asserts something is Uint8Array. */
function abytes(value, length, title = "") {
    const bytes = isBytes(value);
    const len = value?.length;
    const needsLen = length !== undefined;
    if (!bytes || (needsLen && len !== length)) {
        const prefix = title && `"${title}" `;
        const ofLen = needsLen ? ` of length ${length}` : "";
        const got = bytes ? `length=${len}` : `type=${typeof value}`;
        throw new Error(prefix + "expected Uint8Array" + ofLen + ", got " + got);
    }
    return value;
}
/** Asserts a hash instance has not been destroyed / finished */
// deno-lint-ignore no-explicit-any
function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) {
        throw new Error("Hash#digest() has already been called");
    }
}
/** Asserts output is properly-sized byte array */
// deno-lint-ignore no-explicit-any
function aoutput(out, instance) {
    abytes(out, undefined, "output");
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least " + min);
    }
}
/** Cast u8 / u16 / u32 to u8. */
function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** Cast u8 / u16 / u32 to u32. */
function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
/** Zeroize a byte array. Warning: JS provides no guarantees. */
function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
    }
}
/** Create DataView of an array for easy byte-level manipulation. */
function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** Is current platform little-endian? Most are. Big-Endian platform: IBM */
const isLE = 
/* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = /* @__PURE__ */ (() => 
// @ts-ignore: to use toHex
typeof Uint8Array.from([]).toHex === "function" &&
    // @ts-ignore: to use fromHex
    typeof Uint8Array.fromHex === "function")();
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
/**
 * Convert byte array to hex string. Uses built-in function, when available.
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore: to use toHex
    if (hasHexBuiltin)
        return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = "";
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * Convert hex string to byte array. Uses built-in function, when available.
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== "string") {
        throw new Error("hex string expected, got " + typeof hex);
    }
    // @ts-ignore: to use fromHex
    if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2) {
        throw new Error("hex string expected, got unpadded hex of length " + hl);
    }
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' +
                hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
// Used in micro
function hexToNumber(hex) {
    if (typeof hex !== "string") {
        throw new Error("hex string expected, got " + typeof hex);
    }
    return BigInt(hex === "" ? "0" : "0x" + hex); // Big Endian
}
// Used in ff1
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
// Used in micro, ff1
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
/**
 * Converts string to bytes using UTF8 encoding.
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== "string")
        throw new Error("string expected");
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Converts bytes to string using UTF8 encoding.
 * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'
 */
function bytesToUtf8(bytes) {
    return new TextDecoder().decode(bytes);
}
/**
 * Checks if two U8A use same underlying buffer and overlaps.
 * This is invalid and can corrupt data.
 */
function overlapBytes(a, b) {
    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy
        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end
        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end
    );
}
/**
 * If input and output overlap and input starts before output, we will overwrite end of input before
 * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)
 */
function complexOverlapBytes(input, output) {
    // This is very cursed. It works somehow, but I'm completely unsure,
    // reasoning about overlapping aligned windows is very hard.
    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset) {
        throw new Error("complex overlap of input and output is not supported");
    }
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
function checkOpts(defaults, opts) {
    if (opts == null || typeof opts !== "object") {
        throw new Error("options must be defined");
    }
    const merged = Object.assign(defaults, opts);
    return merged;
}
/** Compares 2 uint8array-s in kinda constant time. */
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
/**
 * Wraps a cipher: validates args, ensures encrypt() can only be called once.
 * @__NO_SIDE_EFFECTS__
 */
// deno-lint-ignore no-explicit-any
const wrapCipher = (params, constructor) => {
    // deno-lint-ignore no-explicit-any
    function wrappedCipher(key, ...args) {
        // Validate key
        abytes(key, undefined, "key");
        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:
        if (!isLE) {
            throw new Error("Non little-endian hardware is not yet supported");
        }
        // Validate nonce if nonceLength is present
        if (params.nonceLength !== undefined) {
            const nonce = args[0];
            abytes(nonce, params.varSizeNonce ? undefined : params.nonceLength, "nonce");
        }
        // Validate AAD if tagLength present
        const tagl = params.tagLength;
        if (tagl && args[1] !== undefined)
            abytes(args[1], undefined, "AAD");
        const cipher = constructor(key, ...args);
        const checkOutput = (fnLength, output) => {
            if (output !== undefined) {
                if (fnLength !== 2)
                    throw new Error("cipher output not supported");
                abytes(output, undefined, "output");
            }
        };
        // Create wrapped cipher with validation and single-use encryption
        let called = false;
        const wrCipher = {
            encrypt(data, output) {
                if (called) {
                    throw new Error("cannot encrypt() twice with same key + nonce");
                }
                called = true;
                abytes(data);
                checkOutput(cipher.encrypt.length, output);
                return cipher.encrypt(data, output);
            },
            decrypt(data, output) {
                abytes(data);
                if (tagl && data.length < tagl) {
                    throw new Error('"ciphertext" expected length bigger than tagLength=' + tagl);
                }
                checkOutput(cipher.decrypt.length, output);
                return cipher.decrypt(data, output);
            },
        };
        return wrCipher;
    }
    Object.assign(wrappedCipher, params);
    return wrappedCipher;
};
/**
 * By default, returns u8a of length.
 * When out is available, it checks it for validity and uses it.
 */
function getOutput(expectedLength, out, onlyAligned = true) {
    if (out === undefined)
        return new Uint8Array(expectedLength);
    if (out.length !== expectedLength) {
        throw new Error('"output" expected Uint8Array of length ' + expectedLength + ", got: " +
            out.length);
    }
    if (onlyAligned && !isAligned32(out)) {
        throw new Error("invalid output, must be aligned");
    }
    return out;
}
function u64Lengths(dataLength, aadLength, isLE) {
    abool(isLE);
    const num = new Uint8Array(16);
    const view = createView(num);
    view.setBigUint64(0, BigInt(aadLength), isLE);
    view.setBigUint64(8, BigInt(dataLength), isLE);
    return num;
}
// Is byte array aligned to 4 byte offset (u32)?
function isAligned32(bytes) {
    return bytes.byteOffset % 4 === 0;
}
// copy bytes to new u8a (aligned). Because Buffer.slice is broken.
function copyBytes(bytes) {
    return Uint8Array.from(bytes);
}


/***/ }),

/***/ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha20Poly1305.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@hpke/chacha20poly1305/esm/src/chacha20Poly1305.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chacha20Poly1305: () => (/* binding */ Chacha20Poly1305),
/* harmony export */   Chacha20Poly1305Context: () => (/* binding */ Chacha20Poly1305Context)
/* harmony export */ });
/* harmony import */ var _chacha_chacha_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chacha/chacha.js */ "./node_modules/@hpke/chacha20poly1305/esm/src/chacha/chacha.js");
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");


class Chacha20Poly1305Context {
    constructor(key) {
        Object.defineProperty(this, "_key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._key = new Uint8Array(key);
    }
    async seal(iv, data, aad) {
        return await this._seal(iv, data, aad);
    }
    async open(iv, data, aad) {
        return await this._open(iv, data, aad);
    }
    _seal(iv, data, aad) {
        return new Promise((resolve) => {
            const ret = (0,_chacha_chacha_js__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(this._key, new Uint8Array(iv), new Uint8Array(aad)).encrypt(new Uint8Array(data));
            resolve(ret.buffer);
        });
    }
    _open(iv, data, aad) {
        return new Promise((resolve) => {
            const ret = (0,_chacha_chacha_js__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(this._key, new Uint8Array(iv), new Uint8Array(aad)).decrypt(new Uint8Array(data));
            resolve(ret.buffer);
        });
    }
}
/**
 * The ChaCha20Poly1305 for HPKE AEAD implementing {@link AeadInterface}.
 *
 * When using `@hpke/core`, the instance of this class can be specified
 * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.Chacha20Poly1305`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 * } from "@hpke/core";
 * import {
 *   Chacha20Poly1305,
 * } from "@hpke/chacha20poly1305";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Chacha20Poly1305(),
 * });
 * ```
 *
 * This class is implemented using
 * {@link https://github.com/paulmillr/noble-ciphers | @noble/ciphers}.
 */
class Chacha20Poly1305 {
    constructor() {
        /** AeadId.Chacha20Poly1305 (0x0003) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_1__.AeadId.Chacha20Poly1305
        });
        /** 32 */
        Object.defineProperty(this, "keySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 12 */
        Object.defineProperty(this, "nonceSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 12
        });
        /** 16 */
        Object.defineProperty(this, "tagSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
    }
    createEncryptionContext(key) {
        return new Chacha20Poly1305Context(key);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/_dnt.shims.js":
/*!*****************************************************!*\
  !*** ./node_modules/@hpke/common/esm/_dnt.shims.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dntGlobalThis: () => (/* binding */ dntGlobalThis)
/* harmony export */ });
const dntGlobals = {};
const dntGlobalThis = createMergeProxy(globalThis, dntGlobals);
function createMergeProxy(baseObj, extObj) {
    return new Proxy(baseObj, {
        get(_target, prop, _receiver) {
            if (prop in extObj) {
                return extObj[prop];
            }
            else {
                return baseObj[prop];
            }
        },
        set(_target, prop, value) {
            if (prop in extObj) {
                delete extObj[prop];
            }
            baseObj[prop] = value;
            return true;
        },
        deleteProperty(_target, prop) {
            let success = false;
            if (prop in extObj) {
                delete extObj[prop];
                success = true;
            }
            if (prop in baseObj) {
                delete baseObj[prop];
                success = true;
            }
            return success;
        },
        ownKeys(_target) {
            const baseKeys = Reflect.ownKeys(baseObj);
            const extKeys = Reflect.ownKeys(extObj);
            const extKeysSet = new Set(extKeys);
            return [...baseKeys.filter((k) => !extKeysSet.has(k)), ...extKeys];
        },
        defineProperty(_target, prop, desc) {
            if (prop in extObj) {
                delete extObj[prop];
            }
            Reflect.defineProperty(baseObj, prop, desc);
            return true;
        },
        getOwnPropertyDescriptor(_target, prop) {
            if (prop in extObj) {
                return Reflect.getOwnPropertyDescriptor(extObj, prop);
            }
            else {
                return Reflect.getOwnPropertyDescriptor(baseObj, prop);
            }
        },
        has(_target, prop) {
            return prop in extObj || prop in baseObj;
        },
    });
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/mod.js":
/*!**********************************************!*\
  !*** ./node_modules/@hpke/common/esm/mod.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AEAD_USAGES: () => (/* reexport safe */ _src_interfaces_aeadEncryptionContext_js__WEBPACK_IMPORTED_MODULE_8__.AEAD_USAGES),
/* harmony export */   AeadId: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_2__.AeadId),
/* harmony export */   DecapError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.DecapError),
/* harmony export */   DeriveKeyPairError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError),
/* harmony export */   DeserializeError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.DeserializeError),
/* harmony export */   Dhkem: () => (/* reexport safe */ _src_kems_dhkem_js__WEBPACK_IMPORTED_MODULE_3__.Dhkem),
/* harmony export */   EMPTY: () => (/* reexport safe */ _src_consts_js__WEBPACK_IMPORTED_MODULE_11__.EMPTY),
/* harmony export */   Ec: () => (/* reexport safe */ _src_kems_dhkemPrimitives_ec_js__WEBPACK_IMPORTED_MODULE_4__.Ec),
/* harmony export */   EncapError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.EncapError),
/* harmony export */   ExportError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.ExportError),
/* harmony export */   HkdfSha256Native: () => (/* reexport safe */ _src_kdfs_hkdf_js__WEBPACK_IMPORTED_MODULE_7__.HkdfSha256Native),
/* harmony export */   HkdfSha384Native: () => (/* reexport safe */ _src_kdfs_hkdf_js__WEBPACK_IMPORTED_MODULE_7__.HkdfSha384Native),
/* harmony export */   HkdfSha512Native: () => (/* reexport safe */ _src_kdfs_hkdf_js__WEBPACK_IMPORTED_MODULE_7__.HkdfSha512Native),
/* harmony export */   HpkeError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.HpkeError),
/* harmony export */   Hybridkem: () => (/* reexport safe */ _src_kems_hybridkem_js__WEBPACK_IMPORTED_MODULE_5__.Hybridkem),
/* harmony export */   INFO_LENGTH_LIMIT: () => (/* reexport safe */ _src_consts_js__WEBPACK_IMPORTED_MODULE_11__.INFO_LENGTH_LIMIT),
/* harmony export */   INPUT_LENGTH_LIMIT: () => (/* reexport safe */ _src_consts_js__WEBPACK_IMPORTED_MODULE_11__.INPUT_LENGTH_LIMIT),
/* harmony export */   InvalidParamError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError),
/* harmony export */   KEM_USAGES: () => (/* reexport safe */ _src_interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_9__.KEM_USAGES),
/* harmony export */   KdfId: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KdfId),
/* harmony export */   KemId: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KemId),
/* harmony export */   LABEL_DKP_PRK: () => (/* reexport safe */ _src_interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_9__.LABEL_DKP_PRK),
/* harmony export */   LABEL_SK: () => (/* reexport safe */ _src_interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_9__.LABEL_SK),
/* harmony export */   MINIMUM_PSK_LENGTH: () => (/* reexport safe */ _src_consts_js__WEBPACK_IMPORTED_MODULE_11__.MINIMUM_PSK_LENGTH),
/* harmony export */   MessageLimitReachedError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.MessageLimitReachedError),
/* harmony export */   Mode: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_2__.Mode),
/* harmony export */   NativeAlgorithm: () => (/* reexport safe */ _src_algorithm_js__WEBPACK_IMPORTED_MODULE_1__.NativeAlgorithm),
/* harmony export */   NotSupportedError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError),
/* harmony export */   OpenError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.OpenError),
/* harmony export */   SUITE_ID_HEADER_KEM: () => (/* reexport safe */ _src_interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_10__.SUITE_ID_HEADER_KEM),
/* harmony export */   SealError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.SealError),
/* harmony export */   SerializeError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.SerializeError),
/* harmony export */   ValidationError: () => (/* reexport safe */ _src_errors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError),
/* harmony export */   XCryptoKey: () => (/* reexport safe */ _src_xCryptoKey_js__WEBPACK_IMPORTED_MODULE_6__.XCryptoKey),
/* harmony export */   base64UrlToBytes: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.base64UrlToBytes),
/* harmony export */   concat: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.concat),
/* harmony export */   hexToBytes: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.hexToBytes),
/* harmony export */   hmac: () => (/* reexport safe */ _src_hash_hmac_js__WEBPACK_IMPORTED_MODULE_13__.hmac),
/* harmony export */   i2Osp: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.i2Osp),
/* harmony export */   isCryptoKeyPair: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.isCryptoKeyPair),
/* harmony export */   isDeno: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.isDeno),
/* harmony export */   isDenoV1: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.isDenoV1),
/* harmony export */   kemToKeyGenAlgorithm: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.kemToKeyGenAlgorithm),
/* harmony export */   loadCrypto: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.loadCrypto),
/* harmony export */   loadSubtleCrypto: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.loadSubtleCrypto),
/* harmony export */   mod: () => (/* reexport safe */ _src_curve_modular_js__WEBPACK_IMPORTED_MODULE_15__.mod),
/* harmony export */   montgomery: () => (/* reexport safe */ _src_curve_montgomery_js__WEBPACK_IMPORTED_MODULE_16__.montgomery),
/* harmony export */   pow2: () => (/* reexport safe */ _src_curve_modular_js__WEBPACK_IMPORTED_MODULE_15__.pow2),
/* harmony export */   sha256: () => (/* reexport safe */ _src_hash_sha2_js__WEBPACK_IMPORTED_MODULE_14__.sha256),
/* harmony export */   sha384: () => (/* reexport safe */ _src_hash_sha2_js__WEBPACK_IMPORTED_MODULE_14__.sha384),
/* harmony export */   sha512: () => (/* reexport safe */ _src_hash_sha2_js__WEBPACK_IMPORTED_MODULE_14__.sha512),
/* harmony export */   xor: () => (/* reexport safe */ _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__.xor)
/* harmony export */ });
/* harmony import */ var _src_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");
/* harmony import */ var _src_algorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/algorithm.js */ "./node_modules/@hpke/common/esm/src/algorithm.js");
/* harmony import */ var _src_identifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/identifiers.js */ "./node_modules/@hpke/common/esm/src/identifiers.js");
/* harmony import */ var _src_kems_dhkem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/kems/dhkem.js */ "./node_modules/@hpke/common/esm/src/kems/dhkem.js");
/* harmony import */ var _src_kems_dhkemPrimitives_ec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/kems/dhkemPrimitives/ec.js */ "./node_modules/@hpke/common/esm/src/kems/dhkemPrimitives/ec.js");
/* harmony import */ var _src_kems_hybridkem_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/kems/hybridkem.js */ "./node_modules/@hpke/common/esm/src/kems/hybridkem.js");
/* harmony import */ var _src_xCryptoKey_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/xCryptoKey.js */ "./node_modules/@hpke/common/esm/src/xCryptoKey.js");
/* harmony import */ var _src_kdfs_hkdf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/kdfs/hkdf.js */ "./node_modules/@hpke/common/esm/src/kdfs/hkdf.js");
/* harmony import */ var _src_interfaces_aeadEncryptionContext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/interfaces/aeadEncryptionContext.js */ "./node_modules/@hpke/common/esm/src/interfaces/aeadEncryptionContext.js");
/* harmony import */ var _src_interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/interfaces/dhkemPrimitives.js */ "./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js");
/* harmony import */ var _src_interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/interfaces/kemInterface.js */ "./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js");
/* harmony import */ var _src_consts_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/consts.js */ "./node_modules/@hpke/common/esm/src/consts.js");
/* harmony import */ var _src_utils_misc_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/utils/misc.js */ "./node_modules/@hpke/common/esm/src/utils/misc.js");
/* harmony import */ var _src_hash_hmac_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/hash/hmac.js */ "./node_modules/@hpke/common/esm/src/hash/hmac.js");
/* harmony import */ var _src_hash_sha2_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./src/hash/sha2.js */ "./node_modules/@hpke/common/esm/src/hash/sha2.js");
/* harmony import */ var _src_curve_modular_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./src/curve/modular.js */ "./node_modules/@hpke/common/esm/src/curve/modular.js");
/* harmony import */ var _src_curve_montgomery_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/curve/montgomery.js */ "./node_modules/@hpke/common/esm/src/curve/montgomery.js");




















/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/algorithm.js":
/*!********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/algorithm.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NativeAlgorithm: () => (/* binding */ NativeAlgorithm)
/* harmony export */ });
/* harmony import */ var _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_dnt.shims.js */ "./node_modules/@hpke/common/esm/_dnt.shims.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");


async function loadSubtleCrypto() {
    if (_dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {
        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.
        return globalThis.crypto.subtle;
    }
    // Node.js <= v18
    try {
        // @ts-ignore: to ignore "crypto"
        const { webcrypto } = await __webpack_require__.e(/*! import() */ "_c3bc").then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ "?c3bc", 19)); // node:crypto
        return webcrypto.subtle;
    }
    catch (e) {
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.NotSupportedError(e);
    }
}
class NativeAlgorithm {
    constructor() {
        Object.defineProperty(this, "_api", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
    }
    async _setup() {
        if (this._api !== undefined) {
            return;
        }
        this._api = await loadSubtleCrypto();
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/consts.js":
/*!*****************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/consts.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EMPTY: () => (/* binding */ EMPTY),
/* harmony export */   INFO_LENGTH_LIMIT: () => (/* binding */ INFO_LENGTH_LIMIT),
/* harmony export */   INPUT_LENGTH_LIMIT: () => (/* binding */ INPUT_LENGTH_LIMIT),
/* harmony export */   MINIMUM_PSK_LENGTH: () => (/* binding */ MINIMUM_PSK_LENGTH)
/* harmony export */ });
// The input length limit (psk, psk_id, info, exporter_context, ikm).
const INPUT_LENGTH_LIMIT = 8192;
const INFO_LENGTH_LIMIT = 65536;
// The minimum length of a PSK.
const MINIMUM_PSK_LENGTH = 32;
// b""
const EMPTY = new Uint8Array(0);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/curve/curve.js":
/*!**********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/curve/curve.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createKeygen: () => (/* binding */ createKeygen)
/* harmony export */ });
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/abstract/curve.ts
 */
function createKeygen(
// deno-lint-ignore ban-types
randomSecretKey, getPublicKey) {
    return function keygen(seed) {
        const secretKey = randomSecretKey(seed);
        return { secretKey, publicKey: getPublicKey(secretKey) };
    };
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/curve/modular.js":
/*!************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/curve/modular.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   pow2: () => (/* binding */ pow2)
/* harmony export */ });
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/abstract/modular.ts
 */
/**
 * Utils for modular division and fields.
 * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.
 * There is no division: it is replaced by modular multiplicative inverse.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Numbers aren't used in x25519 / x448 builds
// prettier-ignore
const _0n = /* @__PURE__ */ BigInt(0);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
}
/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */
function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n) {
        res *= res;
        res %= modulo;
    }
    return res;
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/curve/montgomery.js":
/*!***************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/curve/montgomery.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   montgomery: () => (/* binding */ montgomery)
/* harmony export */ });
/* harmony import */ var _utils_noble_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/noble.js */ "./node_modules/@hpke/common/esm/src/utils/noble.js");
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve.js */ "./node_modules/@hpke/common/esm/src/curve/curve.js");
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@hpke/common/esm/src/curve/modular.js");
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/abstract/montgomery.ts
 */
/**
 * Montgomery curve methods. It's not really whole montgomery curve,
 * just bunch of very specific methods for X25519 / X448 from
 * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */



const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
function validateOpts(curve) {
    (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(curve, {
        adjustScalarBytes: "function",
        powPminus2: "function",
    });
    return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;
    const is25519 = type === "x25519";
    if (!is25519 && type !== "x448")
        throw new Error("invalid type");
    const randomBytes_ = rand || _utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.randomBytesAsync;
    const montgomeryBits = is25519 ? 255 : 448;
    const fieldLen = is25519 ? 32 : 56;
    const Gu = is25519 ? BigInt(9) : BigInt(5);
    // RFC 7748 #5:
    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and
    // (156326 - 2) / 4 = 39081 for curve448/X448
    // const a = is25519 ? 156326n : 486662n;
    const a24 = is25519 ? BigInt(121665) : BigInt(39081);
    // RFC: x25519 "the resulting integer is of the form 2^254 plus
    // eight times a value between 0 and 2^251 - 1 (inclusive)"
    // x448: "2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)"
    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);
    const maxAdded = is25519
        ? BigInt(8) * _2n ** BigInt(251) - _1n
        : BigInt(4) * _2n ** BigInt(445) - _1n;
    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)
    const modP = (n) => (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mod)(n, P);
    const GuBytes = encodeU(Gu);
    function encodeU(u) {
        return (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(modP(u), fieldLen);
    }
    function decodeU(u) {
        const _u = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)((0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(u, fieldLen, "uCoordinate"));
        // RFC: When receiving such an array, implementations of X25519
        // (but not X448) MUST mask the most significant bit in the final byte.
        if (is25519)
            _u[31] &= 127; // 0b0111_1111
        // RFC: Implementations MUST accept non-canonical values and process them as
        // if they had been reduced modulo the field prime.  The non-canonical
        // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224
        // - 1 through 2^448 - 1 for X448.
        return modP((0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(_u));
    }
    function decodeScalar(scalar) {
        return (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(adjustScalarBytes((0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)((0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(scalar, fieldLen, "scalar"))));
    }
    function scalarMult(scalar, u) {
        const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));
        // Some public keys are useless, of low-order. Curve author doesn't think
        // it needs to be validated, but we do it nonetheless.
        // https://cr.yp.to/ecdh.html#validate
        if (pu === _0n)
            throw new Error("invalid private or public key received");
        return encodeU(pu);
    }
    // Computes public key from private. By doing scalar multiplication of base point.
    function scalarMultBase(scalar) {
        return scalarMult(scalar, GuBytes);
    }
    const getPublicKey = scalarMultBase;
    const getSharedSecret = scalarMult;
    // cswap from RFC7748 "example code"
    function cswap(swap, x_2, x_3) {
        // dummy = mask(swap) AND (x_2 XOR x_3)
        // Where mask(swap) is the all-1 or all-0 word of the same length as x_2
        // and x_3, computed, e.g., as mask(swap) = 0 - swap.
        const dummy = modP(swap * (x_2 - x_3));
        x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy
        x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy
        return { x_2, x_3 };
    }
    /**
     * Montgomery x-only multiplication ladder.
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */
    function montgomeryLadder(u, scalar) {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aInRange)("u", u, _0n, P);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aInRange)("scalar", scalar, minScalar, maxScalar);
        const k = scalar;
        const x_1 = u;
        let x_2 = _1n;
        let z_2 = _0n;
        let x_3 = u;
        let z_3 = _1n;
        let swap = _0n;
        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {
            const k_t = (k >> t) & _1n;
            swap ^= k_t;
            ({ x_2, x_3 } = cswap(swap, x_2, x_3));
            ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
            swap = k_t;
            const A = x_2 + z_2;
            const AA = modP(A * A);
            const B = x_2 - z_2;
            const BB = modP(B * B);
            const E = AA - BB;
            const C = x_3 + z_3;
            const D = x_3 - z_3;
            const DA = modP(D * A);
            const CB = modP(C * B);
            const dacb = DA + CB;
            const da_cb = DA - CB;
            x_3 = modP(dacb * dacb);
            z_3 = modP(x_1 * modP(da_cb * da_cb));
            x_2 = modP(AA * BB);
            z_2 = modP(E * (AA + modP(a24 * E)));
        }
        ({ x_2, x_3 } = cswap(swap, x_2, x_3));
        ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
        const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent
        return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))
    }
    const lengths = {
        secretKey: fieldLen,
        publicKey: fieldLen,
        seed: fieldLen,
    };
    const randomSecretKey = async (seed) => {
        if (seed === undefined) {
            seed = await randomBytes_(fieldLen);
        }
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(seed, lengths.seed, "seed");
        return seed;
    };
    const utils = { randomSecretKey };
    return Object.freeze({
        keygen: (0,_curve_js__WEBPACK_IMPORTED_MODULE_1__.createKeygen)(randomSecretKey, getPublicKey),
        getSharedSecret,
        getPublicKey,
        scalarMult,
        scalarMultBase,
        utils,
        GuBytes: GuBytes.slice(),
        lengths,
    });
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DecapError: () => (/* binding */ DecapError),
/* harmony export */   DeriveKeyPairError: () => (/* binding */ DeriveKeyPairError),
/* harmony export */   DeserializeError: () => (/* binding */ DeserializeError),
/* harmony export */   EncapError: () => (/* binding */ EncapError),
/* harmony export */   ExportError: () => (/* binding */ ExportError),
/* harmony export */   HpkeError: () => (/* binding */ HpkeError),
/* harmony export */   InvalidParamError: () => (/* binding */ InvalidParamError),
/* harmony export */   MessageLimitReachedError: () => (/* binding */ MessageLimitReachedError),
/* harmony export */   NotSupportedError: () => (/* binding */ NotSupportedError),
/* harmony export */   OpenError: () => (/* binding */ OpenError),
/* harmony export */   SealError: () => (/* binding */ SealError),
/* harmony export */   SerializeError: () => (/* binding */ SerializeError),
/* harmony export */   ValidationError: () => (/* binding */ ValidationError)
/* harmony export */ });
/**
 * The base error class of hpke-js.
 * @group Errors
 */
class HpkeError extends Error {
    constructor(e) {
        let message;
        if (e instanceof Error) {
            message = e.message;
        }
        else if (typeof e === "string") {
            message = e;
        }
        else {
            message = "";
        }
        super(message);
        this.name = this.constructor.name;
    }
}
/**
 * Invalid parameter.
 * @group Errors
 */
class InvalidParamError extends HpkeError {
}
/**
 * KEM input or output validation failure.
 * @group Errors
 */
class ValidationError extends HpkeError {
}
/**
 * Public or private key serialization failure.
 * @group Errors
 */
class SerializeError extends HpkeError {
}
/**
 * Public or private key deserialization failure.
 * @group Errors
 */
class DeserializeError extends HpkeError {
}
/**
 * encap() failure.
 * @group Errors
 */
class EncapError extends HpkeError {
}
/**
 * decap() failure.
 * @group Errors
 */
class DecapError extends HpkeError {
}
/**
 * Secret export failure.
 * @group Errors
 */
class ExportError extends HpkeError {
}
/**
 * seal() failure.
 * @group Errors
 */
class SealError extends HpkeError {
}
/**
 * open() failure.
 * @group Errors
 */
class OpenError extends HpkeError {
}
/**
 * Sequence number overflow on the encryption context.
 * @group Errors
 */
class MessageLimitReachedError extends HpkeError {
}
/**
 * Key pair derivation failure.
 * @group Errors
 */
class DeriveKeyPairError extends HpkeError {
}
/**
 * Not supported failure.
 * @group Errors
 */
class NotSupportedError extends HpkeError {
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/hash/hmac.js":
/*!********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/hash/hmac.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _HMAC: () => (/* binding */ _HMAC),
/* harmony export */   hmac: () => (/* binding */ hmac)
/* harmony export */ });
/* harmony import */ var _utils_noble_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/noble.js */ "./node_modules/@hpke/common/esm/src/utils/noble.js");
// deno-lint-ignore-file no-explicit-any
/**
 * This file is based on noble-hashes (https://github.com/paulmillr/noble-hashes).
 *
 * noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-hashes/blob/2e0c00e1aa134082ba1380bf3afb8b1641f60fed/src/hmac.ts
 */
/**
 * HMAC: RFC2104 message authentication code.
 * @module
 */

class _HMAC {
    constructor(hash, key) {
        Object.defineProperty(this, "oHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "iHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "blockLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "finished", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "destroyed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.ahash)(hash);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, undefined, "key");
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function") {
            throw new Error("Expected instance of class which extends utils.Hash");
        }
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.clean)(pad);
    }
    update(buf) {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(out, this.outputLen, "output");
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to ||= Object.create(Object.getPrototypeOf(this), {});
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    clone() {
        return this._cloneInto();
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 * @example
 * import { hmac } from '@noble/hashes/hmac';
 * import { sha256 } from '@noble/hashes/sha2';
 * const mac1 = hmac(sha256, 'key', 'message');
 */
const hmac = (hash, key, message) => new _HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new _HMAC(hash, key);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/hash/md.js":
/*!******************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/hash/md.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chi: () => (/* binding */ Chi),
/* harmony export */   HashMD: () => (/* binding */ HashMD),
/* harmony export */   Maj: () => (/* binding */ Maj),
/* harmony export */   SHA256_IV: () => (/* binding */ SHA256_IV),
/* harmony export */   SHA384_IV: () => (/* binding */ SHA384_IV),
/* harmony export */   SHA512_IV: () => (/* binding */ SHA512_IV)
/* harmony export */ });
/* harmony import */ var _utils_noble_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/noble.js */ "./node_modules/@hpke/common/esm/src/utils/noble.js");
// deno-lint-ignore-file no-explicit-any
/**
 * This file is based on noble-hashes (https://github.com/paulmillr/noble-hashes).
 *
 * noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-hashes/blob/2e0c00e1aa134082ba1380bf3afb8b1641f60fed/src/_md.ts
 */
/**
 * Internal Merkle-Damgard hash utils.
 * @module
 */

/** Choice: a ? b : c */
function Chi(a, b, c) {
    return (a & b) ^ (~a & c);
}
/** Majority function, true if any two inputs is true. */
function Maj(a, b, c) {
    return (a & b) ^ (a & c) ^ (b & c);
}
/**
 * Merkle-Damgard hash construction base class.
 * Could be used to create MD5, RIPEMD, SHA1, SHA2.
 */
class HashMD {
    constructor(blockLen, outputLen, padOffset, isLE) {
        Object.defineProperty(this, "blockLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "padOffset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isLE", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // For partial updates less than block size
        Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "finished", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "pos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "destroyed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);
    }
    update(data) {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);
        const { view, buffer, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen) {
                    this.process(dataView, pos);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.clean)(this.buffer.subarray(pos));
        // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        view.setBigUint64(blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which must be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error("_sha2: outputLen must be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) {
            throw new Error("_sha2: outputLen bigger than state");
        }
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to ||= new this.constructor();
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished;
        to.length = length;
        to.pos = pos;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
    clone() {
        return this._cloneInto();
    }
}
/**
 * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.
 * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.
 */
/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */
const SHA256_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19,
]);
/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */
const SHA384_IV = /* @__PURE__ */ Uint32Array.from([
    0xcbbb9d5d,
    0xc1059ed8,
    0x629a292a,
    0x367cd507,
    0x9159015a,
    0x3070dd17,
    0x152fecd8,
    0xf70e5939,
    0x67332667,
    0xffc00b31,
    0x8eb44a87,
    0x68581511,
    0xdb0c2e0d,
    0x64f98fa7,
    0x47b5481d,
    0xbefa4fa4,
]);
/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */
const SHA512_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667,
    0xf3bcc908,
    0xbb67ae85,
    0x84caa73b,
    0x3c6ef372,
    0xfe94f82b,
    0xa54ff53a,
    0x5f1d36f1,
    0x510e527f,
    0xade682d1,
    0x9b05688c,
    0x2b3e6c1f,
    0x1f83d9ab,
    0xfb41bd6b,
    0x5be0cd19,
    0x137e2179,
]);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/hash/sha2.js":
/*!********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/hash/sha2.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _SHA256: () => (/* binding */ _SHA256),
/* harmony export */   _SHA384: () => (/* binding */ _SHA384),
/* harmony export */   _SHA512: () => (/* binding */ _SHA512),
/* harmony export */   sha256: () => (/* binding */ sha256),
/* harmony export */   sha384: () => (/* binding */ sha384),
/* harmony export */   sha512: () => (/* binding */ sha512)
/* harmony export */ });
/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./md.js */ "./node_modules/@hpke/common/esm/src/hash/md.js");
/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./u64.js */ "./node_modules/@hpke/common/esm/src/hash/u64.js");
/* harmony import */ var _utils_noble_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/noble.js */ "./node_modules/@hpke/common/esm/src/utils/noble.js");
/**
 * This file is based on noble-hashes (https://github.com/paulmillr/noble-hashes).
 *
 * noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-hashes/blob/2e0c00e1aa134082ba1380bf3afb8b1641f60fed/src/sha2.ts
 */
/**
 * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.
 * SHA256 is the fastest hash implementable in JS, even faster than Blake3.
 * Check out [RFC 4634](https://www.rfc-editor.org/rfc/rfc4634) and
 * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).
 * @module
 */



/**
 * Round constants:
 * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)
 */
// prettier-ignore
const SHA256_K = /* @__PURE__ */ Uint32Array.from([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2,
]);
/** Reusable temporary buffer. "W" comes straight from spec. */
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
/** Internal 32-byte base SHA2 hash class. */
class SHA2_32B extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
    constructor(outputLen) {
        super(64, outputLen, 8, false);
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA256_W[i] = view.getUint32(offset, false);
        }
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W15, 7) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W2, 17) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 6) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 11) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 25);
            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 2) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 13) ^ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 22);
            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.clean)(SHA256_W);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.buffer);
    }
}
/** Internal SHA2-256 hash class. */
class _SHA256 extends SHA2_32B {
    constructor() {
        super(32);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        Object.defineProperty(this, "A", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[0] | 0
        });
        Object.defineProperty(this, "B", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[1] | 0
        });
        Object.defineProperty(this, "C", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[2] | 0
        });
        Object.defineProperty(this, "D", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[3] | 0
        });
        Object.defineProperty(this, "E", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[4] | 0
        });
        Object.defineProperty(this, "F", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[5] | 0
        });
        Object.defineProperty(this, "G", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[6] | 0
        });
        Object.defineProperty(this, "H", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[7] | 0
        });
    }
}
// SHA2-512 is slower than sha256 in js because u64 operations are slow.
// Round contants
// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409
// prettier-ignore
const K512 = /* @__PURE__ */ (() => _u64_js__WEBPACK_IMPORTED_MODULE_1__.split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817",
].map((n) => BigInt(n))))();
const SHA512_Kh = /* @__PURE__ */ (() => K512[0])();
const SHA512_Kl = /* @__PURE__ */ (() => K512[1])();
// Reusable temporary buffers
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
/** Internal 64-byte base SHA2 hash class. */
class SHA2_64B extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
    constructor(outputLen) {
        super(128, outputLen, 16, false);
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W15h, W15l, 8) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSH(W15h, W15l, 7);
            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W15h, W15l, 8) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(W2h, W2l, 61) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSH(W2h, W2l, 6);
            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(W2h, W2l, 61) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Eh, El, 18) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Eh, El, 18) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Ah, Al, 34) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Ah, Al, 34) ^
                _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.clean)(SHA512_W_H, SHA512_W_L);
    }
    destroy() {
        (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.buffer);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/** Internal SHA2-512 hash class. */
class _SHA512 extends SHA2_64B {
    constructor() {
        super(64);
        Object.defineProperty(this, "Ah", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[0] | 0
        });
        Object.defineProperty(this, "Al", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[1] | 0
        });
        Object.defineProperty(this, "Bh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[2] | 0
        });
        Object.defineProperty(this, "Bl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[3] | 0
        });
        Object.defineProperty(this, "Ch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[4] | 0
        });
        Object.defineProperty(this, "Cl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[5] | 0
        });
        Object.defineProperty(this, "Dh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[6] | 0
        });
        Object.defineProperty(this, "Dl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[7] | 0
        });
        Object.defineProperty(this, "Eh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[8] | 0
        });
        Object.defineProperty(this, "El", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[9] | 0
        });
        Object.defineProperty(this, "Fh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[10] | 0
        });
        Object.defineProperty(this, "Fl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[11] | 0
        });
        Object.defineProperty(this, "Gh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[12] | 0
        });
        Object.defineProperty(this, "Gl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[13] | 0
        });
        Object.defineProperty(this, "Hh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[14] | 0
        });
        Object.defineProperty(this, "Hl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[15] | 0
        });
    }
}
class _SHA384 extends SHA2_64B {
    constructor() {
        super(48);
        Object.defineProperty(this, "Ah", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[0] | 0
        });
        Object.defineProperty(this, "Al", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[1] | 0
        });
        Object.defineProperty(this, "Bh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[2] | 0
        });
        Object.defineProperty(this, "Bl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[3] | 0
        });
        Object.defineProperty(this, "Ch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[4] | 0
        });
        Object.defineProperty(this, "Cl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[5] | 0
        });
        Object.defineProperty(this, "Dh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[6] | 0
        });
        Object.defineProperty(this, "Dl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[7] | 0
        });
        Object.defineProperty(this, "Eh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[8] | 0
        });
        Object.defineProperty(this, "El", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[9] | 0
        });
        Object.defineProperty(this, "Fh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[10] | 0
        });
        Object.defineProperty(this, "Fl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[11] | 0
        });
        Object.defineProperty(this, "Gh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[12] | 0
        });
        Object.defineProperty(this, "Gl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[13] | 0
        });
        Object.defineProperty(this, "Hh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[14] | 0
        });
        Object.defineProperty(this, "Hl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[15] | 0
        });
    }
}
/**
 * SHA2-256 hash function from RFC 4634. In JS it's the fastest: even faster than Blake3. Some info:
 *
 * - Trying 2^128 hashes would get 50% chance of collision, using birthday attack.
 * - BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.
 * - Each sha256 hash is executing 2^18 bit operations.
 * - Good 2024 ASICs can do 200Th/sec with 3500 watts of power, corresponding to 2^36 hashes/joule.
 */
const sha256 = /* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new _SHA256(), 
/* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.oidNist)(0x01));
/** SHA2-512 hash function from RFC 4634. */
const sha512 = /* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new _SHA512(), 
/* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.oidNist)(0x03));
/** SHA2-384 hash function from RFC 4634. */
const sha384 = /* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new _SHA384(), 
/* @__PURE__ */ (0,_utils_noble_js__WEBPACK_IMPORTED_MODULE_2__.oidNist)(0x02));


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/hash/u64.js":
/*!*******************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/hash/u64.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   add3H: () => (/* binding */ add3H),
/* harmony export */   add3L: () => (/* binding */ add3L),
/* harmony export */   add4H: () => (/* binding */ add4H),
/* harmony export */   add4L: () => (/* binding */ add4L),
/* harmony export */   add5H: () => (/* binding */ add5H),
/* harmony export */   add5L: () => (/* binding */ add5L),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   fromBig: () => (/* binding */ fromBig),
/* harmony export */   rotlBH: () => (/* binding */ rotlBH),
/* harmony export */   rotlBL: () => (/* binding */ rotlBL),
/* harmony export */   rotlSH: () => (/* binding */ rotlSH),
/* harmony export */   rotlSL: () => (/* binding */ rotlSL),
/* harmony export */   rotr32H: () => (/* binding */ rotr32H),
/* harmony export */   rotr32L: () => (/* binding */ rotr32L),
/* harmony export */   rotrBH: () => (/* binding */ rotrBH),
/* harmony export */   rotrBL: () => (/* binding */ rotrBL),
/* harmony export */   rotrSH: () => (/* binding */ rotrSH),
/* harmony export */   rotrSL: () => (/* binding */ rotrSL),
/* harmony export */   shrSH: () => (/* binding */ shrSH),
/* harmony export */   shrSL: () => (/* binding */ shrSL),
/* harmony export */   split: () => (/* binding */ split),
/* harmony export */   toBig: () => (/* binding */ toBig)
/* harmony export */ });
/**
 * This file is based on noble-hashes (https://github.com/paulmillr/noble-hashes).
 *
 * noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-hashes/blob/2e0c00e1aa134082ba1380bf3afb8b1641f60fed/src/_u64.ts
 */
/**
 * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.
 * @todo re-check https://issues.chromium.org/issues/42212588
 * @module
 */
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
    if (le) {
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    }
    return {
        h: Number((n >> _32n) & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0,
    };
}
function split(lst, le = false) {
    const len = lst.length;
    const Ah = new Uint32Array(len);
    const Al = new Uint32Array(len);
    for (let i = 0; i < len; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore

// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/identifiers.js":
/*!**********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/identifiers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AeadId: () => (/* binding */ AeadId),
/* harmony export */   KdfId: () => (/* binding */ KdfId),
/* harmony export */   KemId: () => (/* binding */ KemId),
/* harmony export */   Mode: () => (/* binding */ Mode)
/* harmony export */ });
/**
 * The supported HPKE modes.
 */
const Mode = {
    Base: 0x00,
    Psk: 0x01,
    Auth: 0x02,
    AuthPsk: 0x03,
};
/**
 * The supported Key Encapsulation Mechanism (KEM) identifiers.
 */
const KemId = {
    NotAssigned: 0x0000,
    DhkemP256HkdfSha256: 0x0010,
    DhkemP384HkdfSha384: 0x0011,
    DhkemP521HkdfSha512: 0x0012,
    DhkemSecp256k1HkdfSha256: 0x0013,
    DhkemX25519HkdfSha256: 0x0020,
    DhkemX448HkdfSha512: 0x0021,
    HybridkemX25519Kyber768: 0x0030,
    MlKem512: 0x0040,
    MlKem768: 0x0041,
    MlKem1024: 0x0042,
    XWing: 0x647a,
};
/**
 * The supported Key Derivation Function (KDF) identifiers.
 */
const KdfId = {
    HkdfSha256: 0x0001,
    HkdfSha384: 0x0002,
    HkdfSha512: 0x0003,
};
/**
 * The supported Authenticated Encryption with Associated Data (AEAD) identifiers.
 */
const AeadId = {
    Aes128Gcm: 0x0001,
    Aes256Gcm: 0x0002,
    Chacha20Poly1305: 0x0003,
    ExportOnly: 0xFFFF,
};


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/interfaces/aeadEncryptionContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/interfaces/aeadEncryptionContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AEAD_USAGES: () => (/* binding */ AEAD_USAGES)
/* harmony export */ });
// The key usages for AEAD.
const AEAD_USAGES = ["encrypt", "decrypt"];


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KEM_USAGES: () => (/* binding */ KEM_USAGES),
/* harmony export */   LABEL_DKP_PRK: () => (/* binding */ LABEL_DKP_PRK),
/* harmony export */   LABEL_SK: () => (/* binding */ LABEL_SK)
/* harmony export */ });
// The key usages for KEM.
const KEM_USAGES = ["deriveBits"];
// b"dkp_prk"
const LABEL_DKP_PRK = new Uint8Array([
    100,
    107,
    112,
    95,
    112,
    114,
    107,
]);
// b"sk"
const LABEL_SK = new Uint8Array([115, 107]);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SUITE_ID_HEADER_KEM: () => (/* binding */ SUITE_ID_HEADER_KEM)
/* harmony export */ });
// b"KEM"
const SUITE_ID_HEADER_KEM = new Uint8Array([
    75,
    69,
    77,
    0,
    0,
]);


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/kdfs/hkdf.js":
/*!********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/kdfs/hkdf.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HkdfNative: () => (/* binding */ HkdfNative),
/* harmony export */   HkdfSha256Native: () => (/* binding */ HkdfSha256Native),
/* harmony export */   HkdfSha384Native: () => (/* binding */ HkdfSha384Native),
/* harmony export */   HkdfSha512Native: () => (/* binding */ HkdfSha512Native)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "./node_modules/@hpke/common/esm/src/consts.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");
/* harmony import */ var _identifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../identifiers.js */ "./node_modules/@hpke/common/esm/src/identifiers.js");
/* harmony import */ var _algorithm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithm.js */ "./node_modules/@hpke/common/esm/src/algorithm.js");




// b"HPKE-v1"
const HPKE_VERSION = new Uint8Array([72, 80, 75, 69, 45, 118, 49]);
class HkdfNative extends _algorithm_js__WEBPACK_IMPORTED_MODULE_3__.NativeAlgorithm {
    constructor() {
        super();
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KdfId.HkdfSha256
        });
        Object.defineProperty(this, "hashSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_suiteId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY
        });
        Object.defineProperty(this, "algHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                name: "HMAC",
                hash: "SHA-256",
                length: 256,
            }
        });
    }
    init(suiteId) {
        this._suiteId = suiteId;
    }
    buildLabeledIkm(label, ikm) {
        this._checkInit();
        const ret = new Uint8Array(7 + this._suiteId.byteLength + label.byteLength + ikm.byteLength);
        ret.set(HPKE_VERSION, 0);
        ret.set(this._suiteId, 7);
        ret.set(label, 7 + this._suiteId.byteLength);
        ret.set(ikm, 7 + this._suiteId.byteLength + label.byteLength);
        return ret;
    }
    buildLabeledInfo(label, info, len) {
        this._checkInit();
        const ret = new Uint8Array(9 + this._suiteId.byteLength + label.byteLength + info.byteLength);
        ret.set(new Uint8Array([0, len]), 0);
        ret.set(HPKE_VERSION, 2);
        ret.set(this._suiteId, 9);
        ret.set(label, 9 + this._suiteId.byteLength);
        ret.set(info, 9 + this._suiteId.byteLength + label.byteLength);
        return ret;
    }
    async extract(salt, ikm) {
        await this._setup();
        if (salt.byteLength === 0) {
            salt = new ArrayBuffer(this.hashSize);
        }
        if (salt.byteLength !== this.hashSize) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InvalidParamError("The salt length must be the same as the hashSize");
        }
        const key = await this._api.importKey("raw", salt, this.algHash, false, [
            "sign",
        ]);
        return await this._api.sign("HMAC", key, ikm);
    }
    async expand(prk, info, len) {
        await this._setup();
        const key = await this._api.importKey("raw", prk, this.algHash, false, [
            "sign",
        ]);
        const okm = new ArrayBuffer(len);
        const p = new Uint8Array(okm);
        let prev = _consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY;
        const mid = new Uint8Array(info);
        const tail = new Uint8Array(1);
        if (len > 255 * this.hashSize) {
            throw new Error("Entropy limit reached");
        }
        const tmp = new Uint8Array(this.hashSize + mid.length + 1);
        for (let i = 1, cur = 0; cur < p.length; i++) {
            tail[0] = i;
            tmp.set(prev, 0);
            tmp.set(mid, prev.length);
            tmp.set(tail, prev.length + mid.length);
            prev = new Uint8Array(await this._api.sign("HMAC", key, tmp.slice(0, prev.length + mid.length + 1)));
            if (p.length - cur >= prev.length) {
                p.set(prev, cur);
                cur += prev.length;
            }
            else {
                p.set(prev.slice(0, p.length - cur), cur);
                cur += p.length - cur;
            }
        }
        return okm;
    }
    async extractAndExpand(salt, ikm, info, len) {
        await this._setup();
        const baseKey = await this._api.importKey("raw", ikm, "HKDF", false, ["deriveBits"]);
        return await this._api.deriveBits({
            name: "HKDF",
            hash: this.algHash.hash,
            salt: salt,
            info: info,
        }, baseKey, len * 8);
    }
    async labeledExtract(salt, label, ikm) {
        return await this.extract(salt, this.buildLabeledIkm(label, ikm).buffer);
    }
    async labeledExpand(prk, label, info, len) {
        return await this.expand(prk, this.buildLabeledInfo(label, info, len).buffer, len);
    }
    _checkInit() {
        if (this._suiteId === _consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY) {
            throw new Error("Not initialized. Call init()");
        }
    }
}
class HkdfSha256Native extends HkdfNative {
    constructor() {
        super(...arguments);
        /** KdfId.HkdfSha256 (0x0001) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KdfId.HkdfSha256
        });
        /** 32 */
        Object.defineProperty(this, "hashSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** The parameters for Web Cryptography API */
        Object.defineProperty(this, "algHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                name: "HMAC",
                hash: "SHA-256",
                length: 256,
            }
        });
    }
}
class HkdfSha384Native extends HkdfNative {
    constructor() {
        super(...arguments);
        /** KdfId.HkdfSha384 (0x0002) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KdfId.HkdfSha384
        });
        /** 48 */
        Object.defineProperty(this, "hashSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 48
        });
        /** The parameters for Web Cryptography API */
        Object.defineProperty(this, "algHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                name: "HMAC",
                hash: "SHA-384",
                length: 384,
            }
        });
    }
}
class HkdfSha512Native extends HkdfNative {
    constructor() {
        super(...arguments);
        /** KdfId.HkdfSha512 (0x0003) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KdfId.HkdfSha512
        });
        /** 64 */
        Object.defineProperty(this, "hashSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
        /** The parameters for Web Cryptography API */
        Object.defineProperty(this, "algHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                name: "HMAC",
                hash: "SHA-512",
                length: 512,
            }
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/kems/dhkem.js":
/*!*********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/kems/dhkem.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dhkem: () => (/* binding */ Dhkem)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "./node_modules/@hpke/common/esm/src/consts.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");
/* harmony import */ var _interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/kemInterface.js */ "./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js");
/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/misc.js */ "./node_modules/@hpke/common/esm/src/utils/misc.js");




// b"eae_prk"
const LABEL_EAE_PRK = new Uint8Array([101, 97, 101, 95, 112, 114, 107]);
// b"shared_secret"
// deno-fmt-ignore
const LABEL_SHARED_SECRET = new Uint8Array([
    115, 104, 97, 114, 101, 100, 95, 115, 101, 99,
    114, 101, 116,
]);
function concat3(a, b, c) {
    const ret = new Uint8Array(a.length + b.length + c.length);
    ret.set(a, 0);
    ret.set(b, a.length);
    ret.set(c, a.length + b.length);
    return ret;
}
class Dhkem {
    constructor(id, prim, kdf) {
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_prim", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_kdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = id;
        this._prim = prim;
        this._kdf = kdf;
        const suiteId = new Uint8Array(_interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_2__.SUITE_ID_HEADER_KEM);
        suiteId.set((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.i2Osp)(this.id, 2), 3);
        this._kdf.init(suiteId);
    }
    async serializePublicKey(key) {
        return await this._prim.serializePublicKey(key);
    }
    async deserializePublicKey(key) {
        return await this._prim.deserializePublicKey(key);
    }
    async serializePrivateKey(key) {
        return await this._prim.serializePrivateKey(key);
    }
    async deserializePrivateKey(key) {
        return await this._prim.deserializePrivateKey(key);
    }
    async importKey(format, key, isPublic = true) {
        return await this._prim.importKey(format, key, isPublic);
    }
    async generateKeyPair() {
        return await this._prim.generateKeyPair();
    }
    async deriveKeyPair(ikm) {
        if (ikm.byteLength > _consts_js__WEBPACK_IMPORTED_MODULE_0__.INPUT_LENGTH_LIMIT) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InvalidParamError("Too long ikm");
        }
        return await this._prim.deriveKeyPair(ikm);
    }
    async encap(params) {
        let ke;
        if (params.ekm === undefined) {
            ke = await this.generateKeyPair();
        }
        else if ((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKeyPair)(params.ekm)) {
            // params.ekm is only used for testing.
            ke = params.ekm;
        }
        else {
            // params.ekm is only used for testing.
            ke = await this.deriveKeyPair(params.ekm);
        }
        const enc = await this._prim.serializePublicKey(ke.publicKey);
        const pkrm = await this._prim.serializePublicKey(params.recipientPublicKey);
        try {
            let dh;
            if (params.senderKey === undefined) {
                dh = new Uint8Array(await this._prim.dh(ke.privateKey, params.recipientPublicKey));
            }
            else {
                const sks = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKeyPair)(params.senderKey)
                    ? params.senderKey.privateKey
                    : params.senderKey;
                const dh1 = new Uint8Array(await this._prim.dh(ke.privateKey, params.recipientPublicKey));
                const dh2 = new Uint8Array(await this._prim.dh(sks, params.recipientPublicKey));
                dh = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.concat)(dh1, dh2);
            }
            let kemContext;
            if (params.senderKey === undefined) {
                kemContext = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.concat)(new Uint8Array(enc), new Uint8Array(pkrm));
            }
            else {
                const pks = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKeyPair)(params.senderKey)
                    ? params.senderKey.publicKey
                    : await this._prim.derivePublicKey(params.senderKey);
                const pksm = await this._prim.serializePublicKey(pks);
                kemContext = concat3(new Uint8Array(enc), new Uint8Array(pkrm), new Uint8Array(pksm));
            }
            const sharedSecret = await this._generateSharedSecret(dh, kemContext);
            return {
                enc: enc,
                sharedSecret: sharedSecret,
            };
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.EncapError(e);
        }
    }
    async decap(params) {
        const pke = await this._prim.deserializePublicKey(params.enc);
        const skr = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKeyPair)(params.recipientKey)
            ? params.recipientKey.privateKey
            : params.recipientKey;
        const pkr = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKeyPair)(params.recipientKey)
            ? params.recipientKey.publicKey
            : await this._prim.derivePublicKey(params.recipientKey);
        const pkrm = await this._prim.serializePublicKey(pkr);
        try {
            let dh;
            if (params.senderPublicKey === undefined) {
                dh = new Uint8Array(await this._prim.dh(skr, pke));
            }
            else {
                const dh1 = new Uint8Array(await this._prim.dh(skr, pke));
                const dh2 = new Uint8Array(await this._prim.dh(skr, params.senderPublicKey));
                dh = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.concat)(dh1, dh2);
            }
            let kemContext;
            if (params.senderPublicKey === undefined) {
                kemContext = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_3__.concat)(new Uint8Array(params.enc), new Uint8Array(pkrm));
            }
            else {
                const pksm = await this._prim.serializePublicKey(params.senderPublicKey);
                kemContext = new Uint8Array(params.enc.byteLength + pkrm.byteLength + pksm.byteLength);
                kemContext.set(new Uint8Array(params.enc), 0);
                kemContext.set(new Uint8Array(pkrm), params.enc.byteLength);
                kemContext.set(new Uint8Array(pksm), params.enc.byteLength + pkrm.byteLength);
            }
            return await this._generateSharedSecret(dh, kemContext);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DecapError(e);
        }
    }
    async _generateSharedSecret(dh, kemContext) {
        const labeledIkm = this._kdf.buildLabeledIkm(LABEL_EAE_PRK, dh);
        const labeledInfo = this._kdf.buildLabeledInfo(LABEL_SHARED_SECRET, kemContext, this.secretSize);
        return await this._kdf.extractAndExpand(_consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, labeledIkm.buffer, labeledInfo.buffer, this.secretSize);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/kems/dhkemPrimitives/ec.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/kems/dhkemPrimitives/ec.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ec: () => (/* binding */ Ec)
/* harmony export */ });
/* harmony import */ var _algorithm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../algorithm.js */ "./node_modules/@hpke/common/esm/src/algorithm.js");
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../consts.js */ "./node_modules/@hpke/common/esm/src/consts.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");
/* harmony import */ var _identifiers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../identifiers.js */ "./node_modules/@hpke/common/esm/src/identifiers.js");
/* harmony import */ var _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../interfaces/dhkemPrimitives.js */ "./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js");
/* harmony import */ var _utils_bignum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/bignum.js */ "./node_modules/@hpke/common/esm/src/utils/bignum.js");
/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/misc.js */ "./node_modules/@hpke/common/esm/src/utils/misc.js");







// b"candidate"
// deno-fmt-ignore
const LABEL_CANDIDATE = new Uint8Array([
    99, 97, 110, 100, 105, 100, 97, 116, 101,
]);
// the order of the curve being used.
// deno-fmt-ignore
const ORDER_P_256 = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17, 0x9e, 0x84,
    0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51,
]);
// deno-fmt-ignore
const ORDER_P_384 = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc7, 0x63, 0x4d, 0x81, 0xf4, 0x37, 0x2d, 0xdf,
    0x58, 0x1a, 0x0d, 0xb2, 0x48, 0xb0, 0xa7, 0x7a,
    0xec, 0xec, 0x19, 0x6a, 0xcc, 0xc5, 0x29, 0x73,
]);
// deno-fmt-ignore
const ORDER_P_521 = new Uint8Array([
    0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfa, 0x51, 0x86, 0x87, 0x83, 0xbf, 0x2f,
    0x96, 0x6b, 0x7f, 0xcc, 0x01, 0x48, 0xf7, 0x09,
    0xa5, 0xd0, 0x3b, 0xb5, 0xc9, 0xb8, 0x89, 0x9c,
    0x47, 0xae, 0xbb, 0x6f, 0xb7, 0x1e, 0x91, 0x38,
    0x64, 0x09,
]);
// deno-fmt-ignore
const PKCS8_ALG_ID_P_256 = new Uint8Array([
    48, 65, 2, 1, 0, 48, 19, 6, 7, 42,
    134, 72, 206, 61, 2, 1, 6, 8, 42, 134,
    72, 206, 61, 3, 1, 7, 4, 39, 48, 37,
    2, 1, 1, 4, 32,
]);
// deno-fmt-ignore
const PKCS8_ALG_ID_P_384 = new Uint8Array([
    48, 78, 2, 1, 0, 48, 16, 6, 7, 42,
    134, 72, 206, 61, 2, 1, 6, 5, 43, 129,
    4, 0, 34, 4, 55, 48, 53, 2, 1, 1,
    4, 48,
]);
// deno-fmt-ignore
const PKCS8_ALG_ID_P_521 = new Uint8Array([
    48, 96, 2, 1, 0, 48, 16, 6, 7, 42,
    134, 72, 206, 61, 2, 1, 6, 5, 43, 129,
    4, 0, 35, 4, 73, 48, 71, 2, 1, 1,
    4, 66,
]);
class Ec extends _algorithm_js__WEBPACK_IMPORTED_MODULE_0__.NativeAlgorithm {
    constructor(kem, hkdf) {
        super();
        Object.defineProperty(this, "_hkdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_alg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nPk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nSk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nDh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // EC specific arguments for deriving key pair.
        Object.defineProperty(this, "_order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_bitmask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pkcs8AlgId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._hkdf = hkdf;
        switch (kem) {
            case _identifiers_js__WEBPACK_IMPORTED_MODULE_3__.KemId.DhkemP256HkdfSha256:
                this._alg = { name: "ECDH", namedCurve: "P-256" };
                this._nPk = 65;
                this._nSk = 32;
                this._nDh = 32;
                this._order = ORDER_P_256;
                this._bitmask = 0xFF;
                this._pkcs8AlgId = PKCS8_ALG_ID_P_256;
                break;
            case _identifiers_js__WEBPACK_IMPORTED_MODULE_3__.KemId.DhkemP384HkdfSha384:
                this._alg = { name: "ECDH", namedCurve: "P-384" };
                this._nPk = 97;
                this._nSk = 48;
                this._nDh = 48;
                this._order = ORDER_P_384;
                this._bitmask = 0xFF;
                this._pkcs8AlgId = PKCS8_ALG_ID_P_384;
                break;
            default:
                // case KemId.DhkemP521HkdfSha512:
                this._alg = { name: "ECDH", namedCurve: "P-521" };
                this._nPk = 133;
                this._nSk = 66;
                this._nDh = 66;
                this._order = ORDER_P_521;
                this._bitmask = 0x01;
                this._pkcs8AlgId = PKCS8_ALG_ID_P_521;
                break;
        }
    }
    async serializePublicKey(key) {
        await this._setup();
        try {
            return await this._api.exportKey("raw", key);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, true);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            if (!("d" in jwk)) {
                throw new Error("Not private key");
            }
            return (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_6__.base64UrlToBytes)(jwk["d"]).buffer;
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, false);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.DeserializeError(e);
        }
    }
    async importKey(format, key, isPublic) {
        await this._setup();
        try {
            if (format === "raw") {
                return await this._importRawKey(key, isPublic);
            }
            // jwk
            if (key instanceof ArrayBuffer) {
                throw new Error("Invalid jwk key format");
            }
            return await this._importJWK(key, isPublic);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        await this._setup();
        try {
            return await this._api.generateKey(this._alg, true, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_4__.KEM_USAGES);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.NotSupportedError(e);
        }
    }
    async deriveKeyPair(ikm) {
        await this._setup();
        try {
            const dkpPrk = await this._hkdf.labeledExtract(_consts_js__WEBPACK_IMPORTED_MODULE_1__.EMPTY.buffer, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_4__.LABEL_DKP_PRK, new Uint8Array(ikm));
            const bn = new _utils_bignum_js__WEBPACK_IMPORTED_MODULE_5__.Bignum(this._nSk);
            for (let counter = 0; bn.isZero() || !bn.lessThan(this._order); counter++) {
                if (counter > 255) {
                    throw new Error("Faild to derive a key pair");
                }
                const bytes = new Uint8Array(await this._hkdf.labeledExpand(dkpPrk, LABEL_CANDIDATE, (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_6__.i2Osp)(counter, 1), this._nSk));
                bytes[0] = bytes[0] & this._bitmask;
                bn.set(bytes);
            }
            const sk = await this._deserializePkcs8Key(bn.val());
            bn.reset();
            return {
                privateKey: sk,
                publicKey: await this.derivePublicKey(sk),
            };
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.DeriveKeyPairError(e);
        }
    }
    async derivePublicKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            delete jwk["d"];
            delete jwk["key_ops"];
            return await this._api.importKey("jwk", jwk, this._alg, true, []);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.DeserializeError(e);
        }
    }
    async dh(sk, pk) {
        try {
            await this._setup();
            const bits = await this._api.deriveBits({
                name: "ECDH",
                public: pk,
            }, sk, this._nDh * 8);
            return bits;
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.SerializeError(e);
        }
    }
    async _importRawKey(key, isPublic) {
        if (isPublic && key.byteLength !== this._nPk) {
            throw new Error("Invalid public key for the ciphersuite");
        }
        if (!isPublic && key.byteLength !== this._nSk) {
            throw new Error("Invalid private key for the ciphersuite");
        }
        if (isPublic) {
            return await this._api.importKey("raw", key, this._alg, true, []);
        }
        return await this._deserializePkcs8Key(new Uint8Array(key));
    }
    async _importJWK(key, isPublic) {
        if (typeof key.crv === "undefined" || key.crv !== this._alg.namedCurve) {
            throw new Error(`Invalid crv: ${key.crv}`);
        }
        if (isPublic) {
            if (typeof key.d !== "undefined") {
                throw new Error("Invalid key: `d` should not be set");
            }
            return await this._api.importKey("jwk", key, this._alg, true, []);
        }
        if (typeof key.d === "undefined") {
            throw new Error("Invalid key: `d` not found");
        }
        return await this._api.importKey("jwk", key, this._alg, true, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_4__.KEM_USAGES);
    }
    async _deserializePkcs8Key(k) {
        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);
        pkcs8Key.set(this._pkcs8AlgId, 0);
        pkcs8Key.set(k, this._pkcs8AlgId.length);
        return await this._api.importKey("pkcs8", pkcs8Key, this._alg, true, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_4__.KEM_USAGES);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/kems/hybridkem.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/kems/hybridkem.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hybridkem: () => (/* binding */ Hybridkem)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "./node_modules/@hpke/common/esm/src/consts.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ "./node_modules/@hpke/common/esm/src/errors.js");
/* harmony import */ var _identifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../identifiers.js */ "./node_modules/@hpke/common/esm/src/identifiers.js");
/* harmony import */ var _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interfaces/dhkemPrimitives.js */ "./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js");
/* harmony import */ var _interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interfaces/kemInterface.js */ "./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js");
/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/misc.js */ "./node_modules/@hpke/common/esm/src/utils/misc.js");
/* harmony import */ var _xCryptoKey_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../xCryptoKey.js */ "./node_modules/@hpke/common/esm/src/xCryptoKey.js");







class Hybridkem {
    constructor(id, a, b, kdf) {
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _identifiers_js__WEBPACK_IMPORTED_MODULE_2__.KemId.NotAssigned
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_a", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_kdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = id;
        this._a = a;
        this._b = b;
        this._kdf = kdf;
        const suiteId = new Uint8Array(_interfaces_kemInterface_js__WEBPACK_IMPORTED_MODULE_4__.SUITE_ID_HEADER_KEM);
        suiteId.set((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.i2Osp)(this.id, 2), 3);
        this._kdf.init(suiteId);
    }
    async serializePublicKey(key) {
        try {
            return await this._serializePublicKey(key);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        try {
            return await this._deserializePublicKey(key);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        try {
            return await this._serializePrivateKey(key);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        try {
            return await this._deserializePrivateKey(key);
        }
        catch (e) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        const kpA = await this._a.generateKeyPair();
        const kpB = await this._b.generateKeyPair();
        const pkA = await this._a.serializePublicKey(kpA.publicKey);
        const skA = await this._a.serializePrivateKey(kpA.privateKey);
        const pkB = await this._b.serializePublicKey(kpB.publicKey);
        const skB = await this._b.serializePrivateKey(kpB.privateKey);
        return {
            publicKey: await this.deserializePublicKey((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(pkA), new Uint8Array(pkB)).buffer),
            privateKey: await this.deserializePrivateKey((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(skA), new Uint8Array(skB)).buffer),
        };
    }
    async deriveKeyPair(ikm) {
        const dkpPrk = await this._kdf.labeledExtract(_consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_3__.LABEL_DKP_PRK, new Uint8Array(ikm));
        const seed = new Uint8Array(await this._kdf.labeledExpand(dkpPrk, _interfaces_dhkemPrimitives_js__WEBPACK_IMPORTED_MODULE_3__.LABEL_SK, _consts_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY, 32 + 64));
        const seed1 = seed.slice(0, 32);
        const seed2 = seed.slice(32, 96);
        const kpA = await this._a.deriveKeyPair(seed1.buffer);
        const kpB = await this._b.deriveKeyPair(seed2.buffer);
        const pkA = await this._a.serializePublicKey(kpA.publicKey);
        const skA = await this._a.serializePrivateKey(kpA.privateKey);
        const pkB = await this._b.serializePublicKey(kpB.publicKey);
        const skB = await this._b.serializePrivateKey(kpB.privateKey);
        return {
            publicKey: await this.deserializePublicKey((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(pkA), new Uint8Array(pkB)).buffer),
            privateKey: await this.deserializePrivateKey((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(skA), new Uint8Array(skB)).buffer),
        };
    }
    async importKey(format, key, isPublic = true) {
        if (format !== "raw") {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.NotSupportedError("'jwk' is not supported");
        }
        if (!(key instanceof ArrayBuffer)) {
            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InvalidParamError("Invalid type of key");
        }
        if (isPublic) {
            return await this.deserializePublicKey(key);
        }
        return await this.deserializePrivateKey(key);
    }
    async encap(params) {
        let ekmA = undefined;
        let ekmB = undefined;
        if (params.ekm !== undefined && !(0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.isCryptoKeyPair)(params.ekm)) {
            if (params.ekm.byteLength !== 64) {
                throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InvalidParamError("ekm must be 64 bytes in length");
            }
            ekmA = params.ekm.slice(0, 32);
            ekmB = params.ekm.slice(32);
        }
        const pkR = new Uint8Array(await this.serializePublicKey(params.recipientPublicKey));
        const pkRA = await this._a.deserializePublicKey(pkR.slice(0, this._a.publicKeySize).buffer);
        const pkRB = await this._b.deserializePublicKey(pkR.slice(this._a.publicKeySize).buffer);
        const resA = await this._a.encap({ recipientPublicKey: pkRA, ekm: ekmA });
        const resB = await this._b.encap({ recipientPublicKey: pkRB, ekm: ekmB });
        return {
            sharedSecret: (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(resA.sharedSecret), new Uint8Array(resB.sharedSecret)).buffer,
            enc: (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(resA.enc), new Uint8Array(resB.enc))
                .buffer,
        };
    }
    async decap(params) {
        const sk = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.isCryptoKeyPair)(params.recipientKey)
            ? params.recipientKey.privateKey
            : params.recipientKey;
        const skR = new Uint8Array(await this.serializePrivateKey(sk));
        const skRA = await this._a.deserializePrivateKey(skR.slice(0, this._a.privateKeySize).buffer);
        const skRB = await this._b.deserializePrivateKey(skR.slice(this._a.privateKeySize).buffer);
        const ssA = await this._a.decap({
            recipientKey: skRA,
            enc: params.enc.slice(0, this._a.encSize),
        });
        const ssB = await this._b.decap({
            recipientKey: skRB,
            enc: params.enc.slice(this._a.encSize),
        });
        return (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_5__.concat)(new Uint8Array(ssA), new Uint8Array(ssB))
            .buffer;
    }
    _serializePublicKey(k) {
        return new Promise((resolve, reject) => {
            if (k.type !== "public") {
                reject(new Error("Not public key"));
            }
            if (k.algorithm.name !== this.name) {
                reject(new Error(`Invalid algorithm name: ${k.algorithm.name}`));
            }
            if (k.key.byteLength !== this.publicKeySize) {
                reject(new Error(`Invalid key length: ${k.key.byteLength}`));
            }
            resolve(k.key.buffer);
        });
    }
    _deserializePublicKey(k) {
        return new Promise((resolve, reject) => {
            if (k.byteLength !== this.publicKeySize) {
                reject(new Error(`Invalid key length: ${k.byteLength}`));
            }
            resolve(new _xCryptoKey_js__WEBPACK_IMPORTED_MODULE_6__.XCryptoKey(this.name, new Uint8Array(k), "public"));
        });
    }
    _serializePrivateKey(k) {
        return new Promise((resolve, reject) => {
            if (k.type !== "private") {
                reject(new Error("Not private key"));
            }
            if (k.algorithm.name !== this.name) {
                reject(new Error(`Invalid algorithm name: ${k.algorithm.name}`));
            }
            if (k.key.byteLength !== this.privateKeySize) {
                reject(new Error(`Invalid key length: ${k.key.byteLength}`));
            }
            resolve(k.key.buffer);
        });
    }
    _deserializePrivateKey(k) {
        return new Promise((resolve, reject) => {
            if (k.byteLength !== this.privateKeySize) {
                reject(new Error(`Invalid key length: ${k.byteLength}`));
            }
            resolve(new _xCryptoKey_js__WEBPACK_IMPORTED_MODULE_6__.XCryptoKey(this.name, new Uint8Array(k), "private", ["deriveBits"]));
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/utils/bignum.js":
/*!***********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/utils/bignum.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Bignum: () => (/* binding */ Bignum)
/* harmony export */ });
/**
 * The minimum inplementation of bignum to derive an EC key pair.
 */
class Bignum {
    constructor(size) {
        Object.defineProperty(this, "_num", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._num = new Uint8Array(size);
    }
    val() {
        return this._num;
    }
    reset() {
        this._num.fill(0);
    }
    set(src) {
        if (src.length !== this._num.length) {
            throw new Error("Bignum.set: invalid argument");
        }
        this._num.set(src);
    }
    isZero() {
        for (let i = 0; i < this._num.length; i++) {
            if (this._num[i] !== 0) {
                return false;
            }
        }
        return true;
    }
    lessThan(v) {
        if (v.length !== this._num.length) {
            throw new Error("Bignum.lessThan: invalid argument");
        }
        for (let i = 0; i < this._num.length; i++) {
            if (this._num[i] < v[i]) {
                return true;
            }
            if (this._num[i] > v[i]) {
                return false;
            }
        }
        return false;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/utils/misc.js":
/*!*********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/utils/misc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   base64UrlToBytes: () => (/* binding */ base64UrlToBytes),
/* harmony export */   bytesToBase64Url: () => (/* binding */ bytesToBase64Url),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   concat: () => (/* binding */ concat),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   i2Osp: () => (/* binding */ i2Osp),
/* harmony export */   isCryptoKeyPair: () => (/* binding */ isCryptoKeyPair),
/* harmony export */   isDeno: () => (/* binding */ isDeno),
/* harmony export */   isDenoV1: () => (/* binding */ isDenoV1),
/* harmony export */   kemToKeyGenAlgorithm: () => (/* binding */ kemToKeyGenAlgorithm),
/* harmony export */   loadCrypto: () => (/* binding */ loadCrypto),
/* harmony export */   loadSubtleCrypto: () => (/* binding */ loadSubtleCrypto),
/* harmony export */   xor: () => (/* binding */ xor)
/* harmony export */ });
/* harmony import */ var _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_dnt.shims.js */ "./node_modules/@hpke/common/esm/_dnt.shims.js");
/* harmony import */ var _identifiers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../identifiers.js */ "./node_modules/@hpke/common/esm/src/identifiers.js");


const isDenoV1 = () => 
// deno-lint-ignore no-explicit-any
_dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis.process === undefined;
/**
 * Checks whether the runtime is Deno or not (Node.js).
 * @returns boolean - true if the runtime is Deno, false Node.js.
 */
function isDeno() {
    // deno-lint-ignore no-explicit-any
    if (_dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis.process === undefined) {
        return true;
    }
    // deno-lint-ignore no-explicit-any
    return _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis.process?.versions?.deno !== undefined;
}
/**
 * Checks whetehr the type of input is CryptoKeyPair or not.
 */
const isCryptoKeyPair = (x) => typeof x === "object" &&
    x !== null &&
    typeof x.privateKey === "object" &&
    typeof x.publicKey === "object";
/**
 * Converts integer to octet string. I2OSP implementation.
 */
function i2Osp(n, w) {
    if (w <= 0) {
        throw new Error("i2Osp: too small size");
    }
    if (n >= 256 ** w) {
        throw new Error("i2Osp: too large integer");
    }
    const ret = new Uint8Array(w);
    for (let i = 0; i < w && n; i++) {
        ret[w - (i + 1)] = n % 256;
        n = n >> 8;
    }
    return ret;
}
/**
 * Concatenates two Uint8Arrays.
 * @param a Uint8Array
 * @param b Uint8Array
 * @returns Concatenated Uint8Array
 */
function concat(a, b) {
    const ret = new Uint8Array(a.length + b.length);
    ret.set(a, 0);
    ret.set(b, a.length);
    return ret;
}
/**
 * Decodes Base64Url-encoded data.
 * @param v Base64Url-encoded string
 * @returns Uint8Array
 */
function base64UrlToBytes(v) {
    const base64 = v.replace(/-/g, "+").replace(/_/g, "/");
    const byteString = atob(base64);
    const ret = new Uint8Array(byteString.length);
    for (let i = 0; i < byteString.length; i++) {
        ret[i] = byteString.charCodeAt(i);
    }
    return ret;
}
/**
 * Encodes Uint8Array to Base64Url.
 * @param v Uint8Array
 * @returns Base64Url-encoded string
 */
function bytesToBase64Url(v) {
    return btoa(String.fromCharCode(...v))
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=*$/g, "");
}
/**
 * Decodes hex string to Uint8Array.
 * @param v Hex string
 * @returns Uint8Array
 * @throws Error if the input is not a hex string.
 */
function hexToBytes(v) {
    if (v.length === 0) {
        return new Uint8Array([]);
    }
    const res = v.match(/[\da-f]{2}/gi);
    if (res == null) {
        throw new Error("Not hex string.");
    }
    return new Uint8Array(res.map(function (h) {
        return parseInt(h, 16);
    }));
}
/**
 * Encodes Uint8Array to hex string.
 * @param v Uint8Array
 * @returns Hex string
 */
function bytesToHex(v) {
    return [...v].map((x) => x.toString(16).padStart(2, "0")).join("");
}
/**
 * Converts KemId to KeyAlgorithm.
 * @param kem KemId
 * @returns KeyAlgorithm
 */
function kemToKeyGenAlgorithm(kem) {
    switch (kem) {
        case _identifiers_js__WEBPACK_IMPORTED_MODULE_1__.KemId.DhkemP256HkdfSha256:
            return {
                name: "ECDH",
                namedCurve: "P-256",
            };
        case _identifiers_js__WEBPACK_IMPORTED_MODULE_1__.KemId.DhkemP384HkdfSha384:
            return {
                name: "ECDH",
                namedCurve: "P-384",
            };
        case _identifiers_js__WEBPACK_IMPORTED_MODULE_1__.KemId.DhkemP521HkdfSha512:
            return {
                name: "ECDH",
                namedCurve: "P-521",
            };
        default:
            // case KemId.DhkemX25519HkdfSha256
            return {
                name: "X25519",
            };
    }
}
async function loadSubtleCrypto() {
    if (_dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {
        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.
        return globalThis.crypto.subtle;
    }
    // Node.js <= v18
    try {
        // @ts-ignore: to ignore "crypto"
        const { webcrypto } = await __webpack_require__.e(/*! import() */ "_37d8").then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ "?37d8", 19)); // node:crypto
        return webcrypto.subtle;
    }
    catch (_e) {
        throw new Error("Failed to load SubtleCrypto");
    }
}
async function loadCrypto() {
    if (_dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {
        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.
        return globalThis.crypto;
    }
    // Node.js <= v18
    try {
        // @ts-ignore: to ignore "crypto"
        const { webcrypto } = await __webpack_require__.e(/*! import() */ "_37d8").then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ "?37d8", 19)); // node:crypto
        return webcrypto;
    }
    catch (_e) {
        throw new Error("Web Cryptograph API not supported");
    }
}
/**
 * XOR for Uint8Array.
 */
function xor(a, b) {
    if (a.byteLength !== b.byteLength) {
        throw new Error("xor: different length inputs");
    }
    const buf = new Uint8Array(a.byteLength);
    for (let i = 0; i < a.byteLength; i++) {
        buf[i] = a[i] ^ b[i];
    }
    return buf;
}


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/utils/noble.js":
/*!**********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/utils/noble.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   aInRange: () => (/* binding */ aInRange),
/* harmony export */   abytes: () => (/* binding */ abytes),
/* harmony export */   aexists: () => (/* binding */ aexists),
/* harmony export */   ahash: () => (/* binding */ ahash),
/* harmony export */   anumber: () => (/* binding */ anumber),
/* harmony export */   aoutput: () => (/* binding */ aoutput),
/* harmony export */   asciiToBytes: () => (/* binding */ asciiToBytes),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),
/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),
/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),
/* harmony export */   clean: () => (/* binding */ clean),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   copyBytes: () => (/* binding */ copyBytes),
/* harmony export */   createHasher: () => (/* binding */ createHasher),
/* harmony export */   createView: () => (/* binding */ createView),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),
/* harmony export */   inRange: () => (/* binding */ inRange),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),
/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),
/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),
/* harmony export */   oidNist: () => (/* binding */ oidNist),
/* harmony export */   randomBytesAsync: () => (/* binding */ randomBytesAsync),
/* harmony export */   rotr: () => (/* binding */ rotr),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   validateObject: () => (/* binding */ validateObject)
/* harmony export */ });
/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ "./node_modules/@hpke/common/esm/src/utils/misc.js");
// deno-lint-ignore-file no-explicit-any
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/utils.ts
 */
/**
 * Hex, bytes and number utilities.
 * @module
 */

const _0n = /* @__PURE__ */ BigInt(0);
/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */
function isBytes(a) {
    return a instanceof Uint8Array ||
        (ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array");
}
/** Asserts something is Uint8Array. */
function abytes(value, length, title = "") {
    const bytes = isBytes(value);
    const len = value?.length;
    const needsLen = length !== undefined;
    if (!bytes || (needsLen && len !== length)) {
        const prefix = title && `"${title}" `;
        const ofLen = needsLen ? ` of length ${length}` : "";
        const got = bytes ? `length=${len}` : `type=${typeof value}`;
        throw new Error(prefix + "expected Uint8Array" + ofLen + ", got " + got);
    }
    return value;
}
/** Asserts something is hash */
function ahash(h) {
    if (typeof h !== "function" || typeof h.create !== "function") {
        throw new Error("Hash must wrapped by utils.createHasher");
    }
    anumber(h.outputLen);
    anumber(h.blockLen);
}
/** Asserts a hash instance has not been destroyed / finished */
function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) {
        throw new Error("Hash#digest() has already been called");
    }
}
/** Asserts output is properly-sized byte array */
function aoutput(out, instance) {
    abytes(out, undefined, "digestInto() output");
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('"digestInto() output" expected to be of length >=' + min);
    }
}
/** Asserts something is positive integer. */
function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0) {
        throw new Error("positive integer expected, got " + n);
    }
}
// Used in weierstrass, der
function abignumer(n) {
    if (typeof n === "bigint") {
        if (!isPosBig(n))
            throw new Error("positive bigint expected, got " + n);
    }
    else
        anumber(n);
    return n;
}
/** Zeroize a byte array. Warning: JS provides no guarantees. */
function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
    }
}
/** Create DataView of an array for easy byte-level manipulation. */
function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** The rotate right (circular right shift) operation for uint32 */
function rotr(word, shift) {
    return (word << (32 - shift)) | (word >>> shift);
}
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = /* @__PURE__ */ (() => 
// @ts-ignore: to use toHex
typeof Uint8Array.from([]).toHex === "function" &&
    // @ts-ignore: to use fromHex
    typeof Uint8Array.fromHex === "function")();
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
/**
 * Convert byte array to hex string. Uses built-in function, when available.
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore: to use toHex
    if (hasHexBuiltin)
        return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = "";
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * Convert hex string to byte array. Uses built-in function, when available.
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== "string") {
        throw new Error("hex string expected, got " + typeof hex);
    }
    // @ts-ignore: to use fromHex
    if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2) {
        throw new Error("hex string expected, got unpadded hex of length " + hl);
    }
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' +
                hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
/**
 * Converts string to bytes using UTF8 encoding.
 * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== "string")
        throw new Error("string expected");
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Converts bytes to string using UTF8 encoding.
 * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'
 */
function bytesToUtf8(bytes) {
    return new TextDecoder().decode(bytes);
}
function numberToHexUnpadded(num) {
    const hex = abignumer(num).toString(16);
    return hex.length & 1 ? "0" + hex : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== "string") {
        throw new Error("hex string expected, got " + typeof hex);
    }
    return hex === "" ? _0n : BigInt("0x" + hex); // Big Endian
}
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
    return hexToNumber(bytesToHex(copyBytes(abytes(bytes)).reverse()));
}
function numberToBytesBE(n, len) {
    anumber(len);
    n = abignumer(n);
    const res = hexToBytes(n.toString(16).padStart(len * 2, "0"));
    if (res.length !== len)
        throw new Error("number too large");
    return res;
}
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
/**
 * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,
 * and Buffer#slice creates mutable copy. Never use Buffers!
 */
function copyBytes(bytes) {
    return Uint8Array.from(bytes);
}
/** Copies several Uint8Arrays into one. */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
/**
 * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols
 * Should be safe to use for things expected to be ASCII.
 * Returns exact same result as utf8ToBytes for ASCII or throws.
 */
function asciiToBytes(ascii) {
    return Uint8Array.from(ascii, (c, i) => {
        const charCode = c.charCodeAt(0);
        if (c.length !== 1 || charCode > 127) {
            throw new Error(`string contains non-ASCII character "${ascii[i]}" with code ${charCode} at position ${i}`);
        }
        return charCode;
    });
}
// Is positive bigint
const isPosBig = (n) => typeof n === "bigint" && _0n <= n;
function inRange(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
}
/**
 * Asserts min <= n < max. NOTE: It's < max and not <= max.
 * @example
 * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)
 */
function aInRange(title, n, min, max) {
    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?
    // consider P=256n, min=0n, max=P
    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`
    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`
    // - our way is the cleanest:               `inRange('x', x, 0n, P)
    if (!inRange(n, min, max)) {
        throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n);
    }
}
function validateObject(object, fields = {}, optFields = {}) {
    if (!object || typeof object !== "object") {
        throw new Error("expected valid options object");
    }
    function checkField(fieldName, expectedType, isOpt) {
        const val = object[fieldName];
        if (isOpt && val === undefined)
            return;
        const current = typeof val;
        if (current !== expectedType || val === null) {
            throw new Error(`param "${fieldName}" is invalid: expected ${expectedType}, got ${current}`);
        }
    }
    const iter = (f, isOpt) => Object.entries(f).forEach(([k, v]) => checkField(k, v, isOpt));
    iter(fields, false);
    iter(optFields, true);
}
function createHasher(hashCons, info = {}) {
    const hashC = (msg, opts) => hashCons(opts).update(msg).digest();
    const tmp = hashCons(undefined);
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    Object.assign(hashC, info);
    return Object.freeze(hashC);
}
// /** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */
// export function randomBytes(bytesLength = 32): Uint8Array {
//   const cr = typeof globalThis != null && (globalThis as any).crypto;
//   if (!cr || typeof cr.getRandomValues !== "function") {
//     throw new Error("crypto.getRandomValues must be defined");
//   }
//   return cr.getRandomValues(new Uint8Array(bytesLength));
// }
/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */
async function randomBytesAsync(bytesLength = 32) {
    const api = await (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.loadCrypto)();
    const rnd = new Uint8Array(bytesLength);
    api.getRandomValues(rnd);
    return rnd;
}
// 06 09 60 86 48 01 65 03 04 02
const oidNist = (suffix) => ({
    oid: Uint8Array.from([
        0x06,
        0x09,
        0x60,
        0x86,
        0x48,
        0x01,
        0x65,
        0x03,
        0x04,
        0x02,
        suffix,
    ]),
});


/***/ }),

/***/ "./node_modules/@hpke/common/esm/src/xCryptoKey.js":
/*!*********************************************************!*\
  !*** ./node_modules/@hpke/common/esm/src/xCryptoKey.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XCryptoKey: () => (/* binding */ XCryptoKey)
/* harmony export */ });
class XCryptoKey {
    constructor(name, key, type, usages = []) {
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "extractable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "algorithm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "usages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = key;
        this.type = type;
        this.algorithm = { name: name };
        this.usages = usages;
        if (type === "public") {
            this.usages = [];
        }
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/mod.js":
/*!********************************************!*\
  !*** ./node_modules/@hpke/core/esm/mod.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AeadId: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AeadId),
/* harmony export */   Aes128Gcm: () => (/* reexport safe */ _src_aeads_aesGcm_js__WEBPACK_IMPORTED_MODULE_1__.Aes128Gcm),
/* harmony export */   Aes256Gcm: () => (/* reexport safe */ _src_aeads_aesGcm_js__WEBPACK_IMPORTED_MODULE_1__.Aes256Gcm),
/* harmony export */   CipherSuite: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.CipherSuite),
/* harmony export */   DecapError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DecapError),
/* harmony export */   DeriveKeyPairError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError),
/* harmony export */   DeserializeError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError),
/* harmony export */   DhkemP256HkdfSha256: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.DhkemP256HkdfSha256),
/* harmony export */   DhkemP384HkdfSha384: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.DhkemP384HkdfSha384),
/* harmony export */   DhkemP521HkdfSha512: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.DhkemP521HkdfSha512),
/* harmony export */   DhkemX25519HkdfSha256: () => (/* reexport safe */ _src_kems_dhkemX25519_js__WEBPACK_IMPORTED_MODULE_4__.DhkemX25519HkdfSha256),
/* harmony export */   DhkemX448HkdfSha512: () => (/* reexport safe */ _src_kems_dhkemX448_js__WEBPACK_IMPORTED_MODULE_5__.DhkemX448HkdfSha512),
/* harmony export */   EncapError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EncapError),
/* harmony export */   ExportError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.ExportError),
/* harmony export */   ExportOnly: () => (/* reexport safe */ _src_aeads_exportOnly_js__WEBPACK_IMPORTED_MODULE_2__.ExportOnly),
/* harmony export */   HkdfSha256: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.HkdfSha256),
/* harmony export */   HkdfSha384: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.HkdfSha384),
/* harmony export */   HkdfSha512: () => (/* reexport safe */ _src_native_js__WEBPACK_IMPORTED_MODULE_3__.HkdfSha512),
/* harmony export */   HpkeError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HpkeError),
/* harmony export */   InvalidParamError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError),
/* harmony export */   KdfId: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KdfId),
/* harmony export */   KemId: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId),
/* harmony export */   MessageLimitReachedError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.MessageLimitReachedError),
/* harmony export */   NotSupportedError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError),
/* harmony export */   OpenError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.OpenError),
/* harmony export */   SealError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SealError),
/* harmony export */   SerializeError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError),
/* harmony export */   ValidationError: () => (/* reexport safe */ _hpke_common__WEBPACK_IMPORTED_MODULE_0__.ValidationError)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _src_aeads_aesGcm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/aeads/aesGcm.js */ "./node_modules/@hpke/core/esm/src/aeads/aesGcm.js");
/* harmony import */ var _src_aeads_exportOnly_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/aeads/exportOnly.js */ "./node_modules/@hpke/core/esm/src/aeads/exportOnly.js");
/* harmony import */ var _src_native_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/native.js */ "./node_modules/@hpke/core/esm/src/native.js");
/* harmony import */ var _src_kems_dhkemX25519_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/kems/dhkemX25519.js */ "./node_modules/@hpke/core/esm/src/kems/dhkemX25519.js");
/* harmony import */ var _src_kems_dhkemX448_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/kems/dhkemX448.js */ "./node_modules/@hpke/core/esm/src/kems/dhkemX448.js");








/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/aeads/aesGcm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/aeads/aesGcm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aes128Gcm: () => (/* binding */ Aes128Gcm),
/* harmony export */   Aes256Gcm: () => (/* binding */ Aes256Gcm),
/* harmony export */   AesGcmContext: () => (/* binding */ AesGcmContext)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

class AesGcmContext extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NativeAlgorithm {
    constructor(key) {
        super();
        Object.defineProperty(this, "_rawKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        this._rawKey = key;
    }
    async seal(iv, data, aad) {
        await this._setupKey();
        const alg = {
            name: "AES-GCM",
            iv: iv,
            additionalData: aad,
        };
        const ct = await this._api.encrypt(alg, this._key, data);
        return ct;
    }
    async open(iv, data, aad) {
        await this._setupKey();
        const alg = {
            name: "AES-GCM",
            iv: iv,
            additionalData: aad,
        };
        const pt = await this._api.decrypt(alg, this._key, data);
        return pt;
    }
    async _setupKey() {
        if (this._key !== undefined) {
            return;
        }
        await this._setup();
        const key = await this._importKey(this._rawKey);
        (new Uint8Array(this._rawKey)).fill(0);
        this._key = key;
        return;
    }
    async _importKey(key) {
        return await this._api.importKey("raw", key, { name: "AES-GCM" }, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AEAD_USAGES);
    }
}
/**
 * The AES-128-GCM for HPKE AEAD implementing {@link AeadInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.Aes128Gcm`.
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class Aes128Gcm {
    constructor() {
        /** AeadId.Aes128Gcm (0x0001) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AeadId.Aes128Gcm
        });
        /** 16 */
        Object.defineProperty(this, "keySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
        /** 12 */
        Object.defineProperty(this, "nonceSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 12
        });
        /** 16 */
        Object.defineProperty(this, "tagSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
    }
    createEncryptionContext(key) {
        return new AesGcmContext(key);
    }
}
/**
 * The AES-256-GCM for HPKE AEAD implementing {@link AeadInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.Aes256Gcm`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
class Aes256Gcm extends Aes128Gcm {
    constructor() {
        super(...arguments);
        /** AeadId.Aes256Gcm (0x0002) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AeadId.Aes256Gcm
        });
        /** 32 */
        Object.defineProperty(this, "keySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 12 */
        Object.defineProperty(this, "nonceSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 12
        });
        /** 16 */
        Object.defineProperty(this, "tagSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 16
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/aeads/exportOnly.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/aeads/exportOnly.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExportOnly: () => (/* binding */ ExportOnly)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

/**
 * The ExportOnly mode for HPKE AEAD implementing {@link AeadInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.ExportOnly`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   ExportOnly,
 *   HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new ExportOnly(),
 * });
 * ```
 */
class ExportOnly {
    constructor() {
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AeadId.ExportOnly
        });
        Object.defineProperty(this, "keySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "nonceSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "tagSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    createEncryptionContext(_key) {
        throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError("Export only");
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/cipherSuiteNative.js":
/*!**************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/cipherSuiteNative.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CipherSuiteNative: () => (/* binding */ CipherSuiteNative)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _exporterContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./exporterContext.js */ "./node_modules/@hpke/core/esm/src/exporterContext.js");
/* harmony import */ var _recipientContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./recipientContext.js */ "./node_modules/@hpke/core/esm/src/recipientContext.js");
/* harmony import */ var _senderContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./senderContext.js */ "./node_modules/@hpke/core/esm/src/senderContext.js");




// b"base_nonce"
// deno-fmt-ignore
const LABEL_BASE_NONCE = new Uint8Array([
    98, 97, 115, 101, 95, 110, 111, 110, 99, 101,
]);
// b"exp"
const LABEL_EXP = new Uint8Array([101, 120, 112]);
// b"info_hash"
// deno-fmt-ignore
const LABEL_INFO_HASH = new Uint8Array([
    105, 110, 102, 111, 95, 104, 97, 115, 104,
]);
// b"key"
const LABEL_KEY = new Uint8Array([107, 101, 121]);
// b"psk_id_hash"
// deno-fmt-ignore
const LABEL_PSK_ID_HASH = new Uint8Array([
    112, 115, 107, 95, 105, 100, 95, 104, 97, 115, 104,
]);
// b"secret"
const LABEL_SECRET = new Uint8Array([115, 101, 99, 114, 101, 116]);
// b"HPKE"
// deno-fmt-ignore
const SUITE_ID_HEADER_HPKE = new Uint8Array([
    72, 80, 75, 69, 0, 0, 0, 0, 0, 0,
]);
/**
 * The Hybrid Public Key Encryption (HPKE) ciphersuite,
 * which is implemented using only
 * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.
 *
 * This is the super class of {@link CipherSuite} and the same as
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuite | @hpke/core#CipherSuite} as follows:
 * which supports only the ciphersuites that can be implemented on the native
 * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.
 * Therefore, the following cryptographic algorithms are not supported for now:
 *   - DHKEM(X25519, HKDF-SHA256)
 *   - DHKEM(X448, HKDF-SHA512)
 *   - ChaCha20Poly1305
 *
 * In addtion, the HKDF functions contained in this class can only derive
 * keys of the same length as the `hashSize`.
 *
 * If you want to use the unsupported cryptographic algorithms
 * above or derive keys longer than the `hashSize`,
 * please use {@link CipherSuite}.
 *
 * This class provides following functions:
 *
 * - Creates encryption contexts both for senders and recipients.
 *   - {@link createSenderContext}
 *   - {@link createRecipientContext}
 * - Provides single-shot encryption API.
 *   - {@link seal}
 *   - {@link open}
 *
 * The calling of the constructor of this class is the starting
 * point for HPKE operations for both senders and recipients.
 *
 * @example Use only ciphersuites supported by Web Cryptography API.
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 *   CipherSuite,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 *
 * @example Use a ciphersuite which is currently not supported by Web Cryptography API.
 *
 * ```ts
 * import { Aes128Gcm, HkdfSha256, CipherSuite } from "@hpke/core";
 * // Use an extension module.
 * import { DhkemX25519HkdfSha256 } from "@hpke/dhkem-x25519";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX25519HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class CipherSuiteNative extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NativeAlgorithm {
    /**
     * @param params A set of parameters for building a cipher suite.
     *
     * If the error occurred, throws {@link InvalidParamError}.
     *
     * @throws {@link InvalidParamError}
     */
    constructor(params) {
        super();
        Object.defineProperty(this, "_kem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_kdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_aead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_suiteId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // KEM
        if (typeof params.kem === "number") {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("KemId cannot be used");
        }
        this._kem = params.kem;
        // KDF
        if (typeof params.kdf === "number") {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("KdfId cannot be used");
        }
        this._kdf = params.kdf;
        // AEAD
        if (typeof params.aead === "number") {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("AeadId cannot be used");
        }
        this._aead = params.aead;
        this._suiteId = new Uint8Array(SUITE_ID_HEADER_HPKE);
        this._suiteId.set((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.i2Osp)(this._kem.id, 2), 4);
        this._suiteId.set((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.i2Osp)(this._kdf.id, 2), 6);
        this._suiteId.set((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.i2Osp)(this._aead.id, 2), 8);
        this._kdf.init(this._suiteId);
    }
    /**
     * Gets the KEM context of the ciphersuite.
     */
    get kem() {
        return this._kem;
    }
    /**
     * Gets the KDF context of the ciphersuite.
     */
    get kdf() {
        return this._kdf;
    }
    /**
     * Gets the AEAD context of the ciphersuite.
     */
    get aead() {
        return this._aead;
    }
    /**
     * Creates an encryption context for a sender.
     *
     * If the error occurred, throws {@link DecapError} | {@link ValidationError}.
     *
     * @param params A set of parameters for the sender encryption context.
     * @returns A sender encryption context.
     * @throws {@link EncapError}, {@link ValidationError}
     */
    async createSenderContext(params) {
        this._validateInputLength(params);
        await this._setup();
        const dh = await this._kem.encap(params);
        let mode;
        if (params.psk !== undefined) {
            mode = params.senderKey !== undefined ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.AuthPsk : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Psk;
        }
        else {
            mode = params.senderKey !== undefined ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Auth : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Base;
        }
        return await this._keyScheduleS(mode, dh.sharedSecret, dh.enc, params);
    }
    /**
     * Creates an encryption context for a recipient.
     *
     * If the error occurred, throws {@link DecapError}
     * | {@link DeserializeError} | {@link ValidationError}.
     *
     * @param params A set of parameters for the recipient encryption context.
     * @returns A recipient encryption context.
     * @throws {@link DecapError}, {@link DeserializeError}, {@link ValidationError}
     */
    async createRecipientContext(params) {
        this._validateInputLength(params);
        await this._setup();
        const sharedSecret = await this._kem.decap(params);
        let mode;
        if (params.psk !== undefined) {
            mode = params.senderPublicKey !== undefined ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.AuthPsk : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Psk;
        }
        else {
            mode = params.senderPublicKey !== undefined ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Auth : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Mode.Base;
        }
        return await this._keyScheduleR(mode, sharedSecret, params);
    }
    /**
     * Encrypts a message to a recipient.
     *
     * If the error occurred, throws `EncapError` | `MessageLimitReachedError` | `SealError` | `ValidationError`.
     *
     * @param params A set of parameters for building a sender encryption context.
     * @param pt A plain text as bytes to be encrypted.
     * @param aad Additional authenticated data as bytes fed by an application.
     * @returns A cipher text and an encapsulated key as bytes.
     * @throws {@link EncapError}, {@link MessageLimitReachedError}, {@link SealError}, {@link ValidationError}
     */
    async seal(params, pt, aad = _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer) {
        const ctx = await this.createSenderContext(params);
        return {
            ct: await ctx.seal(pt, aad),
            enc: ctx.enc,
        };
    }
    /**
     * Decrypts a message from a sender.
     *
     * If the error occurred, throws `DecapError` | `DeserializeError` | `OpenError` | `ValidationError`.
     *
     * @param params A set of parameters for building a recipient encryption context.
     * @param ct An encrypted text as bytes to be decrypted.
     * @param aad Additional authenticated data as bytes fed by an application.
     * @returns A decrypted plain text as bytes.
     * @throws {@link DecapError}, {@link DeserializeError}, {@link OpenError}, {@link ValidationError}
     */
    async open(params, ct, aad = _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer) {
        const ctx = await this.createRecipientContext(params);
        return await ctx.open(ct, aad);
    }
    // private verifyPskInputs(mode: Mode, params: KeyScheduleParams) {
    //   const gotPsk = (params.psk !== undefined);
    //   const gotPskId = (params.psk !== undefined && params.psk.id.byteLength > 0);
    //   if (gotPsk !== gotPskId) {
    //     throw new Error('Inconsistent PSK inputs');
    //   }
    //   if (gotPsk && (mode === Mode.Base || mode === Mode.Auth)) {
    //     throw new Error('PSK input provided when not needed');
    //   }
    //   if (!gotPsk && (mode === Mode.Psk || mode === Mode.AuthPsk)) {
    //     throw new Error('Missing required PSK input');
    //   }
    //   return;
    // }
    async _keySchedule(mode, sharedSecret, params) {
        // Currently, there is no point in executing this function
        // because this hpke library does not allow users to explicitly specify the mode.
        //
        // this.verifyPskInputs(mode, params);
        const pskId = params.psk === undefined
            ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY
            : new Uint8Array(params.psk.id);
        const pskIdHash = await this._kdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, LABEL_PSK_ID_HASH, pskId);
        const info = params.info === undefined
            ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY
            : new Uint8Array(params.info);
        const infoHash = await this._kdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, LABEL_INFO_HASH, info);
        const keyScheduleContext = new Uint8Array(1 + pskIdHash.byteLength + infoHash.byteLength);
        keyScheduleContext.set(new Uint8Array([mode]), 0);
        keyScheduleContext.set(new Uint8Array(pskIdHash), 1);
        keyScheduleContext.set(new Uint8Array(infoHash), 1 + pskIdHash.byteLength);
        const psk = params.psk === undefined
            ? _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY
            : new Uint8Array(params.psk.key);
        const ikm = this._kdf.buildLabeledIkm(LABEL_SECRET, psk)
            .buffer;
        const exporterSecretInfo = this._kdf.buildLabeledInfo(LABEL_EXP, keyScheduleContext, this._kdf.hashSize).buffer;
        const exporterSecret = await this._kdf.extractAndExpand(sharedSecret, ikm, exporterSecretInfo, this._kdf.hashSize);
        if (this._aead.id === _hpke_common__WEBPACK_IMPORTED_MODULE_0__.AeadId.ExportOnly) {
            return { aead: this._aead, exporterSecret: exporterSecret };
        }
        const keyInfo = this._kdf.buildLabeledInfo(LABEL_KEY, keyScheduleContext, this._aead.keySize).buffer;
        const key = await this._kdf.extractAndExpand(sharedSecret, ikm, keyInfo, this._aead.keySize);
        const baseNonceInfo = this._kdf.buildLabeledInfo(LABEL_BASE_NONCE, keyScheduleContext, this._aead.nonceSize).buffer;
        const baseNonce = await this._kdf.extractAndExpand(sharedSecret, ikm, baseNonceInfo, this._aead.nonceSize);
        return {
            aead: this._aead,
            exporterSecret: exporterSecret,
            key: key,
            baseNonce: new Uint8Array(baseNonce),
            seq: 0,
        };
    }
    async _keyScheduleS(mode, sharedSecret, enc, params) {
        const res = await this._keySchedule(mode, sharedSecret, params);
        if (res.key === undefined) {
            return new _exporterContext_js__WEBPACK_IMPORTED_MODULE_1__.SenderExporterContextImpl(this._api, this._kdf, res.exporterSecret, enc);
        }
        return new _senderContext_js__WEBPACK_IMPORTED_MODULE_3__.SenderContextImpl(this._api, this._kdf, res, enc);
    }
    async _keyScheduleR(mode, sharedSecret, params) {
        const res = await this._keySchedule(mode, sharedSecret, params);
        if (res.key === undefined) {
            return new _exporterContext_js__WEBPACK_IMPORTED_MODULE_1__.RecipientExporterContextImpl(this._api, this._kdf, res.exporterSecret);
        }
        return new _recipientContext_js__WEBPACK_IMPORTED_MODULE_2__.RecipientContextImpl(this._api, this._kdf, res);
    }
    _validateInputLength(params) {
        if (params.info !== undefined &&
            params.info.byteLength > _hpke_common__WEBPACK_IMPORTED_MODULE_0__.INFO_LENGTH_LIMIT) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("Too long info");
        }
        if (params.psk !== undefined) {
            if (params.psk.key.byteLength < _hpke_common__WEBPACK_IMPORTED_MODULE_0__.MINIMUM_PSK_LENGTH) {
                throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError(`PSK must have at least ${_hpke_common__WEBPACK_IMPORTED_MODULE_0__.MINIMUM_PSK_LENGTH} bytes`);
            }
            if (params.psk.key.byteLength > _hpke_common__WEBPACK_IMPORTED_MODULE_0__.INPUT_LENGTH_LIMIT) {
                throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("Too long psk.key");
            }
            if (params.psk.id.byteLength > _hpke_common__WEBPACK_IMPORTED_MODULE_0__.INPUT_LENGTH_LIMIT) {
                throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("Too long psk.id");
            }
        }
        return;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/encryptionContext.js":
/*!**************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/encryptionContext.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EncryptionContextImpl: () => (/* binding */ EncryptionContextImpl)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _exporterContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./exporterContext.js */ "./node_modules/@hpke/core/esm/src/exporterContext.js");


class EncryptionContextImpl extends _exporterContext_js__WEBPACK_IMPORTED_MODULE_1__.ExporterContextImpl {
    constructor(api, kdf, params) {
        super(api, kdf, params.exporterSecret);
        // AEAD id.
        Object.defineProperty(this, "_aead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The length in bytes of a key for the algorithm.
        Object.defineProperty(this, "_nK", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The length in bytes of a nonce for the algorithm.
        Object.defineProperty(this, "_nN", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The length in bytes of an authentication tag for the algorithm.
        Object.defineProperty(this, "_nT", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The end-to-end encryption key information.
        Object.defineProperty(this, "_ctx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (params.key === undefined || params.baseNonce === undefined ||
            params.seq === undefined) {
            throw new Error("Required parameters are missing");
        }
        this._aead = params.aead;
        this._nK = this._aead.keySize;
        this._nN = this._aead.nonceSize;
        this._nT = this._aead.tagSize;
        const key = this._aead.createEncryptionContext(params.key);
        this._ctx = {
            key: key,
            baseNonce: params.baseNonce,
            seq: params.seq,
        };
    }
    computeNonce(k) {
        const seqBytes = (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.i2Osp)(k.seq, k.baseNonce.byteLength);
        return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.xor)(k.baseNonce, seqBytes).buffer;
    }
    incrementSeq(k) {
        // if (this.seq >= (1 << (8 * this.baseNonce.byteLength)) - 1) {
        if (k.seq > Number.MAX_SAFE_INTEGER) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.MessageLimitReachedError("Message limit reached");
        }
        k.seq += 1;
        return;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/exporterContext.js":
/*!************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/exporterContext.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExporterContextImpl: () => (/* binding */ ExporterContextImpl),
/* harmony export */   RecipientExporterContextImpl: () => (/* binding */ RecipientExporterContextImpl),
/* harmony export */   SenderExporterContextImpl: () => (/* binding */ SenderExporterContextImpl)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _utils_emitNotSupported_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/emitNotSupported.js */ "./node_modules/@hpke/core/esm/src/utils/emitNotSupported.js");


// b"sec"
const LABEL_SEC = new Uint8Array([115, 101, 99]);
class ExporterContextImpl {
    constructor(api, kdf, exporterSecret) {
        Object.defineProperty(this, "_api", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exporterSecret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_kdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._api = api;
        this._kdf = kdf;
        this.exporterSecret = exporterSecret;
    }
    async seal(_data, _aad) {
        return await (0,_utils_emitNotSupported_js__WEBPACK_IMPORTED_MODULE_1__.emitNotSupported)();
    }
    async open(_data, _aad) {
        return await (0,_utils_emitNotSupported_js__WEBPACK_IMPORTED_MODULE_1__.emitNotSupported)();
    }
    async export(exporterContext, len) {
        if (exporterContext.byteLength > _hpke_common__WEBPACK_IMPORTED_MODULE_0__.INPUT_LENGTH_LIMIT) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError("Too long exporter context");
        }
        try {
            return await this._kdf.labeledExpand(this.exporterSecret, LABEL_SEC, new Uint8Array(exporterContext), len);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.ExportError(e);
        }
    }
}
class RecipientExporterContextImpl extends ExporterContextImpl {
}
class SenderExporterContextImpl extends ExporterContextImpl {
    constructor(api, kdf, exporterSecret, enc) {
        super(api, kdf, exporterSecret);
        Object.defineProperty(this, "enc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.enc = enc;
        return;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/kems/dhkemNative.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/kems/dhkemNative.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemP256HkdfSha256Native: () => (/* binding */ DhkemP256HkdfSha256Native),
/* harmony export */   DhkemP384HkdfSha384Native: () => (/* binding */ DhkemP384HkdfSha384Native),
/* harmony export */   DhkemP521HkdfSha512Native: () => (/* binding */ DhkemP521HkdfSha512Native)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

class DhkemP256HkdfSha256Native extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha256Native();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 65
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 65
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
    }
}
class DhkemP384HkdfSha384Native extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha384Native();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 48
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 97
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 97
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 48
        });
    }
}
class DhkemP521HkdfSha512Native extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha512Native();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 133
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 133
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x25519.js":
/*!************************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x25519.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X25519: () => (/* binding */ X25519)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

const ALG_NAME = "X25519";
// deno-fmt-ignore
const PKCS8_ALG_ID_X25519 = new Uint8Array([
    0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06,
    0x03, 0x2b, 0x65, 0x6e, 0x04, 0x22, 0x04, 0x20,
]);
class X25519 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NativeAlgorithm {
    constructor(hkdf) {
        super();
        Object.defineProperty(this, "_hkdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_alg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nPk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nSk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nDh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pkcs8AlgId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._alg = { name: ALG_NAME };
        this._hkdf = hkdf;
        this._nPk = 32;
        this._nSk = 32;
        this._nDh = 32;
        this._pkcs8AlgId = PKCS8_ALG_ID_X25519;
    }
    async serializePublicKey(key) {
        await this._setup();
        try {
            return await this._api.exportKey("raw", key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, true);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            if (!("d" in jwk)) {
                throw new Error("Not private key");
            }
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(jwk["d"]).buffer;
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, false);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async importKey(format, key, isPublic) {
        await this._setup();
        try {
            if (format === "raw") {
                return await this._importRawKey(key, isPublic);
            }
            // jwk
            if (key instanceof ArrayBuffer) {
                throw new Error("Invalid jwk key format");
            }
            return await this._importJWK(key, isPublic);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        await this._setup();
        try {
            return await this._api.generateKey(ALG_NAME, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError(e);
        }
    }
    async deriveKeyPair(ikm) {
        await this._setup();
        try {
            const dkpPrk = await this._hkdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_DKP_PRK, new Uint8Array(ikm));
            const rawSk = await this._hkdf.labeledExpand(dkpPrk, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_SK, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY, this._nSk);
            const rawSkBytes = new Uint8Array(rawSk);
            const sk = await this._deserializePkcs8Key(rawSkBytes);
            rawSkBytes.fill(0);
            return {
                privateKey: sk,
                publicKey: await this.derivePublicKey(sk),
            };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError(e);
        }
    }
    async derivePublicKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            delete jwk["d"];
            delete jwk["key_ops"];
            return await this._api.importKey("jwk", jwk, this._alg, true, []);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async dh(sk, pk) {
        await this._setup();
        try {
            const bits = await this._api.deriveBits({
                name: ALG_NAME,
                public: pk,
            }, sk, this._nDh * 8);
            return bits;
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async _importRawKey(key, isPublic) {
        if (isPublic && key.byteLength !== this._nPk) {
            throw new Error("Invalid public key for the ciphersuite");
        }
        if (!isPublic && key.byteLength !== this._nSk) {
            throw new Error("Invalid private key for the ciphersuite");
        }
        if (isPublic) {
            return await this._api.importKey("raw", key, this._alg, true, []);
        }
        return await this._deserializePkcs8Key(new Uint8Array(key));
    }
    async _importJWK(key, isPublic) {
        if (typeof key.kty === "undefined" || key.kty !== "OKP") {
            throw new Error(`Invalid kty: ${key.crv}`);
        }
        if (typeof key.crv === "undefined" || key.crv !== ALG_NAME) {
            throw new Error(`Invalid crv: ${key.crv}`);
        }
        if (isPublic) {
            if (typeof key.d !== "undefined") {
                throw new Error("Invalid key: `d` should not be set");
            }
            return await this._api.importKey("jwk", key, this._alg, true, []);
        }
        if (typeof key.d === "undefined") {
            throw new Error("Invalid key: `d` not found");
        }
        return await this._api.importKey("jwk", key, this._alg, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
    }
    async _deserializePkcs8Key(k) {
        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);
        pkcs8Key.set(this._pkcs8AlgId, 0);
        pkcs8Key.set(k, this._pkcs8AlgId.length);
        return await this._api.importKey("pkcs8", pkcs8Key, this._alg, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x448.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x448.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X448: () => (/* binding */ X448)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

const ALG_NAME = "X448";
// deno-fmt-ignore
const PKCS8_ALG_ID_X448 = new Uint8Array([
    0x30, 0x46, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06,
    0x03, 0x2b, 0x65, 0x6f, 0x04, 0x3a, 0x04, 0x38,
]);
class X448 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NativeAlgorithm {
    constructor(hkdf) {
        super();
        Object.defineProperty(this, "_hkdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_alg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nPk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nSk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nDh", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pkcs8AlgId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._alg = { name: ALG_NAME };
        this._hkdf = hkdf;
        this._nPk = 56;
        this._nSk = 56;
        this._nDh = 56;
        this._pkcs8AlgId = PKCS8_ALG_ID_X448;
    }
    async serializePublicKey(key) {
        await this._setup();
        try {
            return await this._api.exportKey("raw", key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, true);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            if (!("d" in jwk)) {
                throw new Error("Not private key");
            }
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(jwk["d"]).buffer;
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        await this._setup();
        try {
            return await this._importRawKey(key, false);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async importKey(format, key, isPublic) {
        await this._setup();
        try {
            if (format === "raw") {
                return await this._importRawKey(key, isPublic);
            }
            // jwk
            if (key instanceof ArrayBuffer) {
                throw new Error("Invalid jwk key format");
            }
            return await this._importJWK(key, isPublic);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        await this._setup();
        try {
            return await this._api.generateKey(ALG_NAME, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError(e);
        }
    }
    async deriveKeyPair(ikm) {
        await this._setup();
        try {
            const dkpPrk = await this._hkdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_DKP_PRK, new Uint8Array(ikm));
            const rawSk = await this._hkdf.labeledExpand(dkpPrk, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_SK, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY, this._nSk);
            const rawSkBytes = new Uint8Array(rawSk);
            const sk = await this._deserializePkcs8Key(rawSkBytes);
            rawSkBytes.fill(0);
            return {
                privateKey: sk,
                publicKey: await this.derivePublicKey(sk),
            };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError(e);
        }
    }
    async derivePublicKey(key) {
        await this._setup();
        try {
            const jwk = await this._api.exportKey("jwk", key);
            delete jwk["d"];
            delete jwk["key_ops"];
            return await this._api.importKey("jwk", jwk, this._alg, true, []);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async dh(sk, pk) {
        await this._setup();
        try {
            const bits = await this._api.deriveBits({
                name: ALG_NAME,
                public: pk,
            }, sk, this._nDh * 8);
            return bits;
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async _importRawKey(key, isPublic) {
        if (isPublic && key.byteLength !== this._nPk) {
            throw new Error("Invalid public key for the ciphersuite");
        }
        if (!isPublic && key.byteLength !== this._nSk) {
            throw new Error("Invalid private key for the ciphersuite");
        }
        if (isPublic) {
            return await this._api.importKey("raw", key, this._alg, true, []);
        }
        return await this._deserializePkcs8Key(new Uint8Array(key));
    }
    async _importJWK(key, isPublic) {
        if (typeof key.kty === "undefined" || key.kty !== "OKP") {
            throw new Error(`Invalid kty: ${key.crv}`);
        }
        if (typeof key.crv === "undefined" || key.crv !== ALG_NAME) {
            throw new Error(`Invalid crv: ${key.crv}`);
        }
        if (isPublic) {
            if (typeof key.d !== "undefined") {
                throw new Error("Invalid key: `d` should not be set");
            }
            return await this._api.importKey("jwk", key, this._alg, true, []);
        }
        if (typeof key.d === "undefined") {
            throw new Error("Invalid key: `d` not found");
        }
        return await this._api.importKey("jwk", key, this._alg, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
    }
    async _deserializePkcs8Key(k) {
        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);
        pkcs8Key.set(this._pkcs8AlgId, 0);
        pkcs8Key.set(k, this._pkcs8AlgId.length);
        return await this._api.importKey("pkcs8", pkcs8Key, this._alg, true, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/kems/dhkemX25519.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/kems/dhkemX25519.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX25519HkdfSha256: () => (/* binding */ DhkemX25519HkdfSha256)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _dhkemPrimitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dhkemPrimitives/x25519.js */ "./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x25519.js");


/**
 * The DHKEM(X25519, HKDF-SHA256) for HPKE KEM implementing {@link KemInterface}.
 *
 * The instance of this class can be specified to the
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   HkdfSha256,
 *   DhkemX25519HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX25519HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class DhkemX25519HkdfSha256 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha256Native();
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX25519HkdfSha256, new _dhkemPrimitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__.X25519(kdf), kdf);
        /** KemId.DhkemX25519HkdfSha256 (0x0020) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX25519HkdfSha256
        });
        /** 32 */
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/kems/dhkemX448.js":
/*!***********************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/kems/dhkemX448.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX448HkdfSha512: () => (/* binding */ DhkemX448HkdfSha512)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _dhkemPrimitives_x448_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dhkemPrimitives/x448.js */ "./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x448.js");


/**
 * The DHKEM(X448, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.
 *
 * The instance of this class can be specified to the
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   HkdfSha512,
 *   DhkemX448HkdfSha512,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX448HkdfSha512(),
 *   kdf: new HkdfSha512(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
class DhkemX448HkdfSha512 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha512Native();
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX448HkdfSha512, new _dhkemPrimitives_x448_js__WEBPACK_IMPORTED_MODULE_1__.X448(kdf), kdf);
        /** KemId.DhkemX448HkdfSha512 (0x0021) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX448HkdfSha512
        });
        /** 64 */
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
        /** 56 */
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
        /** 56 */
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
        /** 56 */
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/native.js":
/*!***************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/native.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CipherSuite: () => (/* binding */ CipherSuite),
/* harmony export */   DhkemP256HkdfSha256: () => (/* binding */ DhkemP256HkdfSha256),
/* harmony export */   DhkemP384HkdfSha384: () => (/* binding */ DhkemP384HkdfSha384),
/* harmony export */   DhkemP521HkdfSha512: () => (/* binding */ DhkemP521HkdfSha512),
/* harmony export */   HkdfSha256: () => (/* binding */ HkdfSha256),
/* harmony export */   HkdfSha384: () => (/* binding */ HkdfSha384),
/* harmony export */   HkdfSha512: () => (/* binding */ HkdfSha512)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _cipherSuiteNative_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cipherSuiteNative.js */ "./node_modules/@hpke/core/esm/src/cipherSuiteNative.js");
/* harmony import */ var _kems_dhkemNative_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kems/dhkemNative.js */ "./node_modules/@hpke/core/esm/src/kems/dhkemNative.js");



/**
 * The Hybrid Public Key Encryption (HPKE) ciphersuite,
 * which is implemented using only
 * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.
 *
 * This class is the same as
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteNative | @hpke/core#CipherSuiteNative} as follows:
 * which supports only the ciphersuites that can be implemented on the native
 * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.
 * Therefore, the following cryptographic algorithms are not supported for now:
 * - `DHKEM(X25519, HKDF-SHA256)`
 * - `DHKEM(X448, HKDF-SHA512)`
 * - `ChaCha20Poly1305`
 *
 * In addtion, the HKDF functions contained in this `CipherSuiteNative`
 * class can only derive keys of the same length as the `hashSize`.
 *
 * If you want to use the unsupported cryptographic algorithms
 * above or derive keys longer than the `hashSize`,
 * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.
 *
 * This class provides following functions:
 *
 * - Creates encryption contexts both for senders and recipients.
 *     - {@link createSenderContext}
 *     - {@link createRecipientContext}
 * - Provides single-shot encryption API.
 *     - {@link seal}
 *     - {@link open}
 *
 * The calling of the constructor of this class is the starting
 * point for HPKE operations for both senders and recipients.
 *
 * @example Use only ciphersuites supported by Web Cryptography API.
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 *   CipherSuite,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 *
 * @example Use a ciphersuite which is currently not supported by Web Cryptography API.
 *
 * ```ts
 * import { Aes128Gcm, HkdfSha256, CipherSuite } from "@hpke/core";
 * import { DhkemX25519HkdfSha256 } from "@hpke/dhkem-x25519";
 * const suite = new CipherSuite({
 *   kem: new DhkemX25519HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class CipherSuite extends _cipherSuiteNative_js__WEBPACK_IMPORTED_MODULE_1__.CipherSuiteNative {
}
/**
 * The DHKEM(P-256, HKDF-SHA256) for HPKE KEM implementing {@link KemInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP256HkdfSha256`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class DhkemP256HkdfSha256 extends _kems_dhkemNative_js__WEBPACK_IMPORTED_MODULE_2__.DhkemP256HkdfSha256Native {
}
/**
 * The DHKEM(P-384, HKDF-SHA384) for HPKE KEM implementing {@link KemInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP384HkdfSha384`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   DhkemP384HkdfSha384,
 *   HkdfSha384,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP384HkdfSha384(),
 *   kdf: new HkdfSha384(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class DhkemP384HkdfSha384 extends _kems_dhkemNative_js__WEBPACK_IMPORTED_MODULE_2__.DhkemP384HkdfSha384Native {
}
/**
 * The DHKEM(P-521, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP521HkdfSha512`
 * as follows:
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   DhkemP521HkdfSha512,
 *   HkdfSha512,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP521HkdfSha512(),
 *   kdf: new HkdfSha512(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
class DhkemP521HkdfSha512 extends _kems_dhkemNative_js__WEBPACK_IMPORTED_MODULE_2__.DhkemP521HkdfSha512Native {
}
/**
 * The HKDF-SHA256 for HPKE KDF implementing {@link KdfInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha256`.
 *
 * The KDF class can only derive keys of the same length as the `hashSize`.
 * If you want to derive keys longer than the `hashSize`,
 * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   DhkemP256HkdfSha256,
 *   HkdfSha256,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP256HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class HkdfSha256 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha256Native {
}
/**
 * The HKDF-SHA384 for HPKE KDF implementing {@link KdfInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha384`.
 *
 * The KDF class can only derive keys of the same length as the `hashSize`.
 * If you want to derive keys longer than the `hashSize`,
 * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   DhkemP384HkdfSha384,
 *   HkdfSha384,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP384HkdfSha384(),
 *   kdf: new HkdfSha384(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class HkdfSha384 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha384Native {
}
/**
 * The HKDF-SHA512 for HPKE KDF implementing {@link KdfInterface}.
 *
 * When using `@hpke/core`, the instance of this class must be specified
 * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha512`.
 *
 * The KDF class can only derive keys of the same length as the `hashSize`.
 * If you want to derive keys longer than the `hashSize`,
 * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.
 *
 * @example
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   DhkemP521HkdfSha512,
 *   HkdfSha512,
 * } from "@hpke/core";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemP521HkdfSha512(),
 *   kdf: new HkdfSha512(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
class HkdfSha512 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha512Native {
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/recipientContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/recipientContext.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RecipientContextImpl: () => (/* binding */ RecipientContextImpl)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _encryptionContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryptionContext.js */ "./node_modules/@hpke/core/esm/src/encryptionContext.js");


class RecipientContextImpl extends _encryptionContext_js__WEBPACK_IMPORTED_MODULE_1__.EncryptionContextImpl {
    async open(data, aad = _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer) {
        let pt;
        try {
            pt = await this._ctx.key.open(this.computeNonce(this._ctx), data, aad);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.OpenError(e);
        }
        this.incrementSeq(this._ctx);
        return pt;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/senderContext.js":
/*!**********************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/senderContext.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SenderContextImpl: () => (/* binding */ SenderContextImpl)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _encryptionContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryptionContext.js */ "./node_modules/@hpke/core/esm/src/encryptionContext.js");


class SenderContextImpl extends _encryptionContext_js__WEBPACK_IMPORTED_MODULE_1__.EncryptionContextImpl {
    constructor(api, kdf, params, enc) {
        super(api, kdf, params);
        Object.defineProperty(this, "enc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.enc = enc;
    }
    async seal(data, aad = _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer) {
        let ct;
        try {
            ct = await this._ctx.key.seal(this.computeNonce(this._ctx), data, aad);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SealError(e);
        }
        this.incrementSeq(this._ctx);
        return ct;
    }
}


/***/ }),

/***/ "./node_modules/@hpke/core/esm/src/utils/emitNotSupported.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@hpke/core/esm/src/utils/emitNotSupported.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   emitNotSupported: () => (/* binding */ emitNotSupported)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

function emitNotSupported() {
    return new Promise((_resolve, reject) => {
        reject(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError("Not supported"));
    });
}


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x25519/esm/mod.js":
/*!****************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x25519/esm/mod.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX25519HkdfSha256: () => (/* reexport safe */ _src_dhkemX25519_js__WEBPACK_IMPORTED_MODULE_0__.DhkemX25519HkdfSha256),
/* harmony export */   HkdfSha256: () => (/* reexport safe */ _src_hkdfSha256_js__WEBPACK_IMPORTED_MODULE_1__.HkdfSha256),
/* harmony export */   X25519: () => (/* reexport safe */ _src_dhkemX25519_js__WEBPACK_IMPORTED_MODULE_0__.X25519)
/* harmony export */ });
/* harmony import */ var _src_dhkemX25519_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/dhkemX25519.js */ "./node_modules/@hpke/dhkem-x25519/esm/src/dhkemX25519.js");
/* harmony import */ var _src_hkdfSha256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/hkdfSha256.js */ "./node_modules/@hpke/dhkem-x25519/esm/src/hkdfSha256.js");




/***/ }),

/***/ "./node_modules/@hpke/dhkem-x25519/esm/src/dhkemX25519.js":
/*!****************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x25519/esm/src/dhkemX25519.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX25519HkdfSha256: () => (/* binding */ DhkemX25519HkdfSha256),
/* harmony export */   X25519: () => (/* binding */ X25519)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _primitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./primitives/x25519.js */ "./node_modules/@hpke/dhkem-x25519/esm/src/primitives/x25519.js");
/* harmony import */ var _hkdfSha256_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hkdfSha256.js */ "./node_modules/@hpke/dhkem-x25519/esm/src/hkdfSha256.js");



const ALG_NAME = "X25519";
class X25519 {
    constructor(hkdf) {
        Object.defineProperty(this, "_hkdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nPk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nSk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._hkdf = hkdf;
        this._nPk = 32;
        this._nSk = 32;
    }
    async serializePublicKey(key) {
        try {
            return await this._serializePublicKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        try {
            return await this._importRawKey(key, true);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        try {
            return await this._serializePrivateKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        try {
            return await this._importRawKey(key, false);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async importKey(format, key, isPublic) {
        try {
            if (format === "raw") {
                return await this._importRawKey(key, isPublic);
            }
            // jwk
            if (key instanceof ArrayBuffer) {
                throw new Error("Invalid jwk key format");
            }
            return await this._importJWK(key, isPublic);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        try {
            const rawSk = await _primitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__.x25519.utils.randomSecretKey();
            const sk = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, rawSk, "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
            const pk = await this.derivePublicKey(sk);
            return { publicKey: pk, privateKey: sk };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError(e);
        }
    }
    async deriveKeyPair(ikm) {
        try {
            const dkpPrk = await this._hkdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_DKP_PRK, new Uint8Array(ikm));
            const rawSk = await this._hkdf.labeledExpand(dkpPrk, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_SK, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY, this._nSk);
            const sk = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, new Uint8Array(rawSk), "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
            return {
                privateKey: sk,
                publicKey: await this.derivePublicKey(sk),
            };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError(e);
        }
    }
    async derivePublicKey(key) {
        try {
            return await this._derivePublicKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async dh(sk, pk) {
        try {
            return await this._dh(sk, pk);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async derive(sk, pk) {
        try {
            return await this._derive(sk, pk);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    _serializePublicKey(k) {
        return new Promise((resolve) => {
            resolve(k.key.buffer);
        });
    }
    _serializePrivateKey(k) {
        return new Promise((resolve) => {
            resolve(k.key.buffer);
        });
    }
    _importRawKey(key, isPublic) {
        return new Promise((resolve, reject) => {
            if (isPublic && key.byteLength !== this._nPk) {
                reject(new Error("Invalid length of the key"));
            }
            if (!isPublic && key.byteLength !== this._nSk) {
                reject(new Error("Invalid length of the key"));
            }
            resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, new Uint8Array(key), isPublic ? "public" : "private", isPublic ? [] : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES));
        });
    }
    _importJWK(key, isPublic) {
        return new Promise((resolve, reject) => {
            if (typeof key.kty === "undefined" || key.kty !== "OKP") {
                reject(new Error(`Invalid kty: ${key.kty}`));
            }
            if (typeof key.crv === "undefined" || key.crv !== "X25519") {
                reject(new Error(`Invalid crv: ${key.crv}`));
            }
            if (isPublic) {
                if (typeof key.d !== "undefined") {
                    reject(new Error("Invalid key: `d` should not be set"));
                }
                if (typeof key.x === "undefined") {
                    reject(new Error("Invalid key: `x` not found"));
                }
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(key.x), "public"));
            }
            else {
                if (typeof key.d !== "string") {
                    reject(new Error("Invalid key: `d` not found"));
                }
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(key.d), "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES));
            }
        });
    }
    _derivePublicKey(k) {
        return new Promise((resolve, reject) => {
            try {
                const pk = _primitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__.x25519.getPublicKey(k.key);
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, pk, "public"));
            }
            catch (e) {
                reject(e);
            }
        });
    }
    _dh(sk, pk) {
        return new Promise((resolve, reject) => {
            try {
                resolve(_primitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__.x25519.getSharedSecret(sk.key, pk.key).buffer);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    _derive(sk, pk) {
        return new Promise((resolve, reject) => {
            try {
                resolve(_primitives_x25519_js__WEBPACK_IMPORTED_MODULE_1__.x25519.getSharedSecret(sk, pk));
            }
            catch (e) {
                reject(e);
            }
        });
    }
}
/**
 * The DHKEM(X25519, HKDF-SHA256) for HPKE KEM implementing {@link KemInterface}.
 *
 * This class is implemented using
 * {@link https://github.com/paulmillr/noble-curves | @noble/curves}.
 *
 * The instance of this class can be specified to the
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:
 *
 * @example Use with `@hpke/core`:
 *
 * ```ts
 * import {
 *   Aes128Gcm,
 *   CipherSuite,
 *   HkdfSha256,
 * } from "@hpke/core";
 * import { DhkemX25519HkdfSha256 } from "@hpke/dhkem-x25519";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX25519HkdfSha256(),
 *   kdf: new HkdfSha256(),
 *   aead: new Aes128Gcm(),
 * });
 * ```
 */
class DhkemX25519HkdfSha256 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hkdfSha256_js__WEBPACK_IMPORTED_MODULE_2__.HkdfSha256();
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX25519HkdfSha256, new X25519(kdf), kdf);
        /** KemId.DhkemX25519HkdfSha256 (0x0020) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX25519HkdfSha256
        });
        /** 32 */
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        /** 32 */
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x25519/esm/src/hkdfSha256.js":
/*!***************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x25519/esm/src/hkdfSha256.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HkdfSha256: () => (/* binding */ HkdfSha256)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

class HkdfSha256 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha256Native {
    async extract(salt, ikm) {
        await this._setup();
        if (salt.byteLength === 0) {
            salt = new ArrayBuffer(this.hashSize);
        }
        if (salt.byteLength !== this.hashSize) {
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.hmac)(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.sha256, new Uint8Array(salt), new Uint8Array(ikm))
                .buffer;
        }
        const key = await this._api.importKey("raw", salt, this.algHash, false, [
            "sign",
        ]);
        return await this._api.sign("HMAC", key, ikm);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x25519/esm/src/primitives/x25519.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x25519/esm/src/primitives/x25519.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x25519: () => (/* binding */ x25519)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/ed25519.ts
 */
/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */

const _1n = BigInt(1);
const _2n = BigInt(2);
const _3n = BigInt(3);
const _5n = BigInt(5);
// P = 2n**255n - 19n
const ed25519_CURVE_p = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed");
function ed25519_pow_2_252_3(x) {
    const _10n = BigInt(10);
    const _20n = BigInt(20);
    const _40n = BigInt(40);
    const _80n = BigInt(80);
    const P = ed25519_CURVE_p;
    const x2 = (x * x) % P;
    const b2 = (x2 * x) % P; // x^3, 11
    const b4 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b2, _2n, P) * b2) % P; // x^15, 1111
    const b5 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b4, _1n, P) * x) % P; // x^31
    const b10 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b5, _5n, P) * b5) % P;
    const b20 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b10, _10n, P) * b10) % P;
    const b40 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b20, _20n, P) * b20) % P;
    const b80 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b40, _40n, P) * b40) % P;
    const b160 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b80, _80n, P) * b80) % P;
    const b240 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b160, _80n, P) * b80) % P;
    const b250 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b240, _10n, P) * b10) % P;
    const pow_p_5_8 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b250, _2n, P) * x) % P;
    // ^ To pow to (p+3)/8, multiply it by x.
    return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes) {
    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
    // set the three least significant bits of the first byte
    bytes[0] &= 248; // 0b1111_1000
    // and the most significant bit of the last to zero,
    bytes[31] &= 127; // 0b0111_1111
    // set the second most significant bit of the last byte to 1
    bytes[31] |= 64; // 0b0100_0000
    return bytes;
}
const x25519 = /* @__PURE__ */ (() => {
    const P = ed25519_CURVE_p;
    return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.montgomery)({
        P,
        type: "x25519",
        powPminus2: (x) => {
            // x^(p-2) aka x^(2^255-21)
            const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.mod)((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(pow_p_5_8, _3n, P) * b2, P);
        },
        adjustScalarBytes,
    });
})();


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x448/esm/mod.js":
/*!**************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x448/esm/mod.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX448HkdfSha512: () => (/* reexport safe */ _src_dhkemX448_js__WEBPACK_IMPORTED_MODULE_0__.DhkemX448HkdfSha512),
/* harmony export */   HkdfSha512: () => (/* reexport safe */ _src_hkdfSha512_js__WEBPACK_IMPORTED_MODULE_1__.HkdfSha512),
/* harmony export */   X448: () => (/* reexport safe */ _src_dhkemX448_js__WEBPACK_IMPORTED_MODULE_0__.X448)
/* harmony export */ });
/* harmony import */ var _src_dhkemX448_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/dhkemX448.js */ "./node_modules/@hpke/dhkem-x448/esm/src/dhkemX448.js");
/* harmony import */ var _src_hkdfSha512_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/hkdfSha512.js */ "./node_modules/@hpke/dhkem-x448/esm/src/hkdfSha512.js");




/***/ }),

/***/ "./node_modules/@hpke/dhkem-x448/esm/src/dhkemX448.js":
/*!************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x448/esm/src/dhkemX448.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemX448HkdfSha512: () => (/* binding */ DhkemX448HkdfSha512),
/* harmony export */   X448: () => (/* binding */ X448)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _primitives_x448_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./primitives/x448.js */ "./node_modules/@hpke/dhkem-x448/esm/src/primitives/x448.js");
/* harmony import */ var _hkdfSha512_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hkdfSha512.js */ "./node_modules/@hpke/dhkem-x448/esm/src/hkdfSha512.js");



const ALG_NAME = "X448";
class X448 {
    constructor(hkdf) {
        Object.defineProperty(this, "_hkdf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nPk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nSk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._hkdf = hkdf;
        this._nPk = 56;
        this._nSk = 56;
    }
    async serializePublicKey(key) {
        try {
            return await this._serializePublicKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePublicKey(key) {
        try {
            return await this._importRawKey(key, true);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async serializePrivateKey(key) {
        try {
            return await this._serializePrivateKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    async deserializePrivateKey(key) {
        try {
            return await this._importRawKey(key, false);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async importKey(format, key, isPublic) {
        try {
            if (format === "raw") {
                return await this._importRawKey(key, isPublic);
            }
            // jwk
            if (key instanceof ArrayBuffer) {
                throw new Error("Invalid jwk key format");
            }
            return await this._importJWK(key, isPublic);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async generateKeyPair() {
        try {
            const rawSk = await _primitives_x448_js__WEBPACK_IMPORTED_MODULE_1__.x448.utils.randomSecretKey();
            const sk = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, rawSk, "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
            const pk = await this.derivePublicKey(sk);
            return { publicKey: pk, privateKey: sk };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError(e);
        }
    }
    async deriveKeyPair(ikm) {
        try {
            const dkpPrk = await this._hkdf.labeledExtract(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY.buffer, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_DKP_PRK, new Uint8Array(ikm));
            const rawSk = await this._hkdf.labeledExpand(dkpPrk, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.LABEL_SK, _hpke_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY, this._nSk);
            const sk = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, new Uint8Array(rawSk), "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES);
            return {
                privateKey: sk,
                publicKey: await this.derivePublicKey(sk),
            };
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError(e);
        }
    }
    async derivePublicKey(key) {
        try {
            return await this._derivePublicKey(key);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.DeserializeError(e);
        }
    }
    async dh(sk, pk) {
        try {
            return await this._dh(sk, pk);
        }
        catch (e) {
            throw new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.SerializeError(e);
        }
    }
    _serializePublicKey(k) {
        return new Promise((resolve) => {
            resolve(k.key.buffer);
        });
    }
    _serializePrivateKey(k) {
        return new Promise((resolve) => {
            resolve(k.key.buffer);
        });
    }
    _importRawKey(key, isPublic) {
        return new Promise((resolve, reject) => {
            if (isPublic && key.byteLength !== this._nPk) {
                reject(new Error("Invalid length of the key"));
            }
            if (!isPublic && (key.byteLength !== this._nSk)) {
                reject(new Error("Invalid length of the key"));
            }
            resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, new Uint8Array(key), isPublic ? "public" : "private", isPublic ? [] : _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES));
        });
    }
    _importJWK(key, isPublic) {
        return new Promise((resolve, reject) => {
            if (key.kty !== "OKP") {
                reject(new Error(`Invalid kty: ${key.kty}`));
            }
            if (key.crv !== "X448") {
                reject(new Error(`Invalid crv: ${key.crv}`));
            }
            if (isPublic) {
                if (typeof key.d !== "undefined") {
                    reject(new Error("Invalid key: `d` should not be set"));
                }
                if (typeof key.x !== "string") {
                    reject(new Error("Invalid key: `x` not found"));
                }
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(key.x), "public"));
            }
            else {
                if (typeof key.d !== "string") {
                    reject(new Error("Invalid key: `d` not found"));
                }
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.base64UrlToBytes)(key.d), "private", _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KEM_USAGES));
            }
        });
    }
    _derivePublicKey(k) {
        return new Promise((resolve, reject) => {
            try {
                const pk = _primitives_x448_js__WEBPACK_IMPORTED_MODULE_1__.x448.getPublicKey(k.key);
                resolve(new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.XCryptoKey(ALG_NAME, pk, "public"));
            }
            catch (e) {
                reject(e);
            }
        });
    }
    _dh(sk, pk) {
        return new Promise((resolve, reject) => {
            try {
                resolve(_primitives_x448_js__WEBPACK_IMPORTED_MODULE_1__.x448.getSharedSecret(sk.key, pk.key).buffer);
            }
            catch (e) {
                reject(e);
            }
        });
    }
}
/**
 * The DHKEM(X448, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.
 *
 * This class is implemented using
 * {@link https://github.com/paulmillr/noble-curves | @noble/curves}.
 *
 * The instance of this class can be specified to the
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:
 *
 * @example Use with `@hpke/core`:
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   HkdfSha512,
 * } from "@hpke/core";
 * import { DhkemX448HkdfSha512 } from "@hpke/dhkem-x448";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX448HkdfSha512(),
 *   kdf: new HkdfSha512(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
class DhkemX448HkdfSha512 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hkdfSha512_js__WEBPACK_IMPORTED_MODULE_2__.HkdfSha512();
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX448HkdfSha512, new X448(kdf), kdf);
        /** KemId.DhkemX448HkdfSha512 (0x0021) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX448HkdfSha512
        });
        /** 64 */
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
        /** 56 */
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
        /** 56 */
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
        /** 56 */
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 56
        });
    }
}


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x448/esm/src/hkdfSha512.js":
/*!*************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x448/esm/src/hkdfSha512.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HkdfSha512: () => (/* binding */ HkdfSha512)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

class HkdfSha512 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha512Native {
    async extract(salt, ikm) {
        await this._setup();
        if (salt.byteLength === 0) {
            salt = new ArrayBuffer(this.hashSize);
        }
        if (salt.byteLength !== this.hashSize) {
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.hmac)(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.sha512, new Uint8Array(salt), new Uint8Array(ikm))
                .buffer;
        }
        const key = await this._api.importKey("raw", salt, this.algHash, false, [
            "sign",
        ]);
        return await this._api.sign("HMAC", key, ikm);
    }
}


/***/ }),

/***/ "./node_modules/@hpke/dhkem-x448/esm/src/primitives/x448.js":
/*!******************************************************************!*\
  !*** ./node_modules/@hpke/dhkem-x448/esm/src/primitives/x448.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x448: () => (/* binding */ x448)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/**
 * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).
 *
 * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)
 *
 * The original file is located at:
 * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/ed448.ts
 */
/**
 * Edwards448 (not Ed448-Goldilocks) curve with following addons:
 * - X448 ECDH
 * - Decaf cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 * Conforms to RFC 8032 https://www.rfc-editor.org/rfc/rfc8032.html#section-5.2
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */

// edwards448 curve
// a = 1n
// d = Fp.neg(39081n)
// Finite field 2n**448n - 2n**224n - 1n
// Subgroup order
// 2n**446n - 13818066809895115352007386748515426880336692474882178609894547503885n
const ed448_CURVE_p = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const _1n = BigInt(1);
const _2n = BigInt(2);
const _3n = BigInt(3);
const _11n = BigInt(11);
const _22n = BigInt(22);
const _44n = BigInt(44);
const _88n = BigInt(88);
const _223n = BigInt(223);
// powPminus3div4 calculates z = x^k mod p, where k = (p-3)/4.
// Used for efficient square root calculation.
// ((P-3)/4).toString(2) would produce bits [223x 1, 0, 222x 1]
function ed448_pow_Pminus3div4(x) {
    const P = ed448_CURVE_p;
    const b2 = (x * x * x) % P;
    const b3 = (b2 * b2 * x) % P;
    const b6 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;
    const b9 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;
    const b11 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;
    const b22 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;
    const b44 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;
    const b88 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;
    const b176 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;
    const b220 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;
    const b222 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _2n, P) * b2) % P;
    const b223 = ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b222, _1n, P) * x) % P;
    return ((0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _223n, P) * b222) % P;
}
function adjustScalarBytes(bytes) {
    // Section 5: Likewise, for X448, set the two least significant bits of the first byte to 0,
    bytes[0] &= 252; // 0b11111100
    // and the most significant bit of the last byte to 1.
    bytes[55] |= 128; // 0b10000000
    // NOTE: is NOOP for 56 bytes scalars (X25519/X448)
    bytes[56] = 0; // Byte outside of group (456 buts vs 448 bits)
    return bytes;
}
const x448 = /* @__PURE__ */ (() => {
    const P = ed448_CURVE_p;
    return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.montgomery)({
        P,
        type: "x448",
        powPminus2: (x) => {
            const Pminus3div4 = ed448_pow_Pminus3div4(x);
            const Pminus3 = (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.pow2)(Pminus3div4, _2n, P);
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.mod)(Pminus3 * x, P); // Pminus3 * x = Pminus2
        },
        adjustScalarBytes,
    });
})();


/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/_polyval.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/_polyval.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _toGHASHKey: () => (/* binding */ _toGHASHKey),
/* harmony export */   ghash: () => (/* binding */ ghash),
/* harmony export */   polyval: () => (/* binding */ polyval)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/ciphers/esm/utils.js");
/**
 * GHash from AES-GCM and its little-endian "mirror image" Polyval from AES-SIV.
 *
 * Implemented in terms of GHash with conversion function for keys
 * GCM GHASH from
 * [NIST SP800-38d](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf),
 * SIV from
 * [RFC 8452](https://datatracker.ietf.org/doc/html/rfc8452).
 *
 * GHASH   modulo: x^128 + x^7   + x^2   + x     + 1
 * POLYVAL modulo: x^128 + x^127 + x^126 + x^121 + 1
 *
 * @module
 */
// prettier-ignore

const BLOCK_SIZE = 16;
// TODO: rewrite
// temporary padding buffer
const ZEROS16 = /* @__PURE__ */ new Uint8Array(16);
const ZEROS32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ZEROS16);
const POLY = 0xe1; // v = 2*v % POLY
// v = 2*v % POLY
// NOTE: because x + x = 0 (add/sub is same), mul2(x) != x+x
// We can multiply any number using montgomery ladder and this function (works as double, add is simple xor)
const mul2 = (s0, s1, s2, s3) => {
    const hiBit = s3 & 1;
    return {
        s3: (s2 << 31) | (s3 >>> 1),
        s2: (s1 << 31) | (s2 >>> 1),
        s1: (s0 << 31) | (s1 >>> 1),
        s0: (s0 >>> 1) ^ ((POLY << 24) & -(hiBit & 1)), // reduce % poly
    };
};
const swapLE = (n) => (((n >>> 0) & 0xff) << 24) |
    (((n >>> 8) & 0xff) << 16) |
    (((n >>> 16) & 0xff) << 8) |
    ((n >>> 24) & 0xff) |
    0;
/**
 * `mulX_POLYVAL(ByteReverse(H))` from spec
 * @param k mutated in place
 */
function _toGHASHKey(k) {
    k.reverse();
    const hiBit = k[15] & 1;
    // k >>= 1
    let carry = 0;
    for (let i = 0; i < k.length; i++) {
        const t = k[i];
        k[i] = (t >>> 1) | carry;
        carry = (t & 1) << 7;
    }
    k[0] ^= -hiBit & 0xe1; // if (hiBit) n ^= 0xe1000000000000000000000000000000;
    return k;
}
const estimateWindow = (bytes) => {
    if (bytes > 64 * 1024)
        return 8;
    if (bytes > 1024)
        return 4;
    return 2;
};
class GHASH {
    // We select bits per window adaptively based on expectedLength
    constructor(key, expectedLength) {
        this.blockLen = BLOCK_SIZE;
        this.outputLen = BLOCK_SIZE;
        this.s0 = 0;
        this.s1 = 0;
        this.s2 = 0;
        this.s3 = 0;
        this.finished = false;
        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(key);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, 16);
        const kView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(key);
        let k0 = kView.getUint32(0, false);
        let k1 = kView.getUint32(4, false);
        let k2 = kView.getUint32(8, false);
        let k3 = kView.getUint32(12, false);
        // generate table of doubled keys (half of montgomery ladder)
        const doubles = [];
        for (let i = 0; i < 128; i++) {
            doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });
            ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));
        }
        const W = estimateWindow(expectedLength || 1024);
        if (![1, 2, 4, 8].includes(W))
            throw new Error('ghash: invalid window size, expected 2, 4 or 8');
        this.W = W;
        const bits = 128; // always 128 bits;
        const windows = bits / W;
        const windowSize = (this.windowSize = 2 ** W);
        const items = [];
        // Create precompute table for window of W bits
        for (let w = 0; w < windows; w++) {
            // truth table: 00, 01, 10, 11
            for (let byte = 0; byte < windowSize; byte++) {
                // prettier-ignore
                let s0 = 0, s1 = 0, s2 = 0, s3 = 0;
                for (let j = 0; j < W; j++) {
                    const bit = (byte >>> (W - j - 1)) & 1;
                    if (!bit)
                        continue;
                    const { s0: d0, s1: d1, s2: d2, s3: d3 } = doubles[W * w + j];
                    (s0 ^= d0), (s1 ^= d1), (s2 ^= d2), (s3 ^= d3);
                }
                items.push({ s0, s1, s2, s3 });
            }
        }
        this.t = items;
    }
    _updateBlock(s0, s1, s2, s3) {
        (s0 ^= this.s0), (s1 ^= this.s1), (s2 ^= this.s2), (s3 ^= this.s3);
        const { W, t, windowSize } = this;
        // prettier-ignore
        let o0 = 0, o1 = 0, o2 = 0, o3 = 0;
        const mask = (1 << W) - 1; // 2**W will kill performance.
        let w = 0;
        for (const num of [s0, s1, s2, s3]) {
            for (let bytePos = 0; bytePos < 4; bytePos++) {
                const byte = (num >>> (8 * bytePos)) & 0xff;
                for (let bitPos = 8 / W - 1; bitPos >= 0; bitPos--) {
                    const bit = (byte >>> (W * bitPos)) & mask;
                    const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w * windowSize + bit];
                    (o0 ^= e0), (o1 ^= e1), (o2 ^= e2), (o3 ^= e3);
                    w += 1;
                }
            }
        }
        this.s0 = o0;
        this.s1 = o1;
        this.s2 = o2;
        this.s3 = o3;
    }
    update(data) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);
        const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(data);
        const blocks = Math.floor(data.length / BLOCK_SIZE);
        const left = data.length % BLOCK_SIZE;
        for (let i = 0; i < blocks; i++) {
            this._updateBlock(b32[i * 4 + 0], b32[i * 4 + 1], b32[i * 4 + 2], b32[i * 4 + 3]);
        }
        if (left) {
            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
            this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ZEROS32); // clean tmp buffer
        }
        return this;
    }
    destroy() {
        const { t } = this;
        // clean precompute table
        for (const elm of t) {
            (elm.s0 = 0), (elm.s1 = 0), (elm.s2 = 0), (elm.s3 = 0);
        }
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);
        this.finished = true;
        const { s0, s1, s2, s3 } = this;
        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);
        o32[0] = s0;
        o32[1] = s1;
        o32[2] = s2;
        o32[3] = s3;
        return out;
    }
    digest() {
        const res = new Uint8Array(BLOCK_SIZE);
        this.digestInto(res);
        this.destroy();
        return res;
    }
}
class Polyval extends GHASH {
    constructor(key, expectedLength) {
        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(key);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key);
        const ghKey = _toGHASHKey((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(key));
        super(ghKey, expectedLength);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ghKey);
    }
    update(data) {
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(data);
        const left = data.length % BLOCK_SIZE;
        const blocks = Math.floor(data.length / BLOCK_SIZE);
        for (let i = 0; i < blocks; i++) {
            this._updateBlock(swapLE(b32[i * 4 + 3]), swapLE(b32[i * 4 + 2]), swapLE(b32[i * 4 + 1]), swapLE(b32[i * 4 + 0]));
        }
        if (left) {
            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
            this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ZEROS32);
        }
        return this;
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);
        this.finished = true;
        // tmp ugly hack
        const { s0, s1, s2, s3 } = this;
        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);
        o32[0] = s0;
        o32[1] = s1;
        o32[2] = s2;
        o32[3] = s3;
        return out.reverse();
    }
}
function wrapConstructorWithKey(hashCons) {
    const hashC = (msg, key) => hashCons(key, msg.length).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(msg)).digest();
    const tmp = hashCons(new Uint8Array(16), 0);
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (key, expectedLength) => hashCons(key, expectedLength);
    return hashC;
}
/** GHash MAC for AES-GCM. */
const ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));
/** Polyval MAC for AES-SIV. */
const polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));
//# sourceMappingURL=_polyval.js.map

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/aes.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/aes.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   aeskw: () => (/* binding */ aeskw),
/* harmony export */   aeskwp: () => (/* binding */ aeskwp),
/* harmony export */   cbc: () => (/* binding */ cbc),
/* harmony export */   cfb: () => (/* binding */ cfb),
/* harmony export */   ctr: () => (/* binding */ ctr),
/* harmony export */   ecb: () => (/* binding */ ecb),
/* harmony export */   gcm: () => (/* binding */ gcm),
/* harmony export */   gcmsiv: () => (/* binding */ gcmsiv),
/* harmony export */   siv: () => (/* binding */ siv),
/* harmony export */   unsafe: () => (/* binding */ unsafe)
/* harmony export */ });
/* harmony import */ var _polyval_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_polyval.js */ "./node_modules/@noble/ciphers/esm/_polyval.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/ciphers/esm/utils.js");
/**
 * [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)
 * a.k.a. Advanced Encryption Standard
 * is a variant of Rijndael block cipher, standardized by NIST in 2001.
 * We provide the fastest available pure JS implementation.
 *
 * Data is split into 128-bit blocks. Encrypted in 10/12/14 rounds (128/192/256 bits). In every round:
 * 1. **S-box**, table substitution
 * 2. **Shift rows**, cyclic shift left of all rows of data array
 * 3. **Mix columns**, multiplying every column by fixed polynomial
 * 4. **Add round key**, round_key xor i-th column of array
 *
 * Check out [FIPS-197](https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf)
 * and [original proposal](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)
 * @module
 */

// prettier-ignore

const BLOCK_SIZE = 16;
const BLOCK_SIZE32 = 4;
const EMPTY_BLOCK = /* @__PURE__ */ new Uint8Array(BLOCK_SIZE);
const POLY = 0x11b; // 1 + x + x**3 + x**4 + x**8
// TODO: remove multiplication, binary ops only
function mul2(n) {
    return (n << 1) ^ (POLY & -(n >> 7));
}
function mul(a, b) {
    let res = 0;
    for (; b > 0; b >>= 1) {
        // Montgomery ladder
        res ^= a & -(b & 1); // if (b&1) res ^=a (but const-time).
        a = mul2(a); // a = 2*a
    }
    return res;
}
// AES S-box is generated using finite field inversion,
// an affine transform, and xor of a constant 0x63.
const sbox = /* @__PURE__ */ (() => {
    const t = new Uint8Array(256);
    for (let i = 0, x = 1; i < 256; i++, x ^= mul2(x))
        t[i] = x;
    const box = new Uint8Array(256);
    box[0] = 0x63; // first elm
    for (let i = 0; i < 255; i++) {
        let x = t[255 - i];
        x |= x << 8;
        box[t[i]] = (x ^ (x >> 4) ^ (x >> 5) ^ (x >> 6) ^ (x >> 7) ^ 0x63) & 0xff;
    }
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(t);
    return box;
})();
// Inverted S-box
const invSbox = /* @__PURE__ */ sbox.map((_, j) => sbox.indexOf(j));
// Rotate u32 by 8
const rotr32_8 = (n) => (n << 24) | (n >>> 8);
const rotl32_8 = (n) => (n << 8) | (n >>> 24);
// The byte swap operation for uint32 (LE<->BE)
const byteSwap = (word) => ((word << 24) & 0xff000000) |
    ((word << 8) & 0xff0000) |
    ((word >>> 8) & 0xff00) |
    ((word >>> 24) & 0xff);
// T-table is optimization suggested in 5.2 of original proposal (missed from FIPS-197). Changes:
// - LE instead of BE
// - bigger tables: T0 and T1 are merged into T01 table and T2 & T3 into T23;
//   so index is u16, instead of u8. This speeds up things, unexpectedly
function genTtable(sbox, fn) {
    if (sbox.length !== 256)
        throw new Error('Wrong sbox length');
    const T0 = new Uint32Array(256).map((_, j) => fn(sbox[j]));
    const T1 = T0.map(rotl32_8);
    const T2 = T1.map(rotl32_8);
    const T3 = T2.map(rotl32_8);
    const T01 = new Uint32Array(256 * 256);
    const T23 = new Uint32Array(256 * 256);
    const sbox2 = new Uint16Array(256 * 256);
    for (let i = 0; i < 256; i++) {
        for (let j = 0; j < 256; j++) {
            const idx = i * 256 + j;
            T01[idx] = T0[i] ^ T1[j];
            T23[idx] = T2[i] ^ T3[j];
            sbox2[idx] = (sbox[i] << 8) | sbox[j];
        }
    }
    return { sbox, sbox2, T0, T1, T2, T3, T01, T23 };
}
const tableEncoding = /* @__PURE__ */ genTtable(sbox, (s) => (mul(s, 3) << 24) | (s << 16) | (s << 8) | mul(s, 2));
const tableDecoding = /* @__PURE__ */ genTtable(invSbox, (s) => (mul(s, 11) << 24) | (mul(s, 13) << 16) | (mul(s, 9) << 8) | mul(s, 14));
const xPowers = /* @__PURE__ */ (() => {
    const p = new Uint8Array(16);
    for (let i = 0, x = 1; i < 16; i++, x = mul2(x))
        p[i] = x;
    return p;
})();
/** Key expansion used in CTR. */
function expandKeyLE(key) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(key);
    const len = key.length;
    if (![16, 24, 32].includes(len))
        throw new Error('aes: invalid key size, should be 16, 24 or 32, got ' + len);
    const { sbox2 } = tableEncoding;
    const toClean = [];
    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(key))
        toClean.push((key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(key)));
    const k32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(key);
    const Nk = k32.length;
    const subByte = (n) => applySbox(sbox2, n, n, n, n);
    const xk = new Uint32Array(len + 28); // expanded key
    xk.set(k32);
    // 4.3.1 Key expansion
    for (let i = Nk; i < xk.length; i++) {
        let t = xk[i - 1];
        if (i % Nk === 0)
            t = subByte(rotr32_8(t)) ^ xPowers[i / Nk - 1];
        else if (Nk > 6 && i % Nk === 4)
            t = subByte(t);
        xk[i] = xk[i - Nk] ^ t;
    }
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
    return xk;
}
function expandKeyDecLE(key) {
    const encKey = expandKeyLE(key);
    const xk = encKey.slice();
    const Nk = encKey.length;
    const { sbox2 } = tableEncoding;
    const { T0, T1, T2, T3 } = tableDecoding;
    // Inverse key by chunks of 4 (rounds)
    for (let i = 0; i < Nk; i += 4) {
        for (let j = 0; j < 4; j++)
            xk[i + j] = encKey[Nk - i - 4 + j];
    }
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(encKey);
    // apply InvMixColumn except first & last round
    for (let i = 4; i < Nk - 4; i++) {
        const x = xk[i];
        const w = applySbox(sbox2, x, x, x, x);
        xk[i] = T0[w & 0xff] ^ T1[(w >>> 8) & 0xff] ^ T2[(w >>> 16) & 0xff] ^ T3[w >>> 24];
    }
    return xk;
}
// Apply tables
function apply0123(T01, T23, s0, s1, s2, s3) {
    return (T01[((s0 << 8) & 0xff00) | ((s1 >>> 8) & 0xff)] ^
        T23[((s2 >>> 8) & 0xff00) | ((s3 >>> 24) & 0xff)]);
}
function applySbox(sbox2, s0, s1, s2, s3) {
    return (sbox2[(s0 & 0xff) | (s1 & 0xff00)] |
        (sbox2[((s2 >>> 16) & 0xff) | ((s3 >>> 16) & 0xff00)] << 16));
}
function encrypt(xk, s0, s1, s2, s3) {
    const { sbox2, T01, T23 } = tableEncoding;
    let k = 0;
    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);
    const rounds = xk.length / 4 - 2;
    for (let i = 0; i < rounds; i++) {
        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s1, s2, s3);
        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s2, s3, s0);
        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s3, s0, s1);
        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s0, s1, s2);
        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);
    }
    // last round (without mixcolumns, so using SBOX2 table)
    const t0 = xk[k++] ^ applySbox(sbox2, s0, s1, s2, s3);
    const t1 = xk[k++] ^ applySbox(sbox2, s1, s2, s3, s0);
    const t2 = xk[k++] ^ applySbox(sbox2, s2, s3, s0, s1);
    const t3 = xk[k++] ^ applySbox(sbox2, s3, s0, s1, s2);
    return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
// Can't be merged with encrypt: arg positions for apply0123 / applySbox are different
function decrypt(xk, s0, s1, s2, s3) {
    const { sbox2, T01, T23 } = tableDecoding;
    let k = 0;
    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);
    const rounds = xk.length / 4 - 2;
    for (let i = 0; i < rounds; i++) {
        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s3, s2, s1);
        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s0, s3, s2);
        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s1, s0, s3);
        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s2, s1, s0);
        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);
    }
    // Last round
    const t0 = xk[k++] ^ applySbox(sbox2, s0, s3, s2, s1);
    const t1 = xk[k++] ^ applySbox(sbox2, s1, s0, s3, s2);
    const t2 = xk[k++] ^ applySbox(sbox2, s2, s1, s0, s3);
    const t3 = xk[k++] ^ applySbox(sbox2, s3, s2, s1, s0);
    return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
// TODO: investigate merging with ctr32
function ctrCounter(xk, nonce, src, dst) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(nonce, BLOCK_SIZE);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(src);
    const srcLen = src.length;
    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(srcLen, dst);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.complexOverlapBytes)(src, dst);
    const ctr = nonce;
    const c32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(ctr);
    // Fill block (empty, ctr=0)
    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
    const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(src);
    const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
    // process blocks
    for (let i = 0; i + 4 <= src32.length; i += 4) {
        dst32[i + 0] = src32[i + 0] ^ s0;
        dst32[i + 1] = src32[i + 1] ^ s1;
        dst32[i + 2] = src32[i + 2] ^ s2;
        dst32[i + 3] = src32[i + 3] ^ s3;
        // Full 128 bit counter with wrap around
        let carry = 1;
        for (let i = ctr.length - 1; i >= 0; i--) {
            carry = (carry + (ctr[i] & 0xff)) | 0;
            ctr[i] = carry & 0xff;
            carry >>>= 8;
        }
        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
    }
    // leftovers (less than block)
    // It's possible to handle > u32 fast, but is it worth it?
    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
        const b32 = new Uint32Array([s0, s1, s2, s3]);
        const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u8)(b32);
        for (let i = start, pos = 0; i < srcLen; i++, pos++)
            dst[i] = src[i] ^ buf[pos];
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(b32);
    }
    return dst;
}
// AES CTR with overflowing 32 bit counter
// It's possible to do 32le significantly simpler (and probably faster) by using u32.
// But, we need both, and perf bottleneck is in ghash anyway.
function ctr32(xk, isLE, nonce, src, dst) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(nonce, BLOCK_SIZE);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(src);
    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(src.length, dst);
    const ctr = nonce; // write new value to nonce, so it can be re-used
    const c32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(ctr);
    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(ctr);
    const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(src);
    const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
    const ctrPos = isLE ? 0 : 12;
    const srcLen = src.length;
    // Fill block (empty, ctr=0)
    let ctrNum = view.getUint32(ctrPos, isLE); // read current counter value
    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
    // process blocks
    for (let i = 0; i + 4 <= src32.length; i += 4) {
        dst32[i + 0] = src32[i + 0] ^ s0;
        dst32[i + 1] = src32[i + 1] ^ s1;
        dst32[i + 2] = src32[i + 2] ^ s2;
        dst32[i + 3] = src32[i + 3] ^ s3;
        ctrNum = (ctrNum + 1) >>> 0; // u32 wrap
        view.setUint32(ctrPos, ctrNum, isLE);
        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
    }
    // leftovers (less than a block)
    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
        const b32 = new Uint32Array([s0, s1, s2, s3]);
        const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u8)(b32);
        for (let i = start, pos = 0; i < srcLen; i++, pos++)
            dst[i] = src[i] ^ buf[pos];
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(b32);
    }
    return dst;
}
/**
 * CTR: counter mode. Creates stream cipher.
 * Requires good IV. Parallelizable. OK, but no MAC.
 */
const ctr = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {
    function processCtr(buf, dst) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(buf);
        if (dst !== undefined) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(dst);
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(dst))
                throw new Error('unaligned destination');
        }
        const xk = expandKeyLE(key);
        const n = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(nonce); // align + avoid changing
        const toClean = [xk, n];
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(buf))
            toClean.push((buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(buf)));
        const out = ctrCounter(xk, n, buf, dst);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
        return out;
    }
    return {
        encrypt: (plaintext, dst) => processCtr(plaintext, dst),
        decrypt: (ciphertext, dst) => processCtr(ciphertext, dst),
    };
});
function validateBlockDecrypt(data) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(data);
    if (data.length % BLOCK_SIZE !== 0) {
        throw new Error('aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size ' + BLOCK_SIZE);
    }
}
function validateBlockEncrypt(plaintext, pcks5, dst) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(plaintext);
    let outLen = plaintext.length;
    const remaining = outLen % BLOCK_SIZE;
    if (!pcks5 && remaining !== 0)
        throw new Error('aec/(cbc-ecb): unpadded plaintext with disabled padding');
    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(plaintext))
        plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(plaintext);
    const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(plaintext);
    if (pcks5) {
        let left = BLOCK_SIZE - remaining;
        if (!left)
            left = BLOCK_SIZE; // if no bytes left, create empty padding block
        outLen = outLen + left;
    }
    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(outLen, dst);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.complexOverlapBytes)(plaintext, dst);
    const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
    return { b, o, out: dst };
}
function validatePCKS(data, pcks5) {
    if (!pcks5)
        return data;
    const len = data.length;
    if (!len)
        throw new Error('aes/pcks5: empty ciphertext not allowed');
    const lastByte = data[len - 1];
    if (lastByte <= 0 || lastByte > 16)
        throw new Error('aes/pcks5: wrong padding');
    const out = data.subarray(0, -lastByte);
    for (let i = 0; i < lastByte; i++)
        if (data[len - i - 1] !== lastByte)
            throw new Error('aes/pcks5: wrong padding');
    return out;
}
function padPCKS(left) {
    const tmp = new Uint8Array(16);
    const tmp32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(tmp);
    tmp.set(left);
    const paddingByte = BLOCK_SIZE - left.length;
    for (let i = BLOCK_SIZE - paddingByte; i < BLOCK_SIZE; i++)
        tmp[i] = paddingByte;
    return tmp32;
}
/**
 * ECB: Electronic CodeBook. Simple deterministic replacement.
 * Dangerous: always map x to y. See [AES Penguin](https://words.filippo.io/the-ecb-penguin/).
 */
const ecb = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16 }, function aesecb(key, opts = {}) {
    const pcks5 = !opts.disablePadding;
    return {
        encrypt(plaintext, dst) {
            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
            const xk = expandKeyLE(key);
            let i = 0;
            for (; i + 4 <= b.length;) {
                const { s0, s1, s2, s3 } = encrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);
                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);
            }
            if (pcks5) {
                const tmp32 = padPCKS(plaintext.subarray(i * 4));
                const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);
                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);
            }
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(xk);
            return _out;
        },
        decrypt(ciphertext, dst) {
            validateBlockDecrypt(ciphertext);
            const xk = expandKeyDecLE(key);
            dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(ciphertext.length, dst);
            const toClean = [xk];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(ciphertext))
                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext)));
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.complexOverlapBytes)(ciphertext, dst);
            const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(ciphertext);
            const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
            for (let i = 0; i + 4 <= b.length;) {
                const { s0, s1, s2, s3 } = decrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);
                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);
            }
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return validatePCKS(dst, pcks5);
        },
    };
});
/**
 * CBC: Cipher-Block-Chaining. Key is previous round’s block.
 * Fragile: needs proper padding. Unauthenticated: needs MAC.
 */
const cbc = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {
    const pcks5 = !opts.disablePadding;
    return {
        encrypt(plaintext, dst) {
            const xk = expandKeyLE(key);
            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
            let _iv = iv;
            const toClean = [xk];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(_iv))
                toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(_iv)));
            const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(_iv);
            // prettier-ignore
            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
            let i = 0;
            for (; i + 4 <= b.length;) {
                (s0 ^= b[i + 0]), (s1 ^= b[i + 1]), (s2 ^= b[i + 2]), (s3 ^= b[i + 3]);
                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);
            }
            if (pcks5) {
                const tmp32 = padPCKS(plaintext.subarray(i * 4));
                (s0 ^= tmp32[0]), (s1 ^= tmp32[1]), (s2 ^= tmp32[2]), (s3 ^= tmp32[3]);
                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);
            }
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return _out;
        },
        decrypt(ciphertext, dst) {
            validateBlockDecrypt(ciphertext);
            const xk = expandKeyDecLE(key);
            let _iv = iv;
            const toClean = [xk];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(_iv))
                toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(_iv)));
            const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(_iv);
            dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(ciphertext.length, dst);
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(ciphertext))
                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext)));
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.complexOverlapBytes)(ciphertext, dst);
            const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(ciphertext);
            const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
            // prettier-ignore
            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
            for (let i = 0; i + 4 <= b.length;) {
                // prettier-ignore
                const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;
                (s0 = b[i + 0]), (s1 = b[i + 1]), (s2 = b[i + 2]), (s3 = b[i + 3]);
                const { s0: o0, s1: o1, s2: o2, s3: o3 } = decrypt(xk, s0, s1, s2, s3);
                (o[i++] = o0 ^ ps0), (o[i++] = o1 ^ ps1), (o[i++] = o2 ^ ps2), (o[i++] = o3 ^ ps3);
            }
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return validatePCKS(dst, pcks5);
        },
    };
});
/**
 * CFB: Cipher Feedback Mode. The input for the block cipher is the previous cipher output.
 * Unauthenticated: needs MAC.
 */
const cfb = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aescfb(key, iv) {
    function processCfb(src, isEncrypt, dst) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(src);
        const srcLen = src.length;
        dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getOutput)(srcLen, dst);
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.overlapBytes)(src, dst))
            throw new Error('overlapping src and dst not supported.');
        const xk = expandKeyLE(key);
        let _iv = iv;
        const toClean = [xk];
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(_iv))
            toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(_iv)));
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(src))
            toClean.push((src = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(src)));
        const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(src);
        const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(dst);
        const next32 = isEncrypt ? dst32 : src32;
        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(_iv);
        // prettier-ignore
        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
        for (let i = 0; i + 4 <= src32.length;) {
            const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);
            dst32[i + 0] = src32[i + 0] ^ e0;
            dst32[i + 1] = src32[i + 1] ^ e1;
            dst32[i + 2] = src32[i + 2] ^ e2;
            dst32[i + 3] = src32[i + 3] ^ e3;
            (s0 = next32[i++]), (s1 = next32[i++]), (s2 = next32[i++]), (s3 = next32[i++]);
        }
        // leftovers (less than block)
        const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);
        if (start < srcLen) {
            ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
            const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u8)(new Uint32Array([s0, s1, s2, s3]));
            for (let i = start, pos = 0; i < srcLen; i++, pos++)
                dst[i] = src[i] ^ buf[pos];
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(buf);
        }
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
        return dst;
    }
    return {
        encrypt: (plaintext, dst) => processCfb(plaintext, true, dst),
        decrypt: (ciphertext, dst) => processCfb(ciphertext, false, dst),
    };
});
// TODO: merge with chacha, however gcm has bitLen while chacha has byteLen
function computeTag(fn, isLE, key, data, AAD) {
    const aadLength = AAD ? AAD.length : 0;
    const h = fn.create(key, data.length + aadLength);
    if (AAD)
        h.update(AAD);
    const num = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u64Lengths)(8 * data.length, 8 * aadLength, isLE);
    h.update(data);
    h.update(num);
    const res = h.digest();
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(num);
    return res;
}
/**
 * GCM: Galois/Counter Mode.
 * Modern, parallel version of CTR, with MAC.
 * Be careful: MACs can be forged.
 * Unsafe to use random nonces under the same key, due to collision chance.
 * As for nonce size, prefer 12-byte, instead of 8-byte.
 */
const gcm = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {
    // NIST 800-38d doesn't enforce minimum nonce length.
    // We enforce 8 bytes for compat with openssl.
    // 12 bytes are recommended. More than 12 bytes would be converted into 12.
    if (nonce.length < 8)
        throw new Error('aes/gcm: invalid nonce length');
    const tagLength = 16;
    function _computeTag(authKey, tagMask, data) {
        const tag = computeTag(_polyval_js__WEBPACK_IMPORTED_MODULE_0__.ghash, false, authKey, data, AAD);
        for (let i = 0; i < tagMask.length; i++)
            tag[i] ^= tagMask[i];
        return tag;
    }
    function deriveKeys() {
        const xk = expandKeyLE(key);
        const authKey = EMPTY_BLOCK.slice();
        const counter = EMPTY_BLOCK.slice();
        ctr32(xk, false, counter, counter, authKey);
        // NIST 800-38d, page 15: different behavior for 96-bit and non-96-bit nonces
        if (nonce.length === 12) {
            counter.set(nonce);
        }
        else {
            const nonceLen = EMPTY_BLOCK.slice();
            const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(nonceLen);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.setBigUint64)(view, 8, BigInt(nonce.length * 8), false);
            // ghash(nonce || u64be(0) || u64be(nonceLen*8))
            const g = _polyval_js__WEBPACK_IMPORTED_MODULE_0__.ghash.create(authKey).update(nonce).update(nonceLen);
            g.digestInto(counter); // digestInto doesn't trigger '.destroy'
            g.destroy();
        }
        const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);
        return { xk, authKey, counter, tagMask };
    }
    return {
        encrypt(plaintext) {
            const { xk, authKey, counter, tagMask } = deriveKeys();
            const out = new Uint8Array(plaintext.length + tagLength);
            const toClean = [xk, authKey, counter, tagMask];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(plaintext))
                toClean.push((plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(plaintext)));
            ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));
            const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));
            toClean.push(tag);
            out.set(tag, plaintext.length);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return out;
        },
        decrypt(ciphertext) {
            const { xk, authKey, counter, tagMask } = deriveKeys();
            const toClean = [xk, authKey, tagMask, counter];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(ciphertext))
                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext)));
            const data = ciphertext.subarray(0, -tagLength);
            const passedTag = ciphertext.subarray(-tagLength);
            const tag = _computeTag(authKey, tagMask, data);
            toClean.push(tag);
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalBytes)(tag, passedTag))
                throw new Error('aes/gcm: invalid ghash tag');
            const out = ctr32(xk, false, counter, data);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return out;
        },
    };
});
const limit = (name, min, max) => (value) => {
    if (!Number.isSafeInteger(value) || min > value || value > max) {
        const minmax = '[' + min + '..' + max + ']';
        throw new Error('' + name + ': expected value in range ' + minmax + ', got ' + value);
    }
};
/**
 * AES-GCM-SIV: classic AES-GCM with nonce-misuse resistance.
 * Guarantees that, when a nonce is repeated, the only security loss is that identical
 * plaintexts will produce identical ciphertexts.
 * RFC 8452, https://datatracker.ietf.org/doc/html/rfc8452
 */
const gcmsiv = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {
    const tagLength = 16;
    // From RFC 8452: Section 6
    const AAD_LIMIT = limit('AAD', 0, 2 ** 36);
    const PLAIN_LIMIT = limit('plaintext', 0, 2 ** 36);
    const NONCE_LIMIT = limit('nonce', 12, 12);
    const CIPHER_LIMIT = limit('ciphertext', 16, 2 ** 36 + 16);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(key, 16, 24, 32);
    NONCE_LIMIT(nonce.length);
    if (AAD !== undefined)
        AAD_LIMIT(AAD.length);
    function deriveKeys() {
        const xk = expandKeyLE(key);
        const encKey = new Uint8Array(key.length);
        const authKey = new Uint8Array(16);
        const toClean = [xk, encKey];
        let _nonce = nonce;
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(_nonce))
            toClean.push((_nonce = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(_nonce)));
        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(_nonce);
        // prettier-ignore
        let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];
        let counter = 0;
        for (const derivedKey of [authKey, encKey].map(_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)) {
            const d32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(derivedKey);
            for (let i = 0; i < d32.length; i += 2) {
                // aes(u32le(0) || nonce)[:8] || aes(u32le(1) || nonce)[:8] ...
                const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);
                d32[i + 0] = o0;
                d32[i + 1] = o1;
                s0 = ++counter; // increment counter inside state
            }
        }
        const res = { authKey, encKey: expandKeyLE(encKey) };
        // Cleanup
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
        return res;
    }
    function _computeTag(encKey, authKey, data) {
        const tag = computeTag(_polyval_js__WEBPACK_IMPORTED_MODULE_0__.polyval, true, authKey, data, AAD);
        // Compute the expected tag by XORing S_s and the nonce, clearing the
        // most significant bit of the last byte and encrypting with the
        // message-encryption key.
        for (let i = 0; i < 12; i++)
            tag[i] ^= nonce[i];
        tag[15] &= 0x7f; // Clear the highest bit
        // encrypt tag as block
        const t32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(tag);
        // prettier-ignore
        let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];
        ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));
        (t32[0] = s0), (t32[1] = s1), (t32[2] = s2), (t32[3] = s3);
        return tag;
    }
    // actual decrypt/encrypt of message.
    function processSiv(encKey, tag, input) {
        let block = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(tag);
        block[15] |= 0x80; // Force highest bit
        const res = ctr32(encKey, true, block, input);
        // Cleanup
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(block);
        return res;
    }
    return {
        encrypt(plaintext) {
            PLAIN_LIMIT(plaintext.length);
            const { encKey, authKey } = deriveKeys();
            const tag = _computeTag(encKey, authKey, plaintext);
            const toClean = [encKey, authKey, tag];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(plaintext))
                toClean.push((plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(plaintext)));
            const out = new Uint8Array(plaintext.length + tagLength);
            out.set(tag, plaintext.length);
            out.set(processSiv(encKey, tag, plaintext));
            // Cleanup
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return out;
        },
        decrypt(ciphertext) {
            CIPHER_LIMIT(ciphertext.length);
            const tag = ciphertext.subarray(-tagLength);
            const { encKey, authKey } = deriveKeys();
            const toClean = [encKey, authKey];
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAligned32)(ciphertext))
                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext)));
            const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));
            const expectedTag = _computeTag(encKey, authKey, plaintext);
            toClean.push(expectedTag);
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalBytes)(tag, expectedTag)) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
                throw new Error('invalid polyval tag');
            }
            // Cleanup
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(...toClean);
            return plaintext;
        },
    };
});
/**
 * AES-GCM-SIV, not AES-SIV.
 * This is legace name, use `gcmsiv` export instead.
 * @deprecated
 */
const siv = gcmsiv;
function isBytes32(a) {
    return (a instanceof Uint32Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint32Array'));
}
function encryptBlock(xk, block) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(block, 16);
    if (!isBytes32(xk))
        throw new Error('_encryptBlock accepts result of expandKeyLE');
    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(block);
    let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);
    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);
    return block;
}
function decryptBlock(xk, block) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(block, 16);
    if (!isBytes32(xk))
        throw new Error('_decryptBlock accepts result of expandKeyLE');
    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(block);
    let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);
    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);
    return block;
}
/**
 * AES-W (base for AESKW/AESKWP).
 * Specs: [SP800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf),
 * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),
 * [RFC 5649](https://datatracker.ietf.org/doc/rfc5649/).
 */
const AESW = {
    /*
    High-level pseudocode:
    ```
    A: u64 = IV
    out = []
    for (let i=0, ctr = 0; i<6; i++) {
      for (const chunk of chunks(plaintext, 8)) {
        A ^= swapEndianess(ctr++)
        [A, res] = chunks(encrypt(A || chunk), 8);
        out ||= res
      }
    }
    out = A || out
    ```
    Decrypt is the same, but reversed.
    */
    encrypt(kek, out) {
        // Size is limited to 4GB, otherwise ctr will overflow and we'll need to switch to bigints.
        // If you need it larger, open an issue.
        if (out.length >= 2 ** 32)
            throw new Error('plaintext should be less than 4gb');
        const xk = expandKeyLE(kek);
        if (out.length === 16)
            encryptBlock(xk, out);
        else {
            const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);
            // prettier-ignore
            let a0 = o32[0], a1 = o32[1]; // A
            for (let j = 0, ctr = 1; j < 6; j++) {
                for (let pos = 2; pos < o32.length; pos += 2, ctr++) {
                    const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
                    // A = MSB(64, B) ^ t where t = (n*j)+i
                    (a0 = s0), (a1 = s1 ^ byteSwap(ctr)), (o32[pos] = s2), (o32[pos + 1] = s3);
                }
            }
            (o32[0] = a0), (o32[1] = a1); // out = A || out
        }
        xk.fill(0);
    },
    decrypt(kek, out) {
        if (out.length - 8 >= 2 ** 32)
            throw new Error('ciphertext should be less than 4gb');
        const xk = expandKeyDecLE(kek);
        const chunks = out.length / 8 - 1; // first chunk is IV
        if (chunks === 1)
            decryptBlock(xk, out);
        else {
            const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);
            // prettier-ignore
            let a0 = o32[0], a1 = o32[1]; // A
            for (let j = 0, ctr = chunks * 6; j < 6; j++) {
                for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr--) {
                    a1 ^= byteSwap(ctr);
                    const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
                    (a0 = s0), (a1 = s1), (o32[pos] = s2), (o32[pos + 1] = s3);
                }
            }
            (o32[0] = a0), (o32[1] = a1);
        }
        xk.fill(0);
    },
};
const AESKW_IV = /* @__PURE__ */ new Uint8Array(8).fill(0xa6); // A6A6A6A6A6A6A6A6
/**
 * AES-KW (key-wrap). Injects static IV into plaintext, adds counter, encrypts 6 times.
 * Reduces block size from 16 to 8 bytes.
 * For padded version, use aeskwp.
 * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),
 * [NIST.SP.800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf).
 */
const aeskw = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 8 }, (kek) => ({
    encrypt(plaintext) {
        if (!plaintext.length || plaintext.length % 8 !== 0)
            throw new Error('invalid plaintext length');
        if (plaintext.length === 8)
            throw new Error('8-byte keys not allowed in AESKW, use AESKWP instead');
        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(AESKW_IV, plaintext);
        AESW.encrypt(kek, out);
        return out;
    },
    decrypt(ciphertext) {
        // ciphertext must be at least 24 bytes and a multiple of 8 bytes
        // 24 because should have at least two block (1 iv + 2).
        // Replace with 16 to enable '8-byte keys'
        if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)
            throw new Error('invalid ciphertext length');
        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext);
        AESW.decrypt(kek, out);
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalBytes)(out.subarray(0, 8), AESKW_IV))
            throw new Error('integrity check failed');
        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway
        return out.subarray(8);
    },
}));
/*
We don't support 8-byte keys. The rabbit hole:

- Wycheproof says: "NIST SP 800-38F does not define the wrapping of 8 byte keys.
  RFC 3394 Section 2  on the other hand specifies that 8 byte keys are wrapped
  by directly encrypting one block with AES."
    - https://github.com/C2SP/wycheproof/blob/master/doc/key_wrap.md
    - "RFC 3394 specifies in Section 2, that the input for the key wrap
      algorithm must be at least two blocks and otherwise the constant
      field and key are simply encrypted with ECB as a single block"
- What RFC 3394 actually says (in Section 2):
    - "Before being wrapped, the key data is parsed into n blocks of 64 bits.
      The only restriction the key wrap algorithm places on n is that n be
      at least two"
    - "For key data with length less than or equal to 64 bits, the constant
      field used in this specification and the key data form a single
      128-bit codebook input making this key wrap unnecessary."
- Which means "assert(n >= 2)" and "use something else for 8 byte keys"
- NIST SP800-38F actually prohibits 8-byte in "5.3.1 Mandatory Limits".
  It states that plaintext for KW should be "2 to 2^54 -1 semiblocks".
- So, where does "directly encrypt single block with AES" come from?
    - Not RFC 3394. Pseudocode of key wrap in 2.2 explicitly uses
      loop of 6 for any code path
    - There is a weird W3C spec:
      https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#kw-aes128
    - This spec is outdated, as admitted by Wycheproof authors
    - There is RFC 5649 for padded key wrap, which is padding construction on
      top of AESKW. In '4.1.2' it says: "If the padded plaintext contains exactly
      eight octets, then prepend the AIV as defined in Section 3 above to P[1] and
      encrypt the resulting 128-bit block using AES in ECB mode [Modes] with key
      K (the KEK).  In this case, the output is two 64-bit blocks C[0] and C[1]:"
    - Browser subtle crypto is actually crashes on wrapping keys less than 16 bytes:
      `Error: error:1C8000E6:Provider routines::invalid input length] { opensslErrorStack: [ 'error:030000BD:digital envelope routines::update error' ]`

In the end, seems like a bug in Wycheproof.
The 8-byte check can be easily disabled inside of AES_W.
*/
const AESKWP_IV = 0xa65959a6; // single u32le value
/**
 * AES-KW, but with padding and allows random keys.
 * Second u32 of IV is used as counter for length.
 * [RFC 5649](https://www.rfc-editor.org/rfc/rfc5649)
 */
const aeskwp = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapCipher)({ blockSize: 8 }, (kek) => ({
    encrypt(plaintext) {
        if (!plaintext.length)
            throw new Error('invalid plaintext length');
        const padded = Math.ceil(plaintext.length / 8) * 8;
        const out = new Uint8Array(8 + padded);
        out.set(plaintext, 8);
        const out32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);
        out32[0] = AESKWP_IV;
        out32[1] = byteSwap(plaintext.length);
        AESW.encrypt(kek, out);
        return out;
    },
    decrypt(ciphertext) {
        // 16 because should have at least one block
        if (ciphertext.length < 16)
            throw new Error('invalid ciphertext length');
        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes)(ciphertext);
        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);
        AESW.decrypt(kek, out);
        const len = byteSwap(o32[1]) >>> 0;
        const padded = Math.ceil(len / 8) * 8;
        if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)
            throw new Error('integrity check failed');
        for (let i = len; i < padded; i++)
            if (out[8 + i] !== 0)
                throw new Error('integrity check failed');
        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway
        return out.subarray(8, 8 + len);
    },
}));
/** Unsafe low-level internal methods. May change at any time. */
const unsafe = {
    expandKeyLE,
    expandKeyDecLE,
    encrypt,
    decrypt,
    encryptBlock,
    decryptBlock,
    ctrCounter,
    ctr32,
};
//# sourceMappingURL=aes.js.map

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash),
/* harmony export */   abool: () => (/* binding */ abool),
/* harmony export */   abytes: () => (/* binding */ abytes),
/* harmony export */   aexists: () => (/* binding */ aexists),
/* harmony export */   ahash: () => (/* binding */ ahash),
/* harmony export */   anumber: () => (/* binding */ anumber),
/* harmony export */   aoutput: () => (/* binding */ aoutput),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),
/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),
/* harmony export */   checkOpts: () => (/* binding */ checkOpts),
/* harmony export */   clean: () => (/* binding */ clean),
/* harmony export */   complexOverlapBytes: () => (/* binding */ complexOverlapBytes),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   copyBytes: () => (/* binding */ copyBytes),
/* harmony export */   createView: () => (/* binding */ createView),
/* harmony export */   equalBytes: () => (/* binding */ equalBytes),
/* harmony export */   getOutput: () => (/* binding */ getOutput),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),
/* harmony export */   isAligned32: () => (/* binding */ isAligned32),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   isLE: () => (/* binding */ isLE),
/* harmony export */   nextTick: () => (/* binding */ nextTick),
/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),
/* harmony export */   overlapBytes: () => (/* binding */ overlapBytes),
/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64),
/* harmony export */   toBytes: () => (/* binding */ toBytes),
/* harmony export */   u32: () => (/* binding */ u32),
/* harmony export */   u64Lengths: () => (/* binding */ u64Lengths),
/* harmony export */   u8: () => (/* binding */ u8),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   wrapCipher: () => (/* binding */ wrapCipher)
/* harmony export */ });
/**
 * Utilities for hex, bytes, CSPRNG.
 * @module
 */
/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */
/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */
function isBytes(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
/** Asserts something is boolean. */
function abool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`boolean expected, not ${b}`);
}
/** Asserts something is positive integer. */
function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error('positive integer expected, got ' + n);
}
/** Asserts something is Uint8Array. */
function abytes(b, ...lengths) {
    if (!isBytes(b))
        throw new Error('Uint8Array expected');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);
}
/**
 * Asserts something is hash
 * TODO: remove
 * @deprecated
 */
function ahash(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function')
        throw new Error('Hash should be wrapped by utils.createHasher');
    anumber(h.outputLen);
    anumber(h.blockLen);
}
/** Asserts a hash instance has not been destroyed / finished */
function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
/** Asserts output is properly-sized byte array */
function aoutput(out, instance) {
    abytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('digestInto() expects output buffer of length at least ' + min);
    }
}
/** Cast u8 / u16 / u32 to u8. */
function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** Cast u8 / u16 / u32 to u32. */
function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
/** Zeroize a byte array. Warning: JS provides no guarantees. */
function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
    }
}
/** Create DataView of an array for easy byte-level manipulation. */
function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** Is current platform little-endian? Most are. Big-Endian platform: IBM */
const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = /* @__PURE__ */ (() => 
// @ts-ignore
typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * Convert byte array to hex string. Uses built-in function, when available.
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore
    if (hasHexBuiltin)
        return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * Convert hex string to byte array. Uses built-in function, when available.
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    // @ts-ignore
    if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
// Used in micro
function hexToNumber(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian
}
// Used in ff1
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
// Used in micro, ff1
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
}
// TODO: remove
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = async () => { };
/**
 * Converts string to bytes using UTF8 encoding.
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error('string expected');
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Converts bytes to string using UTF8 encoding.
 * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'
 */
function bytesToUtf8(bytes) {
    return new TextDecoder().decode(bytes);
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    else if (isBytes(data))
        data = copyBytes(data);
    else
        throw new Error('Uint8Array expected, got ' + typeof data);
    return data;
}
/**
 * Checks if two U8A use same underlying buffer and overlaps.
 * This is invalid and can corrupt data.
 */
function overlapBytes(a, b) {
    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy
        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end
        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end
    );
}
/**
 * If input and output overlap and input starts before output, we will overwrite end of input before
 * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)
 */
function complexOverlapBytes(input, output) {
    // This is very cursed. It works somehow, but I'm completely unsure,
    // reasoning about overlapping aligned windows is very hard.
    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)
        throw new Error('complex overlap of input and output is not supported');
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
function checkOpts(defaults, opts) {
    if (opts == null || typeof opts !== 'object')
        throw new Error('options must be defined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
/** Compares 2 uint8array-s in kinda constant time. */
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
// TODO: remove
/** For runtime check if class implements interface. */
class Hash {
}
/**
 * Wraps a cipher: validates args, ensures encrypt() can only be called once.
 * @__NO_SIDE_EFFECTS__
 */
const wrapCipher = (params, constructor) => {
    function wrappedCipher(key, ...args) {
        // Validate key
        abytes(key);
        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:
        if (!isLE)
            throw new Error('Non little-endian hardware is not yet supported');
        // Validate nonce if nonceLength is present
        if (params.nonceLength !== undefined) {
            const nonce = args[0];
            if (!nonce)
                throw new Error('nonce / iv required');
            if (params.varSizeNonce)
                abytes(nonce);
            else
                abytes(nonce, params.nonceLength);
        }
        // Validate AAD if tagLength present
        const tagl = params.tagLength;
        if (tagl && args[1] !== undefined) {
            abytes(args[1]);
        }
        const cipher = constructor(key, ...args);
        const checkOutput = (fnLength, output) => {
            if (output !== undefined) {
                if (fnLength !== 2)
                    throw new Error('cipher output not supported');
                abytes(output);
            }
        };
        // Create wrapped cipher with validation and single-use encryption
        let called = false;
        const wrCipher = {
            encrypt(data, output) {
                if (called)
                    throw new Error('cannot encrypt() twice with same key + nonce');
                called = true;
                abytes(data);
                checkOutput(cipher.encrypt.length, output);
                return cipher.encrypt(data, output);
            },
            decrypt(data, output) {
                abytes(data);
                if (tagl && data.length < tagl)
                    throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);
                checkOutput(cipher.decrypt.length, output);
                return cipher.decrypt(data, output);
            },
        };
        return wrCipher;
    }
    Object.assign(wrappedCipher, params);
    return wrappedCipher;
};
/**
 * By default, returns u8a of length.
 * When out is available, it checks it for validity and uses it.
 */
function getOutput(expectedLength, out, onlyAligned = true) {
    if (out === undefined)
        return new Uint8Array(expectedLength);
    if (out.length !== expectedLength)
        throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);
    if (onlyAligned && !isAligned32(out))
        throw new Error('invalid output, must be aligned');
    return out;
}
/** Polyfill for Safari 14. */
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
function u64Lengths(dataLength, aadLength, isLE) {
    abool(isLE);
    const num = new Uint8Array(16);
    const view = createView(num);
    setBigUint64(view, 0, BigInt(aadLength), isLE);
    setBigUint64(view, 8, BigInt(dataLength), isLE);
    return num;
}
// Is byte array aligned to 4 byte offset (u32)?
function isAligned32(bytes) {
    return bytes.byteOffset % 4 === 0;
}
// copy bytes to new u8a (aligned). Because Buffer.slice is broken.
function copyBytes(bytes) {
    return Uint8Array.from(bytes);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_md.js":
/*!***********************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_md.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chi: () => (/* binding */ Chi),
/* harmony export */   HashMD: () => (/* binding */ HashMD),
/* harmony export */   Maj: () => (/* binding */ Maj),
/* harmony export */   SHA224_IV: () => (/* binding */ SHA224_IV),
/* harmony export */   SHA256_IV: () => (/* binding */ SHA256_IV),
/* harmony export */   SHA384_IV: () => (/* binding */ SHA384_IV),
/* harmony export */   SHA512_IV: () => (/* binding */ SHA512_IV),
/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");
/**
 * Internal Merkle-Damgard hash utils.
 * @module
 */

/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
/** Choice: a ? b : c */
function Chi(a, b, c) {
    return (a & b) ^ (~a & c);
}
/** Majority function, true if any two inputs is true. */
function Maj(a, b, c) {
    return (a & b) ^ (a & c) ^ (b & c);
}
/**
 * Merkle-Damgard hash construction base class.
 * Could be used to create MD5, RIPEMD, SHA1, SHA2.
 */
class HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);
    }
    update(data) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);
        const { view, buffer, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(this.buffer.subarray(pos));
        // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished;
        to.length = length;
        to.pos = pos;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
    clone() {
        return this._cloneInto();
    }
}
/**
 * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.
 * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.
 */
/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */
const SHA256_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
]);
/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */
const SHA224_IV = /* @__PURE__ */ Uint32Array.from([
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,
]);
/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */
const SHA384_IV = /* @__PURE__ */ Uint32Array.from([
    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,
]);
/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */
const SHA512_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,
]);
//# sourceMappingURL=_md.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_u64.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_u64.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   add3H: () => (/* binding */ add3H),
/* harmony export */   add3L: () => (/* binding */ add3L),
/* harmony export */   add4H: () => (/* binding */ add4H),
/* harmony export */   add4L: () => (/* binding */ add4L),
/* harmony export */   add5H: () => (/* binding */ add5H),
/* harmony export */   add5L: () => (/* binding */ add5L),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   fromBig: () => (/* binding */ fromBig),
/* harmony export */   rotlBH: () => (/* binding */ rotlBH),
/* harmony export */   rotlBL: () => (/* binding */ rotlBL),
/* harmony export */   rotlSH: () => (/* binding */ rotlSH),
/* harmony export */   rotlSL: () => (/* binding */ rotlSL),
/* harmony export */   rotr32H: () => (/* binding */ rotr32H),
/* harmony export */   rotr32L: () => (/* binding */ rotr32L),
/* harmony export */   rotrBH: () => (/* binding */ rotrBH),
/* harmony export */   rotrBL: () => (/* binding */ rotrBL),
/* harmony export */   rotrSH: () => (/* binding */ rotrSH),
/* harmony export */   rotrSL: () => (/* binding */ rotrSL),
/* harmony export */   shrSH: () => (/* binding */ shrSH),
/* harmony export */   shrSL: () => (/* binding */ shrSL),
/* harmony export */   split: () => (/* binding */ split),
/* harmony export */   toBig: () => (/* binding */ toBig)
/* harmony export */ });
/**
 * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.
 * @todo re-check https://issues.chromium.org/issues/42212588
 * @module
 */
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    const len = lst.length;
    let Ah = new Uint32Array(len);
    let Al = new Uint32Array(len);
    for (let i = 0; i < len; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore

// prettier-ignore
const u64 = {
    fromBig, split, toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH, rotlSL, rotlBH, rotlBL,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);
//# sourceMappingURL=_u64.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/crypto.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/crypto.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   crypto: () => (/* binding */ crypto)
/* harmony export */ });
const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;
//# sourceMappingURL=crypto.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/hkdf.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/hkdf.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   expand: () => (/* binding */ expand),
/* harmony export */   extract: () => (/* binding */ extract),
/* harmony export */   hkdf: () => (/* binding */ hkdf)
/* harmony export */ });
/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hmac.js */ "./node_modules/@noble/hashes/esm/hmac.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");
/**
 * HKDF (RFC 5869): extract + expand in one step.
 * See https://soatok.blog/2021/11/17/understanding-hkdf/.
 * @module
 */


/**
 * HKDF-extract from spec. Less important part. `HKDF-Extract(IKM, salt) -> PRK`
 * Arguments position differs from spec (IKM is first one, since it is not optional)
 * @param hash - hash function that would be used (e.g. sha256)
 * @param ikm - input keying material, the initial key
 * @param salt - optional salt value (a non-secret random value)
 */
function extract(hash, ikm, salt) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ahash)(hash);
    // NOTE: some libraries treat zero-length array as 'not provided';
    // we don't, since we have undefined as 'not provided'
    // https://github.com/RustCrypto/KDFs/issues/15
    if (salt === undefined)
        salt = new Uint8Array(hash.outputLen);
    return (0,_hmac_js__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(salt), (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(ikm));
}
const HKDF_COUNTER = /* @__PURE__ */ Uint8Array.from([0]);
const EMPTY_BUFFER = /* @__PURE__ */ Uint8Array.of();
/**
 * HKDF-expand from the spec. The most important part. `HKDF-Expand(PRK, info, L) -> OKM`
 * @param hash - hash function that would be used (e.g. sha256)
 * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)
 * @param info - optional context and application specific information (can be a zero-length string)
 * @param length - length of output keying material in bytes
 */
function expand(hash, prk, info, length = 32) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ahash)(hash);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(length);
    const olen = hash.outputLen;
    if (length > 255 * olen)
        throw new Error('Length should be <= 255*HashLen');
    const blocks = Math.ceil(length / olen);
    if (info === undefined)
        info = EMPTY_BUFFER;
    // first L(ength) octets of T
    const okm = new Uint8Array(blocks * olen);
    // Re-use HMAC instance between blocks
    const HMAC = _hmac_js__WEBPACK_IMPORTED_MODULE_0__.hmac.create(hash, prk);
    const HMACTmp = HMAC._cloneInto();
    const T = new Uint8Array(HMAC.outputLen);
    for (let counter = 0; counter < blocks; counter++) {
        HKDF_COUNTER[0] = counter + 1;
        // T(0) = empty string (zero length)
        // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)
        HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)
            .update(info)
            .update(HKDF_COUNTER)
            .digestInto(T);
        okm.set(T, olen * counter);
        HMAC._cloneInto(HMACTmp);
    }
    HMAC.destroy();
    HMACTmp.destroy();
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(T, HKDF_COUNTER);
    return okm.slice(0, length);
}
/**
 * HKDF (RFC 5869): derive keys from an initial input.
 * Combines hkdf_extract + hkdf_expand in one step
 * @param hash - hash function that would be used (e.g. sha256)
 * @param ikm - input keying material, the initial key
 * @param salt - optional salt value (a non-secret random value)
 * @param info - optional context and application specific information (can be a zero-length string)
 * @param length - length of output keying material in bytes
 * @example
 * import { hkdf } from '@noble/hashes/hkdf';
 * import { sha256 } from '@noble/hashes/sha2';
 * import { randomBytes } from '@noble/hashes/utils';
 * const inputKey = randomBytes(32);
 * const salt = randomBytes(32);
 * const info = 'application-key';
 * const hk1 = hkdf(sha256, inputKey, salt, info, 32);
 */
const hkdf = (hash, ikm, salt, info, length) => expand(hash, extract(hash, ikm, salt), info, length);
//# sourceMappingURL=hkdf.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/hmac.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/hmac.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HMAC: () => (/* binding */ HMAC),
/* harmony export */   hmac: () => (/* binding */ hmac)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");
/**
 * HMAC: RFC2104 message authentication code.
 * @module
 */

class HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {
    constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ahash)(hash);
        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== 'function')
            throw new Error('Expected instance of class which extends utils.Hash');
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(pad);
    }
    update(buf) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    clone() {
        return this._cloneInto();
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 * @example
 * import { hmac } from '@noble/hashes/hmac';
 * import { sha256 } from '@noble/hashes/sha2';
 * const mac1 = hmac(sha256, 'key', 'message');
 */
const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);
//# sourceMappingURL=hmac.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha2.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha2.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHA224: () => (/* binding */ SHA224),
/* harmony export */   SHA256: () => (/* binding */ SHA256),
/* harmony export */   SHA384: () => (/* binding */ SHA384),
/* harmony export */   SHA512: () => (/* binding */ SHA512),
/* harmony export */   SHA512_224: () => (/* binding */ SHA512_224),
/* harmony export */   SHA512_256: () => (/* binding */ SHA512_256),
/* harmony export */   sha224: () => (/* binding */ sha224),
/* harmony export */   sha256: () => (/* binding */ sha256),
/* harmony export */   sha384: () => (/* binding */ sha384),
/* harmony export */   sha512: () => (/* binding */ sha512),
/* harmony export */   sha512_224: () => (/* binding */ sha512_224),
/* harmony export */   sha512_256: () => (/* binding */ sha512_256)
/* harmony export */ });
/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ "./node_modules/@noble/hashes/esm/_md.js");
/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_u64.js */ "./node_modules/@noble/hashes/esm/_u64.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");
/**
 * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.
 * SHA256 is the fastest hash implementable in JS, even faster than Blake3.
 * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and
 * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).
 * @module
 */



/**
 * Round constants:
 * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)
 */
// prettier-ignore
const SHA256_K = /* @__PURE__ */ Uint32Array.from([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
/** Reusable temporary buffer. "W" comes straight from spec. */
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
    constructor(outputLen = 32) {
        super(64, outputLen, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[0] | 0;
        this.B = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[1] | 0;
        this.C = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[2] | 0;
        this.D = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[3] | 0;
        this.E = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[4] | 0;
        this.F = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[5] | 0;
        this.G = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[6] | 0;
        this.H = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(E, 25);
            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.rotr)(A, 22);
            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(SHA256_W);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.buffer);
    }
}
class SHA224 extends SHA256 {
    constructor() {
        super(28);
        this.A = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[0] | 0;
        this.B = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[1] | 0;
        this.C = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[2] | 0;
        this.D = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[3] | 0;
        this.E = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[4] | 0;
        this.F = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[5] | 0;
        this.G = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[6] | 0;
        this.H = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[7] | 0;
    }
}
// SHA2-512 is slower than sha256 in js because u64 operations are slow.
// Round contants
// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409
// prettier-ignore
const K512 = /* @__PURE__ */ (() => _u64_js__WEBPACK_IMPORTED_MODULE_1__.split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(n => BigInt(n))))();
const SHA512_Kh = /* @__PURE__ */ (() => K512[0])();
const SHA512_Kl = /* @__PURE__ */ (() => K512[1])();
// Reusable temporary buffers
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
    constructor(outputLen = 64) {
        super(128, outputLen, 16, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[0] | 0;
        this.Al = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[1] | 0;
        this.Bh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[2] | 0;
        this.Bl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[3] | 0;
        this.Ch = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[4] | 0;
        this.Cl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[5] | 0;
        this.Dh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[6] | 0;
        this.Dl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[7] | 0;
        this.Eh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[8] | 0;
        this.El = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[9] | 0;
        this.Fh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[10] | 0;
        this.Fl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[11] | 0;
        this.Gh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[12] | 0;
        this.Gl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[13] | 0;
        this.Hh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[14] | 0;
        this.Hl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[15] | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSH(W15h, W15l, 7);
            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSH(W2h, W2l, 6);
            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_1__.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(SHA512_W_H, SHA512_W_L);
    }
    destroy() {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.buffer);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
class SHA384 extends SHA512 {
    constructor() {
        super(48);
        this.Ah = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[0] | 0;
        this.Al = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[1] | 0;
        this.Bh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[2] | 0;
        this.Bl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[3] | 0;
        this.Ch = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[4] | 0;
        this.Cl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[5] | 0;
        this.Dh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[6] | 0;
        this.Dl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[7] | 0;
        this.Eh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[8] | 0;
        this.El = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[9] | 0;
        this.Fh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[10] | 0;
        this.Fl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[11] | 0;
        this.Gh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[12] | 0;
        this.Gl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[13] | 0;
        this.Hh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[14] | 0;
        this.Hl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[15] | 0;
    }
}
/**
 * Truncated SHA512/256 and SHA512/224.
 * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as "intermediary" IV of SHA512/t.
 * Then t hashes string to produce result IV.
 * See `test/misc/sha2-gen-iv.js`.
 */
/** SHA512/224 IV */
const T224_IV = /* @__PURE__ */ Uint32Array.from([
    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,
    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,
]);
/** SHA512/256 IV */
const T256_IV = /* @__PURE__ */ Uint32Array.from([
    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,
    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,
]);
class SHA512_224 extends SHA512 {
    constructor() {
        super(28);
        this.Ah = T224_IV[0] | 0;
        this.Al = T224_IV[1] | 0;
        this.Bh = T224_IV[2] | 0;
        this.Bl = T224_IV[3] | 0;
        this.Ch = T224_IV[4] | 0;
        this.Cl = T224_IV[5] | 0;
        this.Dh = T224_IV[6] | 0;
        this.Dl = T224_IV[7] | 0;
        this.Eh = T224_IV[8] | 0;
        this.El = T224_IV[9] | 0;
        this.Fh = T224_IV[10] | 0;
        this.Fl = T224_IV[11] | 0;
        this.Gh = T224_IV[12] | 0;
        this.Gl = T224_IV[13] | 0;
        this.Hh = T224_IV[14] | 0;
        this.Hl = T224_IV[15] | 0;
    }
}
class SHA512_256 extends SHA512 {
    constructor() {
        super(32);
        this.Ah = T256_IV[0] | 0;
        this.Al = T256_IV[1] | 0;
        this.Bh = T256_IV[2] | 0;
        this.Bl = T256_IV[3] | 0;
        this.Ch = T256_IV[4] | 0;
        this.Cl = T256_IV[5] | 0;
        this.Dh = T256_IV[6] | 0;
        this.Dl = T256_IV[7] | 0;
        this.Eh = T256_IV[8] | 0;
        this.El = T256_IV[9] | 0;
        this.Fh = T256_IV[10] | 0;
        this.Fl = T256_IV[11] | 0;
        this.Gh = T256_IV[12] | 0;
        this.Gl = T256_IV[13] | 0;
        this.Hh = T256_IV[14] | 0;
        this.Hl = T256_IV[15] | 0;
    }
}
/**
 * SHA2-256 hash function from RFC 4634.
 *
 * It is the fastest JS hash, even faster than Blake3.
 * To break sha256 using birthday attack, attackers need to try 2^128 hashes.
 * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.
 */
const sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA256());
/** SHA2-224 hash function from RFC 4634 */
const sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA224());
/** SHA2-512 hash function from RFC 4634. */
const sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA512());
/** SHA2-384 hash function from RFC 4634. */
const sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA384());
/**
 * SHA2-512/256 "truncated" hash function, with improved resistance to length extension attacks.
 * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).
 */
const sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA512_256());
/**
 * SHA2-512/224 "truncated" hash function, with improved resistance to length extension attacks.
 * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).
 */
const sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(() => new SHA512_224());
//# sourceMappingURL=sha2.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha256.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha256.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHA224: () => (/* binding */ SHA224),
/* harmony export */   SHA256: () => (/* binding */ SHA256),
/* harmony export */   sha224: () => (/* binding */ sha224),
/* harmony export */   sha256: () => (/* binding */ sha256)
/* harmony export */ });
/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sha2.js */ "./node_modules/@noble/hashes/esm/sha2.js");
/**
 * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.
 *
 * To break sha256 using birthday attack, attackers need to try 2^128 hashes.
 * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.
 *
 * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).
 * @module
 * @deprecated
 */

/** @deprecated Use import from `noble/hashes/sha2` module */
const SHA256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA256;
/** @deprecated Use import from `noble/hashes/sha2` module */
const sha256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha256;
/** @deprecated Use import from `noble/hashes/sha2` module */
const SHA224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA224;
/** @deprecated Use import from `noble/hashes/sha2` module */
const sha224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha224;
//# sourceMappingURL=sha256.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha3.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha3.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Keccak: () => (/* binding */ Keccak),
/* harmony export */   keccakP: () => (/* binding */ keccakP),
/* harmony export */   keccak_224: () => (/* binding */ keccak_224),
/* harmony export */   keccak_256: () => (/* binding */ keccak_256),
/* harmony export */   keccak_384: () => (/* binding */ keccak_384),
/* harmony export */   keccak_512: () => (/* binding */ keccak_512),
/* harmony export */   sha3_224: () => (/* binding */ sha3_224),
/* harmony export */   sha3_256: () => (/* binding */ sha3_256),
/* harmony export */   sha3_384: () => (/* binding */ sha3_384),
/* harmony export */   sha3_512: () => (/* binding */ sha3_512),
/* harmony export */   shake128: () => (/* binding */ shake128),
/* harmony export */   shake256: () => (/* binding */ shake256)
/* harmony export */ });
/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ "./node_modules/@noble/hashes/esm/_u64.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");
/**
 * SHA3 (keccak) hash function, based on a new "Sponge function" design.
 * Different from older hashes, the internal state is bigger than output size.
 *
 * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),
 * [Website](https://keccak.team/keccak.html),
 * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).
 *
 * Check out `sha3-addons` module for cSHAKE, k12, and others.
 * @module
 */

// prettier-ignore

// No __PURE__ annotations in sha3 header:
// EVERYTHING is in fact used on every export.
// Various per round constants calculations
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
const SHA3_PI = [];
const SHA3_ROTL = [];
const _SHA3_IOTA = [];
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const IOTAS = (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);
const SHA3_IOTA_H = IOTAS[0];
const SHA3_IOTA_L = IOTAS[1];
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));
const rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));
/** `keccakf1600` internal function, additionally allows to adjust round count. */
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(B);
}
/** Keccak sponge function. */
class Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        this.enableXOF = false;
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        // Can be passed from user as dkLen
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        // 0 < blockLen < 200
        if (!(0 < blockLen && blockLen < 200))
            throw new Error('only keccak-f1600 function is supported');
        this.state = new Uint8Array(200);
        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);
    }
    clone() {
        return this._cloneInto();
    }
    keccak() {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(this.state32);
        keccakP(this.state32, this.rounds);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(this.state32);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(data);
        const { blockLen, state } = this;
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this, false);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aoutput)(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.state);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
const gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new Keccak(blockLen, suffix, outputLen));
/** SHA3-224 hash function. */
const sha3_224 = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();
/** SHA3-256 hash function. Different from keccak-256. */
const sha3_256 = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();
/** SHA3-384 hash function. */
const sha3_384 = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();
/** SHA3-512 hash function. */
const sha3_512 = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();
/** keccak-224 hash function. */
const keccak_224 = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();
/** keccak-256 hash function. Different from SHA3-256. */
const keccak_256 = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();
/** keccak-384 hash function. */
const keccak_384 = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();
/** keccak-512 hash function. */
const keccak_512 = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();
const genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createXOFer)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
/** SHAKE128 XOF with 128-bit security. */
const shake128 = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();
/** SHAKE256 XOF with 256-bit security. */
const shake256 = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();
//# sourceMappingURL=sha3.js.map

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash),
/* harmony export */   abytes: () => (/* binding */ abytes),
/* harmony export */   aexists: () => (/* binding */ aexists),
/* harmony export */   ahash: () => (/* binding */ ahash),
/* harmony export */   anumber: () => (/* binding */ anumber),
/* harmony export */   aoutput: () => (/* binding */ aoutput),
/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),
/* harmony export */   byteSwap: () => (/* binding */ byteSwap),
/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),
/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),
/* harmony export */   checkOpts: () => (/* binding */ checkOpts),
/* harmony export */   clean: () => (/* binding */ clean),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   createHasher: () => (/* binding */ createHasher),
/* harmony export */   createOptHasher: () => (/* binding */ createOptHasher),
/* harmony export */   createView: () => (/* binding */ createView),
/* harmony export */   createXOFer: () => (/* binding */ createXOFer),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   isLE: () => (/* binding */ isLE),
/* harmony export */   kdfInputToBytes: () => (/* binding */ kdfInputToBytes),
/* harmony export */   nextTick: () => (/* binding */ nextTick),
/* harmony export */   randomBytes: () => (/* binding */ randomBytes),
/* harmony export */   rotl: () => (/* binding */ rotl),
/* harmony export */   rotr: () => (/* binding */ rotr),
/* harmony export */   swap32IfBE: () => (/* binding */ swap32IfBE),
/* harmony export */   swap8IfBE: () => (/* binding */ swap8IfBE),
/* harmony export */   toBytes: () => (/* binding */ toBytes),
/* harmony export */   u32: () => (/* binding */ u32),
/* harmony export */   u8: () => (/* binding */ u8),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),
/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),
/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)
/* harmony export */ });
/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ "./node_modules/@noble/hashes/esm/crypto.js");
/**
 * Utilities for hex, bytes, CSPRNG.
 * @module
 */
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.

/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */
function isBytes(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
/** Asserts something is positive integer. */
function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error('positive integer expected, got ' + n);
}
/** Asserts something is Uint8Array. */
function abytes(b, ...lengths) {
    if (!isBytes(b))
        throw new Error('Uint8Array expected');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);
}
/** Asserts something is hash */
function ahash(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function')
        throw new Error('Hash should be wrapped by utils.createHasher');
    anumber(h.outputLen);
    anumber(h.blockLen);
}
/** Asserts a hash instance has not been destroyed / finished */
function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
/** Asserts output is properly-sized byte array */
function aoutput(out, instance) {
    abytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('digestInto() expects output buffer of length at least ' + min);
    }
}
/** Cast u8 / u16 / u32 to u8. */
function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** Cast u8 / u16 / u32 to u32. */
function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
/** Zeroize a byte array. Warning: JS provides no guarantees. */
function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
    }
}
/** Create DataView of an array for easy byte-level manipulation. */
function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
/** The rotate right (circular right shift) operation for uint32 */
function rotr(word, shift) {
    return (word << (32 - shift)) | (word >>> shift);
}
/** The rotate left (circular left shift) operation for uint32 */
function rotl(word, shift) {
    return (word << shift) | ((word >>> (32 - shift)) >>> 0);
}
/** Is current platform little-endian? Most are. Big-Endian platform: IBM */
const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();
/** The byte swap operation for uint32 */
function byteSwap(word) {
    return (((word << 24) & 0xff000000) |
        ((word << 8) & 0xff0000) |
        ((word >>> 8) & 0xff00) |
        ((word >>> 24) & 0xff));
}
/** Conditionally byte swap if on a big-endian platform */
const swap8IfBE = isLE
    ? (n) => n
    : (n) => byteSwap(n);
/** @deprecated */
const byteSwapIfBE = swap8IfBE;
/** In place byte swap for Uint32Array */
function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
    }
    return arr;
}
const swap32IfBE = isLE
    ? (u) => u
    : byteSwap32;
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = /* @__PURE__ */ (() => 
// @ts-ignore
typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * Convert byte array to hex string. Uses built-in function, when available.
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore
    if (hasHexBuiltin)
        return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * Convert hex string to byte array. Uses built-in function, when available.
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    // @ts-ignore
    if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
/**
 * There is no setImmediate in browser and setTimeout is slow.
 * Call of async fn will return Promise, which will be fullfiled only on
 * next scheduler queue processing step and this is exactly what we need.
 */
const nextTick = async () => { };
/** Returns control to thread each 'tick' ms to avoid blocking. */
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
            continue;
        await nextTick();
        ts += diff;
    }
}
/**
 * Converts string to bytes using UTF8 encoding.
 * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error('string expected');
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Converts bytes to string using UTF8 encoding.
 * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'
 */
function bytesToUtf8(bytes) {
    return new TextDecoder().decode(bytes);
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    abytes(data);
    return data;
}
/**
 * Helper for KDFs: consumes uint8array or string.
 * When string is passed, does utf8 decoding, using TextDecoder.
 */
function kdfInputToBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    abytes(data);
    return data;
}
/** Copies several Uint8Arrays into one. */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
function checkOpts(defaults, opts) {
    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')
        throw new Error('options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
/** For runtime check if class implements interface */
class Hash {
}
/** Wraps hash function, creating an interface on top of it */
function createHasher(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
}
function createOptHasher(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
function createXOFer(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
const wrapConstructor = createHasher;
const wrapConstructorWithOpts = createOptHasher;
const wrapXOFConstructorWithOpts = createXOFer;
/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */
function randomBytes(bytesLength = 32) {
    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {
        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    // Legacy Node.js compatibility
    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.randomBytes === 'function') {
        return Uint8Array.from(_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.randomBytes(bytesLength));
    }
    throw new Error('crypto.getRandomValues must be defined');
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),
/* harmony export */   pointDecode: () => (/* reexport safe */ _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__.pointDecode),
/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)
/* harmony export */ });
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs");



/// <reference lib="dom" />
// Header name for an API key stamp
const stampHeaderName = "X-Stamp";
// `window.document` ensures that we're in a browser context
// and `crypto.subtle` ensures that it supports the web crypto APIs
// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts
const isCryptoEnabledBrowser = typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof crypto !== "undefined" &&
    typeof crypto.subtle !== "undefined";
// We check `process.versions.node`
// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts
const isNode = typeof process !== "undefined" &&
    process.versions != null &&
    process.versions.node != null;
const detectRuntime = () => {
    if (isCryptoEnabledBrowser) {
        return "browser";
    }
    if (isNode) {
        return "node";
    }
    // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation
    // This is the case for old browsers and react native environments
    return "purejs";
};
/**
 * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.
 */
const signWithApiKey = async (input, runtimeOverride) => {
    const runtime = runtimeOverride ?? detectRuntime();
    switch (runtime) {
        case "browser":
            return (await __webpack_require__.e(/*! import() */ "node_modules_turnkey_api-key-stamper_dist_webcrypto_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs"))).signWithApiKey(input);
        case "node":
            return (await __webpack_require__.e(/*! import() */ "node_modules_turnkey_api-key-stamper_dist_nodecrypto_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs"))).signWithApiKey(input);
        case "purejs":
            return (await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_noble_curves_esm_utils_js"), __webpack_require__.e("vendors-node_modules_turnkey_api-key-stamper_dist_purejs_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs"))).signWithApiKey(input);
        default:
            throw new Error(`Unsupported runtime: ${runtime}`);
    }
};
/**
 * Stamper to use with `@turnkey/http`'s `TurnkeyClient`
 */
class ApiKeyStamper {
    constructor(config) {
        this.apiPublicKey = config.apiPublicKey;
        this.apiPrivateKey = config.apiPrivateKey;
        this.runtimeOverride = config.runtimeOverride;
    }
    async stamp(payload) {
        const signature = await signWithApiKey({
            publicKey: this.apiPublicKey,
            privateKey: this.apiPrivateKey,
            content: payload,
        }, this.runtimeOverride);
        const stamp = {
            publicKey: this.apiPublicKey,
            scheme: "SIGNATURE_SCHEME_TK_API_P256",
            signature,
        };
        return {
            stampHeaderName,
            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),
        };
    }
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromHex: () => (/* binding */ fromHex),
/* harmony export */   toBase64: () => (/* binding */ toBase64),
/* harmony export */   toByteString: () => (/* binding */ toByteString),
/* harmony export */   toHex: () => (/* binding */ toHex)
/* harmony export */ });
/**
 * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts
 *
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Converts the hex string to a byte array.
 *
 * @param hex the input
 * @return the byte array output
 * @throws {!Error}
 * @static
 */
function fromHex(hex) {
    if (hex.length % 2 != 0) {
        throw new Error("Hex string length must be multiple of 2");
    }
    const arr = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);
    }
    return arr;
}
/**
 * Converts a byte array to hex.
 *
 * @param bytes the byte array input
 * @return hex the output
 * @static
 */
function toHex(bytes) {
    let result = "";
    for (let i = 0; i < bytes.length; i++) {
        const hexByte = bytes[i].toString(16);
        result += hexByte.length > 1 ? hexByte : "0" + hexByte;
    }
    return result;
}
/**
 * Base64 encode a byte array.
 *
 * @param bytes the byte array input
 * @param opt_webSafe True indicates we should use the alternative
 *     alphabet, which does not require escaping for use in URLs.
 * @return base64 output
 * @static
 */
function toBase64(bytes, opt_webSafe) {
    const encoded = btoa(
    /* padding */
    toByteString(bytes)).replace(/=/g, "");
    {
        return encoded.replace(/\+/g, "-").replace(/\//g, "_");
    }
}
/**
 * Turns a byte array into the string given by the concatenation of the
 * characters to which the numbers correspond. Each byte is corresponding to a
 * character. Does not support multi-byte characters.
 *
 * @param bytes Array of numbers representing
 *     characters.
 * @return Stringification of the array.
 */
function toByteString(bytes) {
    let str = "";
    for (let i = 0; i < bytes.length; i += 1) {
        str += String.fromCharCode(bytes[i]);
    }
    return str;
}


//# sourceMappingURL=bytes.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pointDecode: () => (/* binding */ pointDecode)
/* harmony export */ });
/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ "./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs");


/**
 * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts
 * - The implementation of integerToByteArray has been modified to augment the resulting byte array to a certain length.
 * - The implementation of PointDecode has been modified to decode both compressed and uncompressed points by checking for correct format
 * - Method isP256CurvePoint added to check whether an uncompressed point is valid
 *
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * P-256 only
 */
function getModulus() {
    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).
    return BigInt("115792089210356248762697446949407573530086143415290314195533631308" +
        "867097853951");
}
/**
 * P-256 only
 */
function getB() {
    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).
    return BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
}
/** Converts byte array to bigint. */
function byteArrayToInteger(bytes) {
    return BigInt("0x" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));
}
/** Converts bigint to byte array. */
function integerToByteArray(i, length) {
    const input = i.toString(16);
    const numHexChars = length * 2;
    let padding = "";
    if (numHexChars < input.length) {
        throw new Error(`cannot pack integer with ${input.length} hex chars into ${length} bytes`);
    }
    else {
        padding = "0".repeat(numHexChars - input.length);
    }
    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(padding + input);
}
/** Returns true iff the ith bit (in lsb order) of n is set. */
function testBit(n, i) {
    const m = BigInt(1) << BigInt(i);
    return (n & m) !== BigInt(0);
}
/**
 * Computes a modular exponent.  Since JavaScript BigInt operations are not
 * constant-time, information about the inputs could leak.  Therefore, THIS
 * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.
 *
 * @param b base
 * @param exp exponent
 * @param p modulus
 * @return b^exp modulo p
 */
function modPow(b, exp, p) {
    if (exp === BigInt(0)) {
        return BigInt(1);
    }
    let result = b;
    const exponentBitString = exp.toString(2);
    for (let i = 1; i < exponentBitString.length; ++i) {
        result = (result * result) % p;
        if (exponentBitString[i] === "1") {
            result = (result * b) % p;
        }
    }
    return result;
}
/**
 * Computes a square root modulo an odd prime.  Since timing and exceptions can
 * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR
 * POINT DECOMPRESSION.
 *
 * @param x square
 * @param p prime modulus
 * @return square root of x modulo p
 */
function modSqrt(x, p) {
    if (p <= BigInt(0)) {
        throw new Error("p must be positive");
    }
    const base = x % p;
    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy
    // p % 4 == 3.  However, although currently a no-op, the following check
    // should be left in place in case other curves are supported in the future.
    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {
        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)
        // q = (p + 1) / 4
        const q = (p + BigInt(1)) >> BigInt(2);
        const squareRoot = modPow(base, q, p);
        if ((squareRoot * squareRoot) % p !== base) {
            throw new Error("could not find a modular square root");
        }
        return squareRoot;
    }
    // Skipping other elliptic curve types that require Cipolla's algorithm.
    throw new Error("unsupported modulus value");
}
/**
 * Computes the y-coordinate of a point on an elliptic curve given its
 * x-coordinate.  Since timing and exceptions can leak information about the
 * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.
 *
 * P-256 only
 *
 * @param x x-coordinate
 * @param lsb least significant bit of the y-coordinate
 * @return y-coordinate
 */
function getY(x, lsb) {
    const p = getModulus();
    const a = p - BigInt(3);
    const b = getB();
    const rhs = ((x * x + a) * x + b) % p;
    let y = modSqrt(rhs, p);
    if (lsb !== testBit(y, 0)) {
        y = (p - y) % p;
    }
    return y;
}
/**
 *
 * Given x and y coordinates of a JWK, checks whether these are valid points on
 * the P-256 elliptic curve.
 *
 * P-256 only
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @return boolean validity
 */
function isP256CurvePoint(x, y) {
    const p = getModulus();
    const a = p - BigInt(3);
    const b = getB();
    const rhs = ((x * x + a) * x + b) % p;
    const lhs = y ** BigInt(2) % p;
    return lhs === rhs;
}
/**
 * Decodes a public key in _compressed_ OR _uncompressed_ format.
 * Augmented to ensure that the x and y components are padded to fit 32 bytes.
 *
 * P-256 only
 */
function pointDecode(point) {
    const fieldSize = fieldSizeInBytes();
    const compressedLength = fieldSize + 1;
    const uncompressedLength = 2 * fieldSize + 1;
    if (point.length !== compressedLength &&
        point.length !== uncompressedLength) {
        throw new Error("Invalid length: point is not in compressed or uncompressed format");
    }
    // Decodes point if its length and first bit match the compressed format
    if ((point[0] === 2 || point[0] === 3) && point.length == compressedLength) {
        const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).
        const x = byteArrayToInteger(point.subarray(1, point.length));
        const p = getModulus();
        if (x < BigInt(0) || x >= p) {
            throw new Error("x is out of range");
        }
        const y = getY(x, lsb);
        const result = {
            kty: "EC",
            crv: "P-256",
            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32)),
            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32)),
            ext: true,
        };
        return result;
        // Decodes point if its length and first bit match the uncompressed format
    }
    else if (point[0] === 4 && point.length == uncompressedLength) {
        const x = byteArrayToInteger(point.subarray(1, fieldSize + 1));
        const y = byteArrayToInteger(point.subarray(fieldSize + 1, 2 * fieldSize + 1));
        const p = getModulus();
        if (x < BigInt(0) ||
            x >= p ||
            y < BigInt(0) ||
            y >= p ||
            !isP256CurvePoint(x, y)) {
            throw new Error("invalid uncompressed x and y coordinates");
        }
        const result = {
            kty: "EC",
            crv: "P-256",
            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32)),
            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32)),
            ext: true,
        };
        return result;
    }
    throw new Error("invalid format");
}
/**
 * P-256 only
 */
function fieldSizeInBytes() {
    return 32;
}


//# sourceMappingURL=elliptic_curves.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/bs58.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/bs58.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bs58)
/* harmony export */ });
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs58 */ "./node_modules/bs58/src/esm/index.js");


// This is a temporary shim for bs58@6.0.0
//
// This issue is similar to the one described here: https://github.com/bitcoinjs/bs58check/issues/47
//
// bs58 v6.0.0 uses ESM with only a default export, which causes compatibility
// issues with Metro (React Native). When importing the package using
// `import bs58 from 'bs58'`, Metro applies multiple levels of wrapping,
// resulting in a structure like `{ default: { default: { encode, decode, ... } } }`.
//
// This shim unwraps the exports until it reaches the object that contains `.decode`,
// `.encode`, and `.decodeUnsafe`, allowing consistent usage across platforms.
//
// We can remove this shim once bs58 publishes a version that properly re-exports
// named methods from its ESM build.
function unwrap(obj) {
    let cur = obj;
    while (cur &&
        !(cur.encode && cur.decode && cur.decodeUnsafe) &&
        cur.default) {
        cur = cur.default;
    }
    return cur;
}
const bs58 = unwrap(bs58__WEBPACK_IMPORTED_MODULE_0__);


//# sourceMappingURL=bs58.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/bs58check.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/bs58check.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bs58check)
/* harmony export */ });
/* harmony import */ var bs58check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs58check */ "./node_modules/bs58check/src/esm/index.js");


// This is a temporary shim for bs58check@4.0.0
//
// See: https://github.com/bitcoinjs/bs58check/issues/47
//
// bs58check v4.0.0 uses ESM with only a default export, which causes compatibility
// issues with Metro (React Native). When importing the package using
// `import bs58check from 'bs58check'`, Metro applies multiple levels of wrapping,
// resulting in a structure like `{ default: { default: { encode, decode, ... } } }`.
//
// This shim unwraps the exports until it reaches the object that contains `.decode`,
// `.encode`, and `.decodeUnsafe`, allowing consistent usage across platforms.
//
// We can remove this shim once bs58check publishes a version that properly re-exports
// named methods from its ESM build
function unwrap(obj) {
    let cur = obj;
    while (cur &&
        !(cur.encode && cur.decode && cur.decodeUnsafe) &&
        cur.default) {
        cur = cur.default;
    }
    return cur;
}
const bs58check = unwrap(bs58check__WEBPACK_IMPORTED_MODULE_0__);


//# sourceMappingURL=bs58check.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/constants.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/constants.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AES_KEY_INFO: () => (/* binding */ AES_KEY_INFO),
/* harmony export */   HPKE_VERSION: () => (/* binding */ HPKE_VERSION),
/* harmony export */   IV_INFO: () => (/* binding */ IV_INFO),
/* harmony export */   LABEL_EAE_PRK: () => (/* binding */ LABEL_EAE_PRK),
/* harmony export */   LABEL_SECRET: () => (/* binding */ LABEL_SECRET),
/* harmony export */   LABEL_SHARED_SECRET: () => (/* binding */ LABEL_SHARED_SECRET),
/* harmony export */   PRODUCTION_NOTARIZER_PUBLIC_KEY: () => (/* binding */ PRODUCTION_NOTARIZER_PUBLIC_KEY),
/* harmony export */   PRODUCTION_SIGNER_PUBLIC_KEY: () => (/* binding */ PRODUCTION_SIGNER_PUBLIC_KEY),
/* harmony export */   SUITE_ID_1: () => (/* binding */ SUITE_ID_1),
/* harmony export */   SUITE_ID_2: () => (/* binding */ SUITE_ID_2)
/* harmony export */ });
const SUITE_ID_1 = new Uint8Array([75, 69, 77, 0, 16]); //KEM suite ID
const SUITE_ID_2 = new Uint8Array([72, 80, 75, 69, 0, 16, 0, 1, 0, 2]); //HPKE suite ID
const HPKE_VERSION = new Uint8Array([72, 80, 75, 69, 45, 118, 49]); //HPKE-v1
const LABEL_SECRET = new Uint8Array([115, 101, 99, 114, 101, 116]); //secret
const LABEL_EAE_PRK = new Uint8Array([101, 97, 101, 95, 112, 114, 107]); //eae_prk
const LABEL_SHARED_SECRET = new Uint8Array([
    115, 104, 97, 114, 101, 100, 95, 115, 101, 99, 114, 101, 116,
]); //shared_secret
const AES_KEY_INFO = new Uint8Array([
    0, 32, 72, 80, 75, 69, 45, 118, 49, 72, 80, 75, 69, 0, 16, 0, 1, 0, 2, 107,
    101, 121, 0, 143, 195, 174, 184, 50, 73, 10, 75, 90, 179, 228, 32, 35, 40,
    125, 178, 154, 31, 75, 199, 194, 34, 192, 223, 34, 135, 39, 183, 10, 64, 33,
    18, 47, 63, 4, 233, 32, 108, 209, 36, 19, 80, 53, 41, 180, 122, 198, 166, 48,
    185, 46, 196, 207, 125, 35, 69, 8, 208, 175, 151, 113, 201, 158, 80,
]); //key
const IV_INFO = new Uint8Array([
    0, 12, 72, 80, 75, 69, 45, 118, 49, 72, 80, 75, 69, 0, 16, 0, 1, 0, 2, 98, 97,
    115, 101, 95, 110, 111, 110, 99, 101, 0, 143, 195, 174, 184, 50, 73, 10, 75,
    90, 179, 228, 32, 35, 40, 125, 178, 154, 31, 75, 199, 194, 34, 192, 223, 34,
    135, 39, 183, 10, 64, 33, 18, 47, 63, 4, 233, 32, 108, 209, 36, 19, 80, 53,
    41, 180, 122, 198, 166, 48, 185, 46, 196, 207, 125, 35, 69, 8, 208, 175, 151,
    113, 201, 158, 80,
]); //base_nonce
const PRODUCTION_SIGNER_PUBLIC_KEY = "04cf288fe433cc4e1aa0ce1632feac4ea26bf2f5a09dcfe5a42c398e06898710330f0572882f4dbdf0f5304b8fc8703acd69adca9a4bbf7f5d00d20a5e364b2569";
const PRODUCTION_NOTARIZER_PUBLIC_KEY = "04d498aa87ac3bf982ac2b5dd9604d0074905cfbda5d62727c5a237b895e6749205e9f7cd566909c4387f6ca25c308445c60884b788560b785f4a96ac33702a469";


//# sourceMappingURL=constants.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/crypto.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/crypto.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildAdditionalAssociatedData: () => (/* binding */ buildAdditionalAssociatedData),
/* harmony export */   compressRawPublicKey: () => (/* binding */ compressRawPublicKey),
/* harmony export */   extractPrivateKeyFromPKCS8Bytes: () => (/* binding */ extractPrivateKeyFromPKCS8Bytes),
/* harmony export */   formatHpkeBuf: () => (/* binding */ formatHpkeBuf),
/* harmony export */   fromDerSignature: () => (/* binding */ fromDerSignature),
/* harmony export */   generateP256KeyPair: () => (/* binding */ generateP256KeyPair),
/* harmony export */   getPublicKey: () => (/* binding */ getPublicKey),
/* harmony export */   hpkeAuthEncrypt: () => (/* binding */ hpkeAuthEncrypt),
/* harmony export */   hpkeDecrypt: () => (/* binding */ hpkeDecrypt),
/* harmony export */   hpkeEncrypt: () => (/* binding */ hpkeEncrypt),
/* harmony export */   toDerSignature: () => (/* binding */ toDerSignature),
/* harmony export */   uncompressRawPublicKey: () => (/* binding */ uncompressRawPublicKey)
/* harmony export */ });
/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/p256 */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/p256.js");
/* harmony import */ var _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/hkdf */ "./node_modules/@noble/hashes/esm/hkdf.js");
/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ "./node_modules/@noble/hashes/esm/sha256.js");
/* harmony import */ var _noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/ciphers/aes */ "./node_modules/@noble/ciphers/esm/aes.js");
/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ "./node_modules/@noble/hashes/esm/utils.js");
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _math_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./math.mjs */ "./node_modules/@turnkey/crypto/dist/math.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/@turnkey/crypto/dist/constants.mjs");









/// <reference lib="dom" />
/**
 * Get PublicKey function
 * Derives public key from Uint8Array or hexstring private key
 *
 * @param {Uint8Array | string} privateKey - The Uint8Array or hexstring representation of a compressed private key.
 * @param {boolean} isCompressed - Specifies whether to return a compressed or uncompressed public key. Defaults to true.
 * @returns {Uint8Array} - The public key in Uin8Array representation.
 */
const getPublicKey = (privateKey, isCompressed = true) => {
    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.p256.getPublicKey(privateKey, isCompressed);
};
/**
 * HPKE Encrypt Function
 * Encrypts data using Hybrid Public Key Encryption (HPKE) standard https://datatracker.ietf.org/doc/rfc9180/.
 *
 * @param {HpkeEncryptParams} params - The encryption parameters including plain text, encapsulated key, and sender private key.
 * @returns {Uint8Array} - The encrypted data.
 */
const hpkeEncrypt = ({ plainTextBuf, targetKeyBuf, }) => {
    try {
        // Standard HPKE Mode (Ephemeral Key Pair)
        const ephemeralKeyPair = generateP256KeyPair();
        const senderPrivBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(ephemeralKeyPair.privateKey);
        const senderPubBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(ephemeralKeyPair.publicKeyUncompressed);
        const aad = buildAdditionalAssociatedData(senderPubBuf, targetKeyBuf);
        // Step 1: Generate Shared Secret
        const ss = deriveSS(targetKeyBuf, (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(senderPrivBuf));
        // Step 2: Generate the KEM context
        const kemContext = getKemContext(senderPubBuf, (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(targetKeyBuf));
        // Step 3: Build the HKDF inputs for key derivation
        let ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_EAE_PRK, ss, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1);
        let info = buildLabeledInfo(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SHARED_SECRET, kemContext, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1, 32);
        const sharedSecret = extractAndExpand(new Uint8Array([]), ikm, info, 32);
        // Step 4: Derive the AES key
        ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SECRET, new Uint8Array([]), _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_2);
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AES_KEY_INFO;
        const key = extractAndExpand(sharedSecret, ikm, info, 32);
        // Step 5: Derive the initialization vector
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.IV_INFO;
        const iv = extractAndExpand(sharedSecret, ikm, info, 12);
        // Step 6: Encrypt the data using AES-GCM
        const encryptedData = aesGcmEncrypt(plainTextBuf, key, iv, aad);
        // Step 7: Concatenate the encapsulated key and the encrypted data for output
        const compressedSenderBuf = compressRawPublicKey(senderPubBuf);
        const result = new Uint8Array(compressedSenderBuf.length + encryptedData.length);
        result.set(compressedSenderBuf, 0);
        result.set(encryptedData, compressedSenderBuf.length);
        return result;
    }
    catch (error) {
        throw new Error(`Unable to perform hpkeEncrypt: ${error}`);
    }
};
/**
 * HPKE Encrypt Function
 * Encrypts data using Authenticated ,Hybrid Public Key Encryption (HPKE) standard https://datatracker.ietf.org/doc/rfc9180/.
 *
 * @param {HpkeAuthEncryptParams} params - The encryption parameters including plain text, encapsulated key, and sender private key.
 * @returns {Uint8Array} - The encrypted data.
 */
const hpkeAuthEncrypt = ({ plainTextBuf, targetKeyBuf, senderPriv, }) => {
    try {
        // Authenticated HPKE Mode
        const senderPrivBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(senderPriv);
        const senderPubBuf = getPublicKey(senderPriv, false);
        const aad = buildAdditionalAssociatedData(senderPubBuf, targetKeyBuf);
        // Step 1: Generate Shared Secret
        const ss = deriveSS(targetKeyBuf, (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(senderPrivBuf));
        // Step 2: Generate the KEM context
        const kemContext = getKemContext(senderPubBuf, (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(targetKeyBuf));
        // Step 3: Build the HKDF inputs for key derivation
        let ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_EAE_PRK, ss, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1);
        let info = buildLabeledInfo(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SHARED_SECRET, kemContext, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1, 32);
        const sharedSecret = extractAndExpand(new Uint8Array([]), ikm, info, 32);
        // Step 4: Derive the AES key
        ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SECRET, new Uint8Array([]), _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_2);
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AES_KEY_INFO;
        const key = extractAndExpand(sharedSecret, ikm, info, 32);
        // Step 5: Derive the initialization vector
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.IV_INFO;
        const iv = extractAndExpand(sharedSecret, ikm, info, 12);
        // Step 6: Encrypt the data using AES-GCM
        const encryptedData = aesGcmEncrypt(plainTextBuf, key, iv, aad);
        // Step 7: Concatenate the encapsulated key and the encrypted data for output
        const compressedSenderBuf = compressRawPublicKey(senderPubBuf);
        const result = new Uint8Array(compressedSenderBuf.length + encryptedData.length);
        result.set(compressedSenderBuf, 0);
        result.set(encryptedData, compressedSenderBuf.length);
        return result;
    }
    catch (error) {
        throw new Error(`Unable to perform hpkeEncrypt: ${error}`);
    }
};
/**
 * Format HPKE Buffer Function
 * Returns a JSON string of an encrypted bundle, separating out the cipher text and the sender public key
 *
 * @param {Uint8Array} encryptedBuf - The result of hpkeAuthEncrypt or hpkeEncrypt
 * @returns {string} - A JSON string with "encappedPublic" and "ciphertext"
 */
const formatHpkeBuf = (encryptedBuf) => {
    const compressedSenderBuf = encryptedBuf.slice(0, 33);
    const encryptedData = encryptedBuf.slice(33);
    const encappedKeyBufHex = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(uncompressRawPublicKey(compressedSenderBuf));
    const ciphertextHex = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(encryptedData);
    return JSON.stringify({
        encappedPublic: encappedKeyBufHex,
        ciphertext: ciphertextHex,
    });
};
/**
 * HPKE Decrypt Function
 * Decrypts data using Hybrid Public Key Encryption (HPKE) standard https://datatracker.ietf.org/doc/rfc9180/.
 *
 * @param {HpkeDecryptParams} params - The decryption parameters including ciphertext, encapsulated key, and receiver private key.
 * @returns {Uint8Array} - The decrypted data.
 */
const hpkeDecrypt = ({ ciphertextBuf, encappedKeyBuf, receiverPriv, }) => {
    try {
        let ikm;
        let info;
        const receiverPubBuf = getPublicKey((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(receiverPriv), false);
        const aad = buildAdditionalAssociatedData(encappedKeyBuf, receiverPubBuf); // Eventually we want users to be able to pass in aad as optional
        // Step 1: Generate Shared Secret
        const ss = deriveSS(encappedKeyBuf, receiverPriv);
        // Step 2: Generate the KEM context
        const kemContext = getKemContext(encappedKeyBuf, (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(receiverPubBuf));
        // Step 3: Build the HKDF inputs for key derivation
        ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_EAE_PRK, ss, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1);
        info = buildLabeledInfo(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SHARED_SECRET, kemContext, _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_1, 32);
        const sharedSecret = extractAndExpand(new Uint8Array([]), ikm, info, 32);
        // Step 4: Derive the AES key
        ikm = buildLabeledIkm(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.LABEL_SECRET, new Uint8Array([]), _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.SUITE_ID_2);
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AES_KEY_INFO;
        const key = extractAndExpand(sharedSecret, ikm, info, 32);
        // Step 5: Derive the initialization vector
        info = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.IV_INFO;
        const iv = extractAndExpand(sharedSecret, ikm, info, 12);
        // Step 6: Decrypt the data using AES-GCM
        const decryptedData = aesGcmDecrypt(ciphertextBuf, key, iv, aad);
        return decryptedData;
    }
    catch (error) {
        throw new Error(`Unable to perform hpkeDecrypt: ${error} `);
    }
};
/**
 * Generate a P-256 key pair. Contains the hexed privateKey, publicKey, and Uncompressed publicKey
 *
 * @returns {KeyPair} - The generated key pair.
 */
const generateP256KeyPair = () => {
    const privateKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32);
    const publicKey = getPublicKey(privateKey, true);
    const publicKeyUncompressed = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(uncompressRawPublicKey(publicKey));
    return {
        privateKey: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(privateKey),
        publicKey: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(publicKey),
        publicKeyUncompressed,
    };
};
/**
 * Create additional associated data (AAD) for AES-GCM decryption.
 *
 * @param {Uint8Array} senderPubBuf
 * @param {Uint8Array} receiverPubBuf
 * @return {Uint8Array} - The resulting concatenation of sender and receiver pubkeys.
 */
const buildAdditionalAssociatedData = (senderPubBuf, receiverPubBuf) => {
    return new Uint8Array([
        ...Array.from(senderPubBuf),
        ...Array.from(receiverPubBuf),
    ]);
};
/**
 * Accepts a private key Uint8Array in the PKCS8 format, and returns the encapsulated private key.
 *
 * @param {Uint8Array} privateKey - A PKCS#8 private key structured with the key data at a specific position. The actual key starts at byte 36 and is 32 bytes long.
 * @return {Uint8Array} - The private key.
 */
const extractPrivateKeyFromPKCS8Bytes = (privateKey) => {
    return privateKey.slice(36, 36 + 32);
};
/**
 * Accepts a public key Uint8Array, and returns a Uint8Array with the compressed version of the public key.
 *
 * @param {Uint8Array} rawPublicKey - The raw public key.
 * @return {Uint8Array} – The compressed public key.
 */
const compressRawPublicKey = (rawPublicKey) => {
    const len = rawPublicKey.byteLength;
    // Drop the y coordinate
    // Uncompressed key is in the form 0x04||x||y
    // `len >>> 1` is a more concise way to write `floor(len/2)`
    var compressedBytes = rawPublicKey.slice(0, (1 + len) >>> 1);
    // Encode the parity of `y` in first bit
    // `BYTE & 0x01` tests for parity and returns 0x00 when even, or 0x01 when odd
    // Then `0x02 | <parity test result>` yields either 0x02 (even case) or 0x03 (odd).
    compressedBytes[0] = 0x02 | (rawPublicKey[len - 1] & 0x01);
    return compressedBytes;
};
/**
 * Accepts a public key array buffer, and returns a buffer with the uncompressed version of the public key
 * @param {Uint8Array} rawPublicKey - The public key.
 * @return {Uint8Array} - The uncompressed public key.
 */
const uncompressRawPublicKey = (rawPublicKey) => {
    if (rawPublicKey.length !== 33) {
        throw new Error("failed to uncompress raw public key: invalid length");
    }
    if (!(rawPublicKey[0] === 2 || rawPublicKey[0] === 3)) {
        throw new Error("failed to uncompress raw public key: invalid prefix");
    }
    // point[0] must be 2 (false) or 3 (true).
    // this maps to the initial "02" or "03" prefix
    const lsb = rawPublicKey[0] === 3;
    const x = BigInt("0x" + (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(rawPublicKey.subarray(1)));
    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).
    const p = BigInt("115792089210356248762697446949407573530086143415290314195533631308867097853951");
    const b = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b ");
    const a = p - BigInt(3);
    // Now compute y based on x
    const rhs = ((x * x + a) * x + b) % p;
    let y = (0,_math_mjs__WEBPACK_IMPORTED_MODULE_6__.modSqrt)(rhs, p);
    if (lsb !== (0,_math_mjs__WEBPACK_IMPORTED_MODULE_6__.testBit)(y, 0)) {
        y = (p - y) % p;
    }
    if (x < BigInt(0) || x >= p) {
        throw new Error("x is out of range");
    }
    if (y < BigInt(0) || y >= p) {
        throw new Error("y is out of range");
    }
    var uncompressedHexString = "04" + bigIntToHex(x, 64) + bigIntToHex(y, 64);
    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(uncompressedHexString);
};
/**
 * Build labeled Initial Key Material (IKM).
 *
 * @param {Uint8Array} label - The label to use.
 * @param {Uint8Array} ikm - The input key material.
 * @param {Uint8Array} suiteId - The suite identifier.
 * @returns {Uint8Array} - The labeled IKM.
 */
const buildLabeledIkm = (label, ikm, suiteId) => {
    const combinedLength = _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HPKE_VERSION.length + suiteId.length + label.length + ikm.length;
    const ret = new Uint8Array(combinedLength);
    let offset = 0;
    ret.set(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HPKE_VERSION, offset);
    offset += _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HPKE_VERSION.length;
    ret.set(suiteId, offset);
    offset += suiteId.length;
    ret.set(label, offset);
    offset += label.length;
    ret.set(ikm, offset);
    return ret;
};
/**
 * Build labeled info for HKDF operations.
 *
 * @param {Uint8Array} label - The label to use.
 * @param {Uint8Array} info - Additional information.
 * @param {Uint8Array} suiteId - The suite identifier.
 * @param {number} len - The output length.
 * @returns {Uint8Array} - The labeled info.
 */
const buildLabeledInfo = (label, info, suiteId, len) => {
    const suiteIdStartIndex = 9; // first two are reserved for length bytes (unused in this case), the next 7 are for the HPKE_VERSION, then the suiteId starts at 9
    const ret = new Uint8Array(suiteIdStartIndex + suiteId.byteLength + label.byteLength + info.byteLength);
    ret.set(new Uint8Array([0, len]), 0); // this isn’t an error, we’re starting at index 2 because the first two bytes should be 0. See <https://github.com/dajiaji/hpke-js/blob/1e7fb1372fbcdb6d06bf2f4fa27ff676329d633e/src/kdfs/hkdf.ts#L41> for reference.
    ret.set(_constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HPKE_VERSION, 2);
    ret.set(suiteId, suiteIdStartIndex);
    ret.set(label, suiteIdStartIndex + suiteId.byteLength);
    ret.set(info, suiteIdStartIndex + suiteId.byteLength + label.byteLength);
    return ret;
};
/**
 * Perform HKDF extract and expand operations.
 */
const extractAndExpand = (sharedSecret, ikm, info, len) => {
    const prk = _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_1__.extract(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256, ikm, sharedSecret);
    const resp = _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_1__.expand(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256, prk, info, len);
    return new Uint8Array(resp);
};
/**
 * Derive the Diffie-Hellman shared secret using ECDH.
 */
const deriveSS = (encappedKeyBuf, priv) => {
    const ss = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.p256.getSharedSecret((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(priv), encappedKeyBuf);
    return ss.slice(1);
};
/**
 * Encrypt data using AES-GCM.
 */
const aesGcmEncrypt = (plainTextData, key, iv, aad) => {
    const aes = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_3__.gcm)(key, iv, aad);
    const data = aes.encrypt(plainTextData);
    return data;
};
/**
 * Decrypt data using AES-GCM.
 */
const aesGcmDecrypt = (encryptedData, key, iv, aad) => {
    const aes = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_3__.gcm)(key, iv, aad);
    const data = aes.decrypt(encryptedData);
    return data;
};
/**
 * Generate a Key Encapsulation Mechanism (KEM) context.
 */
const getKemContext = (encappedKeyBuf, publicKey) => {
    const encappedKeyArray = new Uint8Array(encappedKeyBuf);
    const publicKeyArray = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(publicKey);
    const kemContext = new Uint8Array(encappedKeyArray.length + publicKeyArray.length);
    kemContext.set(encappedKeyArray);
    kemContext.set(publicKeyArray, encappedKeyArray.length);
    return kemContext;
};
/**
 * Convert a BigInt to a hexadecimal string of a specific length.
 */
const bigIntToHex = (num, length) => {
    const hexString = num.toString(16);
    if (hexString.length > length) {
        throw new Error(`number cannot fit in a hex string of ${length} characters`);
    }
    return hexString.padStart(length, "0");
};
/**
 * Converts an ASN.1 DER-encoded ECDSA signature to the raw format used for verification.
 *
 * @param {string} derSignature - The DER-encoded signature.
 * @returns {Uint8Array} - The raw signature.
 */
const fromDerSignature = (derSignature) => {
    const derSignatureBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(derSignature);
    // Check minimum length
    if (derSignatureBuf.length < 2) {
        throw new Error("failed to convert DER-encoded signature: insufficient length");
    }
    // Check SEQUENCE tag (0x30 at first byte)
    if (derSignatureBuf[0] !== 0x30) {
        throw new Error("failed to convert DER-encoded signature: invalid format (missing SEQUENCE tag)");
    }
    // Check second byte, start of length field
    let index = 1;
    const lengthByte = derSignatureBuf[index];
    if (lengthByte <= 0x7f) {
        // Short form: single byte length
        // directly take the consumed value as length and check against buffer
        // buffer length: initial header bytes + claimed remaining length
        if (derSignatureBuf.length < 1 + 1 + lengthByte) {
            throw new Error("failed to convert DER-encoded signature: inconsistent message length header");
        }
        // continue parsing
        index += 1;
    }
    else {
        // Multi-byte DER length header
        // Invalid DER values: lengthByte 0x80 and 0xff
        // Valid DER values: lengthByte > 0x80, < 0xff
        //
        // We do not expect signature data in the Long form notation
        // -> reject all such inputs
        //
        // More complex parsing for longer signature sequences can be implemented once needed
        throw new Error("failed to convert DER-encoded signature: unexpectedly large or invalid signature length");
    }
    // Parse 'r' and check for integer tag (0x02)
    if (derSignatureBuf[index] !== 0x02) {
        throw new Error("failed to convert DER-encoded signature: invalid tag for r");
    }
    index++; // Move past the INTEGER tag
    const rLength = derSignatureBuf[index];
    // Allow up to 32 data bytes + 1 byte 0-padding prefix
    if (rLength > 33) {
        throw new Error("failed to convert DER-encoded signature: unexpected length for r");
    }
    index++; // Move past the length byte
    const r = derSignatureBuf.slice(index, index + rLength);
    index += rLength; // Move to the start of s
    // Parse 's' and check for integer tag (0x02)
    if (derSignatureBuf[index] !== 0x02) {
        throw new Error("failed to convert DER-encoded signature: invalid tag for s");
    }
    index++; // Move past the INTEGER tag
    const sLength = derSignatureBuf[index];
    // Allow up to 32 data bytes + 1 byte 0-padding prefix
    if (sLength > 33) {
        throw new Error("failed to convert DER-encoded signature: unexpected length for s");
    }
    index++; // Move past the length byte
    const s = derSignatureBuf.slice(index, index + sLength);
    // Normalize 'r' and 's' to 32 bytes each
    const rPadded = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.normalizePadding)(r, 32);
    const sPadded = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.normalizePadding)(s, 32);
    // Concatenate and return the raw signature
    return new Uint8Array([...rPadded, ...sPadded]);
};
/**
 * Converts a raw ECDSA signature to DER-encoded format.
 *
 * This function takes a raw ECDSA signature, which is a concatenation of two 32-byte integers (r and s),
 * and converts it into the DER-encoded format. DER (Distinguished Encoding Rules) is a binary encoding
 * for data structures described by ASN.1.
 *
 * @param {string} rawSignature - The raw signature in hexadecimal string format.
 * @returns {string} - The DER-encoded signature in hexadecimal string format.
 *
 * @throws {Error} - Throws an error if the input signature is invalid or if the encoding process fails.
 *
 * @example
 * // Example usage:
 * const rawSignature = "0x487cdb8a88f2f4044b701cbb116075c4cabe5fe4657a6358b395c0aab70694db3453a8057e442bd1aff0ecabe8a82c831f0edd7f2158b7c1feb3de9b1f20309b1c";
 * const derSignature = toDerSignature(rawSignature);
 * console.log(derSignature); // Outputs the DER-encoded signature as a hex string
 * // "30440220487cdb8a88f2f4044b701cbb116075c4cabe5fe4657a6358b395c0aab70694db02203453a8057e442bd1aff0ecabe8a82c831f0edd7f2158b7c1feb3de9b1f20309b"
 */
const toDerSignature = (rawSignature) => {
    const rawSignatureBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayFromHexString)(rawSignature);
    // Split raw signature into r and s, each 32 bytes
    const r = rawSignatureBuf.slice(0, 32);
    const s = rawSignatureBuf.slice(32, 64);
    // Helper function to encode an integer with DER structure
    const encodeDerInteger = (integer) => {
        // Check if integer is defined and has at least one byte
        if (integer === undefined ||
            integer.length === 0 ||
            integer[0] === undefined) {
            throw new Error("Invalid integer: input is undefined or empty.");
        }
        // Add a leading zero if the integer's most significant byte is >= 0x80
        const needsPadding = integer[0] & 0x80;
        const paddedInteger = needsPadding
            ? new Uint8Array([0x00, ...integer])
            : integer;
        // Prepend the integer tag (0x02) and length
        return new Uint8Array([0x02, paddedInteger.length, ...paddedInteger]);
    };
    // DER encode r and s
    const rEncoded = encodeDerInteger(r);
    const sEncoded = encodeDerInteger(s);
    // Combine as a DER sequence: 0x30, total length, rEncoded, sEncoded
    const derSignature = new Uint8Array([
        0x30,
        rEncoded.length + sEncoded.length,
        ...rEncoded,
        ...sEncoded,
    ]);
    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_5__.uint8ArrayToHexString)(derSignature);
};


//# sourceMappingURL=crypto.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildAdditionalAssociatedData: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.buildAdditionalAssociatedData),
/* harmony export */   compressRawPublicKey: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.compressRawPublicKey),
/* harmony export */   decryptCredentialBundle: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.decryptCredentialBundle),
/* harmony export */   decryptExportBundle: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.decryptExportBundle),
/* harmony export */   encryptPrivateKeyToBundle: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.encryptPrivateKeyToBundle),
/* harmony export */   encryptWalletToBundle: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.encryptWalletToBundle),
/* harmony export */   extractPrivateKeyFromPKCS8Bytes: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.extractPrivateKeyFromPKCS8Bytes),
/* harmony export */   formatHpkeBuf: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.formatHpkeBuf),
/* harmony export */   fromDerSignature: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.fromDerSignature),
/* harmony export */   generateP256KeyPair: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.generateP256KeyPair),
/* harmony export */   getPublicKey: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.getPublicKey),
/* harmony export */   hpkeAuthEncrypt: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.hpkeAuthEncrypt),
/* harmony export */   hpkeDecrypt: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.hpkeDecrypt),
/* harmony export */   hpkeEncrypt: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.hpkeEncrypt),
/* harmony export */   toDerSignature: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.toDerSignature),
/* harmony export */   uncompressRawPublicKey: () => (/* reexport safe */ _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__.uncompressRawPublicKey),
/* harmony export */   verifySessionJwtSignature: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.verifySessionJwtSignature),
/* harmony export */   verifyStampSignature: () => (/* reexport safe */ _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__.verifyStampSignature)
/* harmony export */ });
/* harmony import */ var _crypto_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.mjs */ "./node_modules/@turnkey/crypto/dist/crypto.mjs");
/* harmony import */ var _turnkey_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./turnkey.mjs */ "./node_modules/@turnkey/crypto/dist/turnkey.mjs");


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/math.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/math.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   modSqrt: () => (/* binding */ modSqrt),
/* harmony export */   testBit: () => (/* binding */ testBit)
/* harmony export */ });
/**
 * Compute the modular square root using the Tonelli-Shanks algorithm.
 */
const modSqrt = (x, p) => {
    if (p <= BigInt(0)) {
        throw new Error("p must be positive");
    }
    const base = x % p;
    // Check if p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)
    if (testBit(p, 0) && testBit(p, 1)) {
        const q = (p + BigInt(1)) >> BigInt(2);
        const squareRoot = modPow(base, q, p);
        if ((squareRoot * squareRoot) % p !== base) {
            throw new Error("could not find a modular square root");
        }
        return squareRoot;
    }
    // Other elliptic curve types not supported
    throw new Error("unsupported modulus value");
};
/**
 * Test if a specific bit is set.
 */
const testBit = (n, i) => {
    const m = BigInt(1) << BigInt(i);
    return (n & m) !== BigInt(0);
};
/**
 * Compute the modular exponentiation.
 */
const modPow = (b, exp, p) => {
    if (exp === BigInt(0)) {
        return BigInt(1);
    }
    let result = b % p;
    const exponentBitString = exp.toString(2);
    for (let i = 1; i < exponentBitString.length; ++i) {
        result = (result * result) % p;
        if (exponentBitString[i] === "1") {
            result = (result * b) % p;
        }
    }
    return result;
};


//# sourceMappingURL=math.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/dist/turnkey.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/crypto/dist/turnkey.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decryptCredentialBundle: () => (/* binding */ decryptCredentialBundle),
/* harmony export */   decryptExportBundle: () => (/* binding */ decryptExportBundle),
/* harmony export */   encryptPrivateKeyToBundle: () => (/* binding */ encryptPrivateKeyToBundle),
/* harmony export */   encryptWalletToBundle: () => (/* binding */ encryptWalletToBundle),
/* harmony export */   verifySessionJwtSignature: () => (/* binding */ verifySessionJwtSignature),
/* harmony export */   verifyStampSignature: () => (/* binding */ verifyStampSignature)
/* harmony export */ });
/* harmony import */ var _bs58check_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bs58check.mjs */ "./node_modules/@turnkey/crypto/dist/bs58check.mjs");
/* harmony import */ var _bs58_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bs58.mjs */ "./node_modules/@turnkey/crypto/dist/bs58.mjs");
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/@turnkey/crypto/dist/constants.mjs");
/* harmony import */ var _crypto_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crypto.mjs */ "./node_modules/@turnkey/crypto/dist/crypto.mjs");
/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/p256 */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/p256.js");
/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/curves/ed25519 */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/ed25519.js");
/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/sha256 */ "./node_modules/@noble/hashes/esm/sha256.js");









/// <reference lib="dom" />
// Turnkey-specific cryptographic utilities
/**
 * Decrypt an encrypted email auth/recovery or oauth credential bundle.
 *
 * @param {string} credentialBundle - The encrypted credential bundle.
 * @param {string} embeddedKey - The private key for decryption.
 * @returns {string} - The decrypted data or null if decryption fails.
 * @throws {Error} - If unable to decrypt the credential bundle
 */
const decryptCredentialBundle = (credentialBundle, embeddedKey) => {
    try {
        const bundleBytes = _bs58check_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].decode(credentialBundle);
        if (bundleBytes.byteLength <= 33) {
            throw new Error(`Bundle size ${bundleBytes.byteLength} is too low. Expecting a compressed public key (33 bytes) and an encrypted credential.`);
        }
        const compressedEncappedKeyBuf = bundleBytes.slice(0, 33);
        const ciphertextBuf = bundleBytes.slice(33);
        const encappedKeyBuf = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.uncompressRawPublicKey)(compressedEncappedKeyBuf);
        const decryptedData = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.hpkeDecrypt)({
            ciphertextBuf,
            encappedKeyBuf,
            receiverPriv: embeddedKey,
        });
        return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToHexString)(decryptedData);
    }
    catch (error) {
        throw new Error(`"Error decrypting bundle:", ${error}`);
    }
};
/**
 * Decrypt an encrypted export bundle (such as a private key or wallet account bundle).
 *
 * This function verifies the enclave signature to ensure the authenticity of the encrypted data.
 * It uses HPKE (Hybrid Public Key Encryption) to decrypt the contents of the bundle and returns
 * either the decrypted mnemonic or the decrypted data in hexadecimal format, based on the
 * `returnMnemonic` flag.
 *
 * @param {DecryptExportBundleParams} params - An object containing the following properties:
 *   - exportBundle {string}: The encrypted export bundle in JSON format.
 *   - organizationId {string}: The expected organization ID to verify against the signed data.
 *   - embeddedKey {string}: The private key used for decrypting the data.
 *   - dangerouslyOverrideSignerPublicKey {string} [Optional]: Optionally override the default signer public key used for verifying the signature. This should only be done for testing
 *   - returnMnemonic {boolean}: If true, returns the decrypted data as a mnemonic string; otherwise, returns it in hexadecimal format.
 * @returns {Promise<string>} - A promise that resolves to the decrypted mnemonic or decrypted hexadecimal data.
 * @throws {Error} - If decryption or signature verification fails, throws an error with details.
 */
const decryptExportBundle = async ({ exportBundle, embeddedKey, organizationId, dangerouslyOverrideSignerPublicKey, keyFormat, returnMnemonic, }) => {
    try {
        const parsedExportBundle = JSON.parse(exportBundle);
        const verified = await verifyEnclaveSignature(parsedExportBundle.enclaveQuorumPublic, parsedExportBundle.dataSignature, parsedExportBundle.data, dangerouslyOverrideSignerPublicKey);
        if (!verified) {
            throw new Error(`failed to verify enclave signature: ${parsedExportBundle}`);
        }
        const signedData = JSON.parse(new TextDecoder().decode((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(parsedExportBundle.data)));
        if (!signedData.organizationId ||
            signedData.organizationId !== organizationId) {
            throw new Error(`organization id does not match expected value. Expected: ${organizationId}. Found: ${signedData.organizationId}.`);
        }
        if (!signedData.encappedPublic) {
            throw new Error('missing "encappedPublic" in bundle signed data');
        }
        const encappedKeyBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(signedData.encappedPublic);
        const ciphertextBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(signedData.ciphertext);
        const decryptedData = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.hpkeDecrypt)({
            ciphertextBuf,
            encappedKeyBuf,
            receiverPriv: embeddedKey,
        });
        if (keyFormat === "SOLANA" && !returnMnemonic) {
            if (decryptedData.length !== 32) {
                throw new Error(`invalid private key length. Expected 32 bytes. Got ${decryptedData.length}.`);
            }
            const publicKeyBytes = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_6__.ed25519.getPublicKey(decryptedData);
            if (publicKeyBytes.length !== 32) {
                throw new Error(`invalid public key length. Expected 32 bytes. Got ${publicKeyBytes.length}.`);
            }
            const concatenatedBytes = new Uint8Array(64);
            concatenatedBytes.set(decryptedData, 0);
            concatenatedBytes.set(publicKeyBytes, 32);
            return _bs58_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].encode(concatenatedBytes);
        }
        const decryptedDataHex = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToHexString)(decryptedData);
        return returnMnemonic ? (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.hexToAscii)(decryptedDataHex) : decryptedDataHex;
    }
    catch (error) {
        throw new Error(`Error decrypting bundle: ${error}`);
    }
};
/**
 * Verifies a signature from a Turnkey stamp using ECDSA and SHA-256.
 *
 * @param {string} publicKey - The public key of the authenticator (e.g. WebAuthn or P256 API key).
 * @param {string} signature - The ECDSA signature in DER format.
 * @param {string} signedData - The data that was signed (e.g. JSON-stringified Turnkey request body).
 * @returns {Promise<boolean>} - Returns true if the signature is valid, otherwise throws an error.
 *
 * @example
 *
 * const stampedRequest = await turnkeyClient.stampGetWhoami(...);
 * const decodedStampContents = atob(stampedRequest.stamp.stampHeaderValue);
 * const parsedStampContents = JSON.parse(decodedStampContents);
 * const signature = parsedStampContents.signature;
 *
 * await verifyStampSignature(publicKey, signature, stampedRequest.body)
 */
const verifyStampSignature = async (publicKey, signature, signedData) => {
    const publicKeyBuffer = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(publicKey);
    const loadedPublicKey = loadPublicKey(publicKeyBuffer);
    if (!loadedPublicKey) {
        throw new Error("failed to load public key");
    }
    // Convert the ASN.1 DER-encoded signature for verification
    const publicSignatureBuf = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.fromDerSignature)(signature);
    const signedDataBuf = new TextEncoder().encode(signedData);
    const hashedData = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(signedDataBuf);
    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_5__.p256.verify(publicSignatureBuf, hashedData, loadedPublicKey.toHex());
};
/**
 * Verifies a signature from a Turnkey enclave using ECDSA and SHA-256.
 *
 * @param {string} enclaveQuorumPublic - The public key of the enclave signer.
 * @param {string} publicSignature - The ECDSA signature in DER format.
 * @param {string} signedData - The data that was signed.
 * @param {Environment} dangerouslyOverrideSignerPublicKey - (optional) an enum (PROD or PREPROD) to verify against the correct signer enclave key.
 * @returns {Promise<boolean>} - Returns true if the signature is valid, otherwise throws an error.
 */
const verifyEnclaveSignature = async (enclaveQuorumPublic, publicSignature, signedData, dangerouslyOverrideSignerPublicKey) => {
    const expectedSignerPublicKey = dangerouslyOverrideSignerPublicKey || _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.PRODUCTION_SIGNER_PUBLIC_KEY;
    if (enclaveQuorumPublic != expectedSignerPublicKey) {
        throw new Error(`expected signer key ${dangerouslyOverrideSignerPublicKey ?? _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.PRODUCTION_SIGNER_PUBLIC_KEY} does not match signer key from bundle: ${enclaveQuorumPublic}`);
    }
    const encryptionQuorumPublicBuf = new Uint8Array((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(enclaveQuorumPublic));
    const quorumKey = loadPublicKey(encryptionQuorumPublicBuf);
    if (!quorumKey) {
        throw new Error("failed to load quorum key");
    }
    // Convert the ASN.1 DER-encoded signature for verification
    const publicSignatureBuf = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.fromDerSignature)(publicSignature);
    const signedDataBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(signedData);
    const hashedData = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(signedDataBuf);
    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_5__.p256.verify(publicSignatureBuf, hashedData, quorumKey.toHex());
};
/**
 * Loads an ECDSA public key from a raw format for signature verification.
 *
 * @param {Uint8Array} publicKey - The raw P-256 public key bytes.
 * @returns {ProjPointType<bigint>} - The parsed ECDSA public key.
 * @throws {Error} - If the public key is invalid.
 */
const loadPublicKey = (publicKey) => {
    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_5__.p256.ProjectivePoint.fromHex((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToHexString)(publicKey));
};
/**
 * Decodes a private key based on the specified format.
 *
 * @param {string} privateKey - The private key to decode.
 * @param {string} keyFormat - The format of the private key (e.g., "SOLANA", "HEXADECIMAL").
 * @returns {Uint8Array} - The decoded private key.
 */
const decodeKey = (privateKey, keyFormat) => {
    switch (keyFormat) {
        case "SOLANA":
            const decodedKeyBytes = _bs58_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].decode(privateKey);
            if (decodedKeyBytes.length !== 64) {
                throw new Error(`invalid key length. Expected 64 bytes. Got ${decodedKeyBytes.length}.`);
            }
            return decodedKeyBytes.subarray(0, 32);
        case "HEXADECIMAL":
            if (privateKey.startsWith("0x")) {
                return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(privateKey.slice(2));
            }
            return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(privateKey);
        default:
            console.warn(`invalid key format: ${keyFormat}. Defaulting to HEXADECIMAL.`);
            if (privateKey.startsWith("0x")) {
                return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(privateKey.slice(2));
            }
            return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(privateKey);
    }
};
/**
 * Encrypts a private key bundle using HPKE and verifies the enclave signature.
 *
 * @param {EncryptPrivateKeyToBundleParams} params - An object containing the private key, key format, bundle, user, and organization details. Optionally, you can override the default signer key (for testing purposes)
 * @returns {Promise<string>} - A promise that resolves to a JSON string representing the encrypted bundle.
 * @throws {Error} - If enclave signature verification or any other validation fails.
 */
const encryptPrivateKeyToBundle = async ({ privateKey, keyFormat, importBundle, userId, organizationId, dangerouslyOverrideSignerPublicKey, }) => {
    const parsedImportBundle = JSON.parse(importBundle);
    const plainTextBuf = decodeKey(privateKey, keyFormat);
    const verified = await verifyEnclaveSignature(parsedImportBundle.enclaveQuorumPublic, parsedImportBundle.dataSignature, parsedImportBundle.data, dangerouslyOverrideSignerPublicKey);
    if (!verified) {
        throw new Error(`failed to verify enclave signature: ${importBundle}`);
    }
    const signedData = JSON.parse(new TextDecoder().decode((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(parsedImportBundle.data)));
    if (!signedData.organizationId ||
        signedData.organizationId !== organizationId) {
        throw new Error(`organization id does not match expected value. Expected: ${organizationId}. Found: ${signedData.organizationId}.`);
    }
    if (!signedData.userId || signedData.userId !== userId) {
        throw new Error(`user id does not match expected value. Expected: ${userId}. Found: ${signedData.userId}.`);
    }
    if (!signedData.targetPublic) {
        throw new Error('missing "targetPublic" in bundle signed data');
    }
    // Load target public key generated from enclave
    const targetKeyBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(signedData.targetPublic);
    const privateKeyBundle = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.hpkeEncrypt)({ plainTextBuf, targetKeyBuf });
    return (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.formatHpkeBuf)(privateKeyBundle);
};
/**
  /**
   * Encrypts a mnemonic wallet bundle using HPKE and verifies the enclave signature.
   *
   * @param {EncryptWalletToBundleParams} params - An object containing the mnemonic, bundle, user, and organization details. Optionally, you can override the default signer key (for testing purposes).
   * @returns {Promise<string>} - A promise that resolves to a JSON string representing the encrypted wallet bundle.
   * @throws {Error} - If enclave signature verification or any other validation fails.
   */
const encryptWalletToBundle = async ({ mnemonic, importBundle, userId, organizationId, dangerouslyOverrideSignerPublicKey, }) => {
    const parsedImportBundle = JSON.parse(importBundle);
    const plainTextBuf = new TextEncoder().encode(mnemonic);
    const verified = await verifyEnclaveSignature(parsedImportBundle.enclaveQuorumPublic, parsedImportBundle.dataSignature, parsedImportBundle.data, dangerouslyOverrideSignerPublicKey);
    if (!verified) {
        throw new Error(`failed to verify enclave signature: ${importBundle}`);
    }
    const signedData = JSON.parse(new TextDecoder().decode((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(parsedImportBundle.data)));
    if (!signedData.organizationId ||
        signedData.organizationId !== organizationId) {
        throw new Error(`organization id does not match expected value. Expected: ${organizationId}. Found: ${signedData.organizationId}.`);
    }
    if (!signedData.userId || signedData.userId !== userId) {
        throw new Error(`user id does not match expected value. Expected: ${userId}. Found: ${signedData.userId}.`);
    }
    if (!signedData.targetPublic) {
        throw new Error('missing "targetPublic" in bundle signed data');
    }
    // Load target public key generated from enclave
    const targetKeyBuf = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(signedData.targetPublic);
    const privateKeyBundle = (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.hpkeEncrypt)({ plainTextBuf, targetKeyBuf });
    return (0,_crypto_mjs__WEBPACK_IMPORTED_MODULE_4__.formatHpkeBuf)(privateKeyBundle);
};
/**
 * Verifies that a **session JWT** was signed by Turnkey’s
 * notarizer key (P-256 / ES256, compact 64-byte r‖s signature).
 *
 * How it works
 * ------------
 * 1.  Split the JWT into `header.payload.signature`.
 * 2.  **Double-hash** the string `"header.payload"`:
 *        `h1 = sha256(header.payload)`
 *        `msg = sha256(h1)`
 *     (The Rust signer feeds `h1` into `SigningKey::sign`, which hashes once
 *     more internally, yielding `msg`.)
 * 3.  Base64-URL-decode the signature (`r||s`, 64 bytes).
 * 4.  Import the notarizer public key (hex `04‖X‖Y` → `Uint8Array`).
 * 5.  Call `p256.verify(signature, msg, publicKey)`; noble treats the 32-byte
 *     `msg` as a pre-hashed digest and performs ECDSA verification.
 *
 * @param jwt   The session JWT to validate.
 * @param dangerouslyOverrideNotarizerPublicKey *(optional)* Hex-encoded
 *              uncompressed P-256 public key to verify against (use only in
 *              tests).  Defaults to the production notarizer key.
 * @returns `true` if the signature is valid for the given key, else `false`.
 * @throws  If the JWT is malformed.
 */
const verifySessionJwtSignature = async (jwt, dangerouslyOverrideNotarizerPublicKey) => {
    const notarizerKeyHex = dangerouslyOverrideNotarizerPublicKey ?? _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.PRODUCTION_NOTARIZER_PUBLIC_KEY;
    /* 1. split JWT -------------------------------------------------------- */
    const [headerB64, payloadB64, signatureB64] = jwt.split(".");
    if (!signatureB64)
        throw new Error("invalid JWT: need 3 parts");
    const signingInput = `${headerB64}.${payloadB64}`;
    /* 2. sha256(sha256(header.payload)) ----------------------------------- */
    const h1 = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(new TextEncoder().encode(signingInput));
    const msgDigest = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(h1); // 32-byte Uint8Array
    /* 3. base64-url decode signature -------------------------------------- */
    const toB64 = (u) => (u = u.replace(/-/g, "+").replace(/_/g, "/")).padEnd(u.length + ((4 - (u.length % 4)) % 4), "=");
    const signature = Uint8Array.from(atob(toB64(signatureB64))
        .split("")
        .map((c) => c.charCodeAt(0))); // 64 bytes
    /* 4. load public key -------------------------------------------------- */
    const publicKey = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayFromHexString)(notarizerKeyHex);
    /* 5. verify ----------------------------------------------------------- */
    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_5__.p256.verify(signature, msgDigest, publicKey);
};


//# sourceMappingURL=turnkey.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCurve: () => (/* binding */ createCurve),
/* harmony export */   getHash: () => (/* binding */ getHash)
/* harmony export */ });
/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ "./node_modules/@noble/hashes/esm/hmac.js");
/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ "./node_modules/@noble/hashes/esm/utils.js");
/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/weierstrass.js");
/**
 * Utilities for short weierstrass curves, combined with noble-hashes.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */



/** connects noble-curves to noble-hashes */
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),
        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,
    };
}
function createCurve(curveDef, defHash) {
    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });
    return { ...create(defHash), create };
}
//# sourceMappingURL=_shortw_utils.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/curve.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pippenger: () => (/* binding */ pippenger),
/* harmony export */   precomputeMSMUnsafe: () => (/* binding */ precomputeMSMUnsafe),
/* harmony export */   validateBasic: () => (/* binding */ validateBasic),
/* harmony export */   wNAF: () => (/* binding */ wNAF)
/* harmony export */ });
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * Methods for elliptic curve multiplication by scalars.
 * Contains wNAF, pippenger
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */


const _0n = BigInt(0);
const _1n = BigInt(1);
function constTimeNegate(condition, item) {
    const neg = item.negate();
    return condition ? neg : item;
}
function validateW(W, bits) {
    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);
}
function calcWOpts(W, scalarBits) {
    validateW(W, scalarBits);
    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero
    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero
    const maxNumber = 2 ** W; // W=8 256
    const mask = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(W); // W=8 255 == mask 0b11111111
    const shiftBy = BigInt(W); // W=8 8
    return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets(n, window, wOpts) {
    const { windowSize, mask, maxNumber, shiftBy } = wOpts;
    let wbits = Number(n & mask); // extract W bits.
    let nextN = n >> shiftBy; // shift number by W bits.
    // What actually happens here:
    // const highestBit = Number(mask ^ (mask >> 1n));
    // let wbits2 = wbits - 1; // skip zero
    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);
    // split if bits > max: +224 => 256-32
    if (wbits > windowSize) {
        // we skip zero, which means instead of `>= size-1`, we do `> size`
        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.
        nextN += _1n; // +256 (carry)
    }
    const offsetStart = window * windowSize;
    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero
    const isZero = wbits === 0; // is current window slice a 0?
    const isNeg = wbits < 0; // is current window slice negative?
    const isNegF = window % 2 !== 0; // fake random statement for noise
    const offsetF = offsetStart; // fake offset for noise
    return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints(points, c) {
    if (!Array.isArray(points))
        throw new Error('array expected');
    points.forEach((p, i) => {
        if (!(p instanceof c))
            throw new Error('invalid point at index ' + i);
    });
}
function validateMSMScalars(scalars, field) {
    if (!Array.isArray(scalars))
        throw new Error('array of scalars expected');
    scalars.forEach((s, i) => {
        if (!field.isValid(s))
            throw new Error('invalid scalar at index ' + i);
    });
}
// Since points in different groups cannot be equal (different object constructor),
// we can have single place to store precomputes.
// Allows to make points frozen / immutable.
const pointPrecomputes = new WeakMap();
const pointWindowSizes = new WeakMap();
function getW(P) {
    return pointWindowSizes.get(P) || 1;
}
/**
 * Elliptic curve multiplication of Point by scalar. Fragile.
 * Scalars should always be less than curve order: this should be checked inside of a curve itself.
 * Creates precomputation tables for fast multiplication:
 * - private scalar is split by fixed size windows of W bits
 * - every window point is collected from window's table & added to accumulator
 * - since windows are different, same point inside tables won't be accessed more than once per calc
 * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
 * - +1 window is neccessary for wNAF
 * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
 *
 * @todo Research returning 2d JS array of windows, instead of a single window.
 * This would allow windows to be in different memory locations
 */
function wNAF(c, bits) {
    return {
        constTimeNegate,
        hasPrecomputes(elm) {
            return getW(elm) !== 1;
        },
        // non-const time multiplication ladder
        unsafeLadder(elm, n, p = c.ZERO) {
            let d = elm;
            while (n > _0n) {
                if (n & _1n)
                    p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @param elm Point instance
         * @param W window size
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
            const { windows, windowSize } = calcWOpts(W, bits);
            const points = [];
            let p = elm;
            let base = p;
            for (let window = 0; window < windows; window++) {
                base = p;
                points.push(base);
                // i=1, bc we skip 0
                for (let i = 1; i < windowSize; i++) {
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
            // Smaller version:
            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541
            // TODO: check the scalar is less than group order?
            // wNAF behavior is undefined otherwise. But have to carefully remove
            // other checks before wNAF. ORDER == bits here.
            // Accumulators
            let p = c.ZERO;
            let f = c.BASE;
            // This code was first written with assumption that 'f' and 'p' will never be infinity point:
            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
            // there is negate now: it is possible that negated element from low value
            // would be the same as high element, which will create carry into next window.
            // It's not obvious how this can fail, but still worth investigating later.
            const wo = calcWOpts(W, bits);
            for (let window = 0; window < wo.windows; window++) {
                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise
                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);
                n = nextN;
                if (isZero) {
                    // bits are 0: add garbage to fake point
                    // Important part for const-time getPublicKey: add random "noise" point to f.
                    f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));
                }
                else {
                    // bits are 1: add to result point
                    p = p.add(constTimeNegate(isNeg, precomputes[offset]));
                }
            }
            // Return both real and fake points: JIT won't eliminate f.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return { p, f };
        },
        /**
         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @param acc accumulator point to add result of multiplication
         * @returns point
         */
        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {
            const wo = calcWOpts(W, bits);
            for (let window = 0; window < wo.windows; window++) {
                if (n === _0n)
                    break; // Early-exit, skip 0 value
                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);
                n = nextN;
                if (isZero) {
                    // Window bits are 0: skip processing.
                    // Move to next window.
                    continue;
                }
                else {
                    const item = precomputes[offset];
                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM
                }
            }
            return acc;
        },
        getPrecomputes(W, P, transform) {
            // Calculate precomputes on a first run, reuse them after
            let comp = pointPrecomputes.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1)
                    pointPrecomputes.set(P, transform(comp));
            }
            return comp;
        },
        wNAFCached(P, n, transform) {
            const W = getW(P);
            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);
        },
        wNAFCachedUnsafe(P, n, transform, prev) {
            const W = getW(P);
            if (W === 1)
                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster
            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);
        },
        // We calculate precomputes for elliptic curve point multiplication
        // using windowed method. This specifies window size and
        // stores precomputed values. Usually only base point would be precomputed.
        setWindowSize(P, W) {
            validateW(W, bits);
            pointWindowSizes.set(P, W);
            pointPrecomputes.delete(P);
        },
    };
}
/**
 * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).
 * 30x faster vs naive addition on L=4096, 10x faster than precomputes.
 * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.
 * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.
 * @param c Curve Point constructor
 * @param fieldN field over CURVE.N - important that it's not over CURVE.P
 * @param points array of L curve points
 * @param scalars array of L scalars (aka private keys / bigints)
 */
function pippenger(c, fieldN, points, scalars) {
    // If we split scalars by some window (let's say 8 bits), every chunk will only
    // take 256 buckets even if there are 4096 scalars, also re-uses double.
    // TODO:
    // - https://eprint.iacr.org/2024/750.pdf
    // - https://tches.iacr.org/index.php/TCHES/article/view/10287
    // 0 is accepted in scalars
    validateMSMPoints(points, c);
    validateMSMScalars(scalars, fieldN);
    if (points.length !== scalars.length)
        throw new Error('arrays of points and scalars must have equal length');
    const zero = c.ZERO;
    const wbits = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitLen)(BigInt(points.length));
    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits
    const MASK = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(windowSize);
    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array
    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
    let sum = zero;
    for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(zero);
        for (let j = 0; j < scalars.length; j++) {
            const scalar = scalars[j];
            const wbits = Number((scalar >> BigInt(i)) & MASK);
            buckets[wbits] = buckets[wbits].add(points[j]);
        }
        let resI = zero; // not using this will do small speed-up, but will lose ct
        // Skip first bucket, because it is zero
        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
            sumI = sumI.add(buckets[j]);
            resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
            for (let j = 0; j < windowSize; j++)
                sum = sum.double();
    }
    return sum;
}
/**
 * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).
 * @param c Curve Point constructor
 * @param fieldN field over CURVE.N - important that it's not over CURVE.P
 * @param points array of L curve points
 * @returns function which multiplies points with scaars
 */
function precomputeMSMUnsafe(c, fieldN, points, windowSize) {
    /**
     * Performance Analysis of Window-based Precomputation
     *
     * Base Case (256-bit scalar, 8-bit window):
     * - Standard precomputation requires:
     *   - 31 additions per scalar × 256 scalars = 7,936 ops
     *   - Plus 255 summary additions = 8,191 total ops
     *   Note: Summary additions can be optimized via accumulator
     *
     * Chunked Precomputation Analysis:
     * - Using 32 chunks requires:
     *   - 255 additions per chunk
     *   - 256 doublings
     *   - Total: (255 × 32) + 256 = 8,416 ops
     *
     * Memory Usage Comparison:
     * Window Size | Standard Points | Chunked Points
     * ------------|-----------------|---------------
     *     4-bit   |     520         |      15
     *     8-bit   |    4,224        |     255
     *    10-bit   |   13,824        |   1,023
     *    16-bit   |  557,056        |  65,535
     *
     * Key Advantages:
     * 1. Enables larger window sizes due to reduced memory overhead
     * 2. More efficient for smaller scalar counts:
     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops
     *    - ~2x faster than standard 8,191 ops
     *
     * Limitations:
     * - Not suitable for plain precomputes (requires 256 constant doublings)
     * - Performance degrades with larger scalar counts:
     *   - Optimal for ~256 scalars
     *   - Less efficient for 4096+ scalars (Pippenger preferred)
     */
    validateW(windowSize, fieldN.BITS);
    validateMSMPoints(points, c);
    const zero = c.ZERO;
    const tableSize = 2 ** windowSize - 1; // table size (without zero)
    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item
    const MASK = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(windowSize);
    const tables = points.map((p) => {
        const res = [];
        for (let i = 0, acc = p; i < tableSize; i++) {
            res.push(acc);
            acc = acc.add(p);
        }
        return res;
    });
    return (scalars) => {
        validateMSMScalars(scalars, fieldN);
        if (scalars.length > points.length)
            throw new Error('array of scalars must be smaller than array of points');
        let res = zero;
        for (let i = 0; i < chunks; i++) {
            // No need to double if accumulator is still zero.
            if (res !== zero)
                for (let j = 0; j < windowSize; j++)
                    res = res.double();
            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);
            for (let j = 0; j < scalars.length; j++) {
                const n = scalars[j];
                const curr = Number((n >> shiftBy) & MASK);
                if (!curr)
                    continue; // skip zero scalars chunks
                res = res.add(tables[j][curr - 1]);
            }
        }
        return res;
    };
}
function validateBasic(curve) {
    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {
        n: 'bigint',
        h: 'bigint',
        Gx: 'field',
        Gy: 'field',
    }, {
        nBitLength: 'isSafeInteger',
        nByteLength: 'isSafeInteger',
    });
    // Set defaults
    return Object.freeze({
        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER },
    });
}
//# sourceMappingURL=curve.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/edwards.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/edwards.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   twistedEdwards: () => (/* binding */ twistedEdwards)
/* harmony export */ });
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/curve.js");
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².
 * For design rationale of types / exports, see weierstrass module documentation.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// prettier-ignore


// prettier-ignore

// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);
// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:
const VERIFY_DEFAULT = { zip215: true };
function validateOpts(curve) {
    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.validateObject)(curve, {
        hash: 'function',
        a: 'bigint',
        d: 'bigint',
        randomBytes: 'function',
    }, {
        adjustScalarBytes: 'function',
        domain: 'function',
        uvRatio: 'function',
        mapToCurve: 'function',
    });
    // Set defaults
    return Object.freeze({ ...opts });
}
/**
 * Creates Twisted Edwards curve with EdDSA signatures.
 * @example
 * import { Field } from '@noble/curves/abstract/modular';
 * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h
 * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })
 */
function twistedEdwards(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;
    // Important:
    // There are some places where Fp.BYTES is used instead of nByteLength.
    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.
    // TODO: test and find curves which behave otherwise.
    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);
    const modP = Fp.create; // Function overrides
    const Fn = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.Field)(CURVE.n, CURVE.nBitLength);
    // sqrt(u/v)
    const uvRatio = CURVE.uvRatio ||
        ((u, v) => {
            try {
                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };
            }
            catch (e) {
                return { isValid: false, value: _0n };
            }
        });
    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP
    const domain = CURVE.domain ||
        ((data, ctx, phflag) => {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('phflag', phflag);
            if (ctx.length || phflag)
                throw new Error('Contexts/pre-hash are not supported');
            return data;
        }); // NOOP
    // 0 <= n < MASK
    // Coordinates larger than Fp.ORDER are allowed for zip215
    function aCoordinate(title, n, banZero = false) {
        const min = banZero ? _1n : _0n;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('coordinate ' + title, n, min, MASK);
    }
    function aextpoint(other) {
        if (!(other instanceof Point))
            throw new Error('ExtendedPoint expected');
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    const toAffineMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.memoized)((p, iz) => {
        const { ex: x, ey: y, ez: z } = p;
        const is0 = p.is0();
        if (iz == null)
            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily
        const ax = modP(x * iz);
        const ay = modP(y * iz);
        const zz = modP(z * iz);
        if (is0)
            return { x: _0n, y: _1n };
        if (zz !== _1n)
            throw new Error('invZ was invalid');
        return { x: ax, y: ay };
    });
    const assertValidMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.memoized)((p) => {
        const { a, d } = CURVE;
        if (p.is0())
            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?
        // Equation in affine coordinates: ax² + y² = 1 + dx²y²
        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²
        const { ex: X, ey: Y, ez: Z, et: T } = p;
        const X2 = modP(X * X); // X²
        const Y2 = modP(Y * Y); // Y²
        const Z2 = modP(Z * Z); // Z²
        const Z4 = modP(Z2 * Z2); // Z⁴
        const aX2 = modP(X2 * a); // aX²
        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²
        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²
        if (left !== right)
            throw new Error('bad point: equation left != right (1)');
        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T
        const XY = modP(X * Y);
        const ZT = modP(Z * T);
        if (XY !== ZT)
            throw new Error('bad point: equation left != right (2)');
        return true;
    });
    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates
    class Point {
        constructor(ex, ey, ez, et) {
            aCoordinate('x', ex);
            aCoordinate('y', ey);
            aCoordinate('z', ez, true);
            aCoordinate('t', et);
            this.ex = ex;
            this.ey = ey;
            this.ez = ez;
            this.et = et;
            Object.freeze(this);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        static fromAffine(p) {
            if (p instanceof Point)
                throw new Error('extended point not allowed');
            const { x, y } = p || {};
            aCoordinate('x', x);
            aCoordinate('y', y);
            return new Point(x, y, _1n, modP(x * y));
        }
        static normalizeZ(points) {
            const toInv = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.FpInvertBatch)(Fp, points.map((p) => p.ez));
            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
            return (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.pippenger)(Point, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            wnaf.setWindowSize(this, windowSize);
        }
        // Not required for fromHex(), which always creates valid points.
        // Could be useful for fromAffine().
        assertValidity() {
            assertValidMemo(this);
        }
        // Compare one point to another.
        equals(other) {
            aextpoint(other);
            const { ex: X1, ey: Y1, ez: Z1 } = this;
            const { ex: X2, ey: Y2, ez: Z2 } = other;
            const X1Z2 = modP(X1 * Z2);
            const X2Z1 = modP(X2 * Z1);
            const Y1Z2 = modP(Y1 * Z2);
            const Y2Z1 = modP(Y2 * Z1);
            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        negate() {
            // Flips point sign to a negative one (-x, y in affine coords)
            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
        }
        // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.
        double() {
            const { a } = CURVE;
            const { ex: X1, ey: Y1, ez: Z1 } = this;
            const A = modP(X1 * X1); // A = X12
            const B = modP(Y1 * Y1); // B = Y12
            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12
            const D = modP(a * A); // D = a*A
            const x1y1 = X1 + Y1;
            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B
            const G = D + B; // G = D+B
            const F = G - C; // F = G-C
            const H = D - B; // H = D-B
            const X3 = modP(E * F); // X3 = E*F
            const Y3 = modP(G * H); // Y3 = G*H
            const T3 = modP(E * H); // T3 = E*H
            const Z3 = modP(F * G); // Z3 = F*G
            return new Point(X3, Y3, Z3, T3);
        }
        // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.
        add(other) {
            aextpoint(other);
            const { a, d } = CURVE;
            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
            const A = modP(X1 * X2); // A = X1*X2
            const B = modP(Y1 * Y2); // B = Y1*Y2
            const C = modP(T1 * d * T2); // C = T1*d*T2
            const D = modP(Z1 * Z2); // D = Z1*Z2
            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B
            const F = D - C; // F = D-C
            const G = D + C; // G = D+C
            const H = modP(B - a * A); // H = B-a*A
            const X3 = modP(E * F); // X3 = E*F
            const Y3 = modP(G * H); // Y3 = G*H
            const T3 = modP(E * H); // T3 = E*H
            const Z3 = modP(F * G); // Z3 = F*G
            return new Point(X3, Y3, Z3, T3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        // Constant-time multiplication.
        multiply(scalar) {
            const n = scalar;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L
            const { p, f } = this.wNAF(n);
            return Point.normalizeZ([p, f])[0];
        }
        // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.
        // Accepts optional accumulator to merge with multiply (important for sparse scalars)
        multiplyUnsafe(scalar, acc = Point.ZERO) {
            const n = scalar;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L
            if (n === _0n)
                return I;
            if (this.is0() || n === _1n)
                return this;
            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);
        }
        // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.
        isSmallOrder() {
            return this.multiplyUnsafe(cofactor).is0();
        }
        // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.
        isTorsionFree() {
            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
        }
        // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        toAffine(iz) {
            return toAffineMemo(this, iz);
        }
        clearCofactor() {
            const { h: cofactor } = CURVE;
            if (cofactor === _1n)
                return this;
            return this.multiplyUnsafe(cofactor);
        }
        // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.
        static fromHex(hex, zip215 = false) {
            const { d, a } = CURVE;
            const len = Fp.BYTES;
            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('pointHex', hex, len); // copy hex to a new array
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('zip215', zip215);
            const normed = hex.slice(); // copy again, we'll manipulate it
            const lastByte = hex[len - 1]; // select last byte
            normed[len - 1] = lastByte & ~0x80; // clear last bit
            const y = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberLE)(normed);
            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.
            // RFC8032 prohibits >= p, but ZIP215 doesn't
            // zip215=true:  0 <= y < MASK (2^256 for ed25519)
            // zip215=false: 0 <= y < P (2^255-19 for ed25519)
            const max = zip215 ? MASK : Fp.ORDER;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('pointHex.y', y, _0n, max);
            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)
            const y2 = modP(y * y); // denominator is always non-0 mod p.
            const u = modP(y2 - _1n); // u = y² - 1
            const v = modP(d * y2 - a); // v = d y² + 1.
            let { isValid, value: x } = uvRatio(u, v); // √(u/v)
            if (!isValid)
                throw new Error('Point.fromHex: invalid y coordinate');
            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper
            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit
            if (!zip215 && x === _0n && isLastByteOdd)
                // if x=0 and x_0 = 1, fail
                throw new Error('Point.fromHex: x=0 and x_0=1');
            if (isLastByteOdd !== isXOdd)
                x = modP(-x); // if x_0 != x mod 2, set x = p-x
            return Point.fromAffine({ x, y });
        }
        static fromPrivateKey(privKey) {
            const { scalar } = getPrivateScalar(privKey);
            return G.multiply(scalar); // reduced one call of `toRawBytes`
        }
        toRawBytes() {
            const { x, y } = this.toAffine();
            const bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToBytesLE)(y, Fp.BYTES); // each y has 2 x values (x, -y)
            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y
            return bytes; // and use the last byte to encode sign of x
        }
        toHex() {
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.toRawBytes()); // Same as toRawBytes, but returns string.
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));
    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0
    const { BASE: G, ZERO: I } = Point;
    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, nByteLength * 8);
    function modN(a) {
        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(a, CURVE_ORDER);
    }
    // Little-endian SHA512 with modulo n
    function modN_LE(hash) {
        return modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberLE)(hash));
    }
    // Get the hashed private scalar per RFC8032 5.1.5
    function getPrivateScalar(key) {
        const len = Fp.BYTES;
        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('private key', key, len);
        // Hash private key with curve's hash function to produce uniformingly random input
        // Check byte lengths: ensure(64, h(ensure(32, key)))
        const hashed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('hashed private key', cHash(key), 2 * len);
        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE
        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)
        const scalar = modN_LE(head); // The actual private scalar
        return { head, prefix, scalar };
    }
    // Convenience method that creates public key from scalar. RFC8032 5.1.5
    function getExtendedPublicKey(key) {
        const { head, prefix, scalar } = getPrivateScalar(key);
        const point = G.multiply(scalar); // Point on Edwards curve aka public key
        const pointBytes = point.toRawBytes(); // Uint8Array representation
        return { head, prefix, scalar, point, pointBytes };
    }
    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared
    function getPublicKey(privKey) {
        return getExtendedPublicKey(privKey).pointBytes;
    }
    // int('LE', SHA512(dom2(F, C) || msgs)) mod N
    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {
        const msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(...msgs);
        return modN_LE(cHash(domain(msg, (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('context', context), !!prehash)));
    }
    /** Signs message with privateKey. RFC8032 5.1.6 */
    function sign(msg, privKey, options = {}) {
        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('message', msg);
        if (prehash)
            msg = prehash(msg); // for ed25519ph etc.
        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)
        const R = G.multiply(r).toRawBytes(); // R = rG
        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)
        const s = modN(r + k * scalar); // S = (r + k * s) mod L
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l
        const res = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(R, (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToBytesLE)(s, Fp.BYTES));
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('result', res, Fp.BYTES * 2); // 64-byte signature
    }
    const verifyOpts = VERIFY_DEFAULT;
    /**
     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.
     * An extended group equation is checked.
     */
    function verify(sig, msg, publicKey, options = verifyOpts) {
        const { context, zip215 } = options;
        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.
        sig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('signature', sig, 2 * len); // An extended group equation is checked.
        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('message', msg);
        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('publicKey', publicKey, len);
        if (zip215 !== undefined)
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('zip215', zip215);
        if (prehash)
            msg = prehash(msg); // for ed25519ph, etc
        const s = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberLE)(sig.slice(len, 2 * len));
        let A, R, SB;
        try {
            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.
            // zip215=true:  0 <= y < MASK (2^256 for ed25519)
            // zip215=false: 0 <= y < P (2^255-19 for ed25519)
            A = Point.fromHex(publicKey, zip215);
            R = Point.fromHex(sig.slice(0, len), zip215);
            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside
        }
        catch (error) {
            return false;
        }
        if (!zip215 && A.isSmallOrder())
            return false;
        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
        const RkA = R.add(A.multiplyUnsafe(k));
        // Extended group equation
        // [8][S]B = [8]R + [8][k]A'
        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
    }
    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.
    const utils = {
        getExtendedPublicKey,
        /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
        randomPrivateKey: () => randomBytes(Fp.BYTES),
        /**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */
        precompute(windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3));
            return point;
        },
    };
    return {
        CURVE,
        getPublicKey,
        sign,
        verify,
        ExtendedPoint: Point,
        utils,
    };
}
//# sourceMappingURL=edwards.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createHasher: () => (/* binding */ createHasher),
/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),
/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),
/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),
/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)
/* harmony export */ });
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");


// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE;
// Integer to Octet Stream (numberToBytesBE)
function i2osp(value, length) {
    anum(value);
    anum(length);
    if (value < 0 || value >= 1 << (8 * length))
        throw new Error('invalid I2OSP input: ' + value);
    const res = Array.from({ length }).fill(0);
    for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 0xff;
        value >>>= 8;
    }
    return new Uint8Array(res);
}
function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
    }
    return arr;
}
function anum(item) {
    if (!Number.isSafeInteger(item))
        throw new Error('number expected');
}
/**
 * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.
 * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).
 */
function expand_message_xmd(msg, DST, lenInBytes, H) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(msg);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(DST);
    anum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    if (DST.length > 255)
        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (lenInBytes > 65535 || ell > 255)
        throw new Error('expand_message_xmd: invalid lenInBytes');
    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
    const b = new Array(ell);
    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
}
/**
 * Produces a uniformly random byte string using an extendable-output function (XOF) H.
 * 1. The collision resistance of H MUST be at least k bits.
 * 2. H MUST be an XOF that has been proved indifferentiable from
 *    a random oracle under a reasonable cryptographic assumption.
 * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).
 */
function expand_message_xof(msg, DST, lenInBytes, k, H) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(msg);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(DST);
    anum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
    if (DST.length > 255) {
        const dkLen = Math.ceil((2 * k) / 8);
        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
        throw new Error('expand_message_xof: invalid lenInBytes');
    return (H.create({ dkLen: lenInBytes })
        .update(msg)
        .update(i2osp(lenInBytes, 2))
        // 2. DST_prime = DST || I2OSP(len(DST), 1)
        .update(DST)
        .update(i2osp(DST.length, 1))
        .digest());
}
/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.
 * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */
function hash_to_field(msg, count, options) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(options, {
        DST: 'stringOrUint8Array',
        p: 'bigint',
        m: 'isSafeInteger',
        k: 'isSafeInteger',
        hash: 'hash',
    });
    const { p, k, m, hash, expand, DST: _DST } = options;
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(msg);
    anum(count);
    const DST = typeof _DST === 'string' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(_DST) : _DST;
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
    const len_in_bytes = count * m * L;
    let prb; // pseudo_random_bytes
    if (expand === 'xmd') {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
    }
    else if (expand === 'xof') {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
    }
    else if (expand === '_internal_pass') {
        // for internal tests only
        prb = msg;
    }
    else {
        throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
            const elm_offset = L * (j + i * m);
            const tv = prb.subarray(elm_offset, elm_offset + L);
            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(os2ip(tv), p);
        }
        u[i] = e;
    }
    return u;
}
function isogenyMap(field, map) {
    // Make same order as in spec
    const coeff = map.map((i) => Array.from(i).reverse());
    return (x, y) => {
        const [xn, xd, yn, yd] = coeff.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        // 6.6.3
        // Exceptional cases of iso_map are inputs that cause the denominator of
        // either rational function to evaluate to zero; such cases MUST return
        // the identity point on E.
        const [xd_inv, yd_inv] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.FpInvertBatch)(field, [xd, yd], true);
        x = field.mul(xn, xd_inv); // xNum / xDen
        y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)
        return { x, y };
    };
}
/** Creates hash-to-curve methods from EC Point and mapToCurve function. */
function createHasher(Point, mapToCurve, defaults) {
    if (typeof mapToCurve !== 'function')
        throw new Error('mapToCurve() must be defined');
    function map(num) {
        return Point.fromAffine(mapToCurve(num));
    }
    function clear(initial) {
        const P = initial.clearCofactor();
        if (P.equals(Point.ZERO))
            return Point.ZERO; // zero will throw in assert
        P.assertValidity();
        return P;
    }
    return {
        defaults,
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
            const u = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });
            const u0 = map(u[0]);
            const u1 = map(u[1]);
            return clear(u0.add(u1));
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
            const u = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });
            return clear(map(u[0]));
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
            if (!Array.isArray(scalars))
                throw new Error('expected array of bigints');
            for (const i of scalars)
                if (typeof i !== 'bigint')
                    throw new Error('expected array of bigints');
            return clear(map(scalars));
        },
    };
}
//# sourceMappingURL=hash-to-curve.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Field: () => (/* binding */ Field),
/* harmony export */   FpDiv: () => (/* binding */ FpDiv),
/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),
/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),
/* harmony export */   FpLegendre: () => (/* binding */ FpLegendre),
/* harmony export */   FpPow: () => (/* binding */ FpPow),
/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),
/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),
/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),
/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),
/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),
/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),
/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   nLength: () => (/* binding */ nLength),
/* harmony export */   pow: () => (/* binding */ pow),
/* harmony export */   pow2: () => (/* binding */ pow2),
/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),
/* harmony export */   validateField: () => (/* binding */ validateField)
/* harmony export */ });
/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ "./node_modules/@noble/hashes/esm/utils.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * Utils for modular division and finite fields.
 * A finite field over 11 is integer number operations `mod 11`.
 * There is no division: it is replaced by modular multiplicative inverse.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */


// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);
// prettier-ignore
const _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);
// prettier-ignore
const _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
}
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * TODO: remove.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */
function pow(num, power, modulo) {
    if (power < _0n)
        throw new Error('invalid exponent, negatives unsupported');
    if (modulo <= _0n)
        throw new Error('invalid modulus');
    if (modulo === _1n)
        return _0n;
    let res = _1n;
    while (power > _0n) {
        if (power & _1n)
            res = (res * num) % modulo;
        num = (num * num) % modulo;
        power >>= _1n;
    }
    return res;
}
/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */
function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n) {
        res *= res;
        res %= modulo;
    }
    return res;
}
/**
 * Inverses number over modulo.
 * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).
 */
function invert(number, modulo) {
    if (number === _0n)
        throw new Error('invert: expected non-zero number');
    if (modulo <= _0n)
        throw new Error('invert: expected positive modulus, got ' + modulo);
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n, y = _1n, u = _1n, v = _0n;
    while (a !== _0n) {
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        // prettier-ignore
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */
function tonelliShanks(P) {
    // Do expensive precomputation step
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p-1 == q*(2^s) with q odd
    let Q = P - _1n;
    let S = 0;
    while (Q % _2n === _0n) {
        Q /= _2n;
        S++;
    }
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    let Z = _2n;
    const _Fp = Field(P);
    while (Z < P && FpIsSquare(_Fp, Z)) {
        if (Z++ > 1000)
            throw new Error('Cannot find square root: probably non-prime P');
    }
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n) / _2n;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (!FpIsSquare(Fp, n))
            throw new Error('Cannot find square root');
        let r = S;
        // TODO: test on Fp2 and others
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while (!Fp.eql(b, Fp.ONE)) {
            // (4. If t = 0, return r = 0)
            // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm
            if (Fp.eql(b, Fp.ZERO))
                return Fp.ZERO;
            // Find m such b^(2^m)==1
            let m = 1;
            for (let t2 = Fp.sqr(b); m < r; m++) {
                if (Fp.eql(t2, Fp.ONE))
                    break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift,
            // otherwise there will be overflow.
            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
/**
 * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:
 *
 * 1. P ≡ 3 (mod 4)
 * 2. P ≡ 5 (mod 8)
 * 3. P ≡ 9 (mod 16)
 * 4. Tonelli-Shanks algorithm
 *
 * Different algorithms can give different roots, it is up to user to decide which one they want.
 * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
 */
function FpSqrt(P) {
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        return function sqrt3mod4(Fp, n) {
            const p1div4 = (P + _1n) / _4n;
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n === _5n) {
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n);
            const c1 = (P - _5n) / _8n;
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // P ≡ 9 (mod 16)
    if (P % _16n === _9n) {
        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start
        // Means we cannot use sqrt for constants at all!
        //
        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F
        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F
        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F
        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic
        // sqrt = (x) => {
        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4
        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1
        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1
        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1
        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x
        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x
        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x
        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x
        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x
        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2
        // }
    }
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
// Little-endian check for first LE bit (last BE bit);
const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
// prettier-ignore
const FIELD_FIELDS = [
    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
    'eql', 'add', 'sub', 'mul', 'pow', 'div',
    'addN', 'subN', 'mulN', 'sqrN'
];
function validateField(field) {
    const initial = {
        ORDER: 'bigint',
        MASK: 'bigint',
        BYTES: 'isSafeInteger',
        BITS: 'isSafeInteger',
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = 'function';
        return map;
    }, initial);
    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(field, opts);
}
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */
function FpPow(Fp, num, power) {
    if (power < _0n)
        throw new Error('invalid exponent, negatives unsupported');
    if (power === _0n)
        return Fp.ONE;
    if (power === _1n)
        return num;
    // @ts-ignore
    let p = Fp.ONE;
    let d = num;
    while (power > _0n) {
        if (power & _1n)
            p = Fp.mul(p, d);
        d = Fp.sqr(d);
        power >>= _1n;
    }
    return p;
}
/**
 * Efficiently invert an array of Field elements.
 * Exception-free. Will return `undefined` for 0 elements.
 * @param passZero map 0 to 0 (instead of undefined)
 */
function FpInvertBatch(Fp, nums, passZero = false) {
    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);
    // Walk from first to last, multiply them by each other MOD p
    const multipliedAcc = nums.reduce((acc, num, i) => {
        if (Fp.is0(num))
            return acc;
        inverted[i] = acc;
        return Fp.mul(acc, num);
    }, Fp.ONE);
    // Invert last element
    const invertedAcc = Fp.inv(multipliedAcc);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i) => {
        if (Fp.is0(num))
            return acc;
        inverted[i] = Fp.mul(acc, inverted[i]);
        return Fp.mul(acc, num);
    }, invertedAcc);
    return inverted;
}
// TODO: remove
function FpDiv(Fp, lhs, rhs) {
    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));
}
/**
 * Legendre symbol.
 * Legendre constant is used to calculate Legendre symbol (a | p)
 * which denotes the value of a^((p-1)/2) (mod p)..
 *
 * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue
 * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue
 * * (a | p) ≡ 0    if a ≡ 0 (mod p)
 */
function FpLegendre(Fp, n) {
    const legc = (Fp.ORDER - _1n) / _2n;
    const powered = Fp.pow(n, legc);
    const yes = Fp.eql(powered, Fp.ONE);
    const zero = Fp.eql(powered, Fp.ZERO);
    const no = Fp.eql(powered, Fp.neg(Fp.ONE));
    if (!yes && !zero && !no)
        throw new Error('Cannot find square root: probably non-prime P');
    return yes ? 1 : zero ? 0 : -1;
}
// This function returns True whenever the value x is a square in the field F.
function FpIsSquare(Fp, n) {
    const l = FpLegendre(Fp, n);
    return l === 0 || l === 1;
}
// CURVE.n lengths
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    if (nBitLength !== undefined)
        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.anumber)(nBitLength);
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
}
/**
 * Initializes a finite field over prime.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * Fragile: always run a benchmark on a change.
 * Security note: operations don't check 'isValid' for all elements for performance reasons,
 * it is caller responsibility to check this.
 * This is low-level code, please make sure you know what you're doing.
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */
function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n)
        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048)
        throw new Error('invalid field: expected ORDER of <= 2048 bytes');
    let sqrtP; // cached sqrtP
    const f = Object.freeze({
        ORDER,
        isLE,
        BITS,
        BYTES,
        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
            if (typeof num !== 'bigint')
                throw new Error('invalid field element: expected bigint, got ' + typeof num);
            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt ||
            ((n) => {
                if (!sqrtP)
                    sqrtP = FpSqrt(ORDER);
                return sqrtP(f, n);
            }),
        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE)(num, BYTES)),
        fromBytes: (bytes) => {
            if (bytes.length !== BYTES)
                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);
            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE)(bytes);
        },
        // TODO: we don't need it here, move out to separate fn
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // We can't move this out because Fp6, Fp12 implement it
        // and it's unclear what to return in there.
        cmov: (a, b, c) => (c ? b : a),
    });
    return Object.freeze(f);
}
function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error("Field doesn't have isOdd");
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error("Field doesn't have isOdd");
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use `mapKeyToField` instead
 */
function hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('privateHash', hash);
    const hashLen = hash.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);
    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE)(hash);
    return mod(num, groupOrder - _1n) + _1n;
}
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */
function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== 'bigint')
        throw new Error('field order must be bigint');
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */
function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */
function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024)
        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);
    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE)(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = mod(num, fieldOrder - _1n) + _1n;
    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE)(reduced, fieldLen);
}
//# sourceMappingURL=modular.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/montgomery.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/montgomery.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   montgomery: () => (/* binding */ montgomery)
/* harmony export */ });
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * Montgomery curve methods. It's not really whole montgomery curve,
 * just bunch of very specific methods for X25519 / X448 from
 * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */


const _0n = BigInt(0);
const _1n = BigInt(1);
function validateOpts(curve) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {
        a: 'bigint',
    }, {
        montgomeryBits: 'isSafeInteger',
        nByteLength: 'isSafeInteger',
        adjustScalarBytes: 'function',
        domain: 'function',
        powPminus2: 'function',
        Gu: 'bigint',
    });
    // Set defaults
    return Object.freeze({ ...curve });
}
// Uses only one coordinate instead of two
function montgomery(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { P } = CURVE;
    const Fp = (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(P);
    const modP = (n) => (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(n, P);
    const montgomeryBits = CURVE.montgomeryBits;
    const montgomeryBytes = Math.ceil(montgomeryBits / 8);
    const fieldLen = CURVE.nByteLength;
    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes);
    const powPminus2 = CURVE.powPminus2 || ((x) => Fp.pow(x, P - BigInt(2)));
    // cswap from RFC7748. But it is not from RFC7748!
    /*
      cswap(swap, x_2, x_3):
           dummy = mask(swap) AND (x_2 XOR x_3)
           x_2 = x_2 XOR dummy
           x_3 = x_3 XOR dummy
           Return (x_2, x_3)
    Where mask(swap) is the all-1 or all-0 word of the same length as x_2
     and x_3, computed, e.g., as mask(swap) = 0 - swap.
    */
    function cswap(swap, x_2, x_3) {
        const dummy = modP(swap * (x_2 - x_3));
        x_2 = modP(x_2 - dummy);
        x_3 = modP(x_3 + dummy);
        return [x_2, x_3];
    }
    // x25519 from 4
    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519
    const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
    /**
     *
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */
    function montgomeryLadder(u, scalar) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aInRange)('u', u, _0n, P);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aInRange)('scalar', scalar, _0n, P);
        // Section 5: Implementations MUST accept non-canonical values and process them as
        // if they had been reduced modulo the field prime.
        const k = scalar;
        const x_1 = u;
        let x_2 = _1n;
        let z_2 = _0n;
        let x_3 = u;
        let z_3 = _1n;
        let swap = _0n;
        let sw;
        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {
            const k_t = (k >> t) & _1n;
            swap ^= k_t;
            sw = cswap(swap, x_2, x_3);
            x_2 = sw[0];
            x_3 = sw[1];
            sw = cswap(swap, z_2, z_3);
            z_2 = sw[0];
            z_3 = sw[1];
            swap = k_t;
            const A = x_2 + z_2;
            const AA = modP(A * A);
            const B = x_2 - z_2;
            const BB = modP(B * B);
            const E = AA - BB;
            const C = x_3 + z_3;
            const D = x_3 - z_3;
            const DA = modP(D * A);
            const CB = modP(C * B);
            const dacb = DA + CB;
            const da_cb = DA - CB;
            x_3 = modP(dacb * dacb);
            z_3 = modP(x_1 * modP(da_cb * da_cb));
            x_2 = modP(AA * BB);
            z_2 = modP(E * (AA + modP(a24 * E)));
        }
        // (x_2, x_3) = cswap(swap, x_2, x_3)
        sw = cswap(swap, x_2, x_3);
        x_2 = sw[0];
        x_3 = sw[1];
        // (z_2, z_3) = cswap(swap, z_2, z_3)
        sw = cswap(swap, z_2, z_3);
        z_2 = sw[0];
        z_3 = sw[1];
        // z_2^(p - 2)
        const z2 = powPminus2(z_2);
        // Return x_2 * (z_2^(p - 2))
        return modP(x_2 * z2);
    }
    function encodeUCoordinate(u) {
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE)(modP(u), montgomeryBytes);
    }
    function decodeUCoordinate(uEnc) {
        // Section 5: When receiving such an array, implementations of X25519
        // MUST mask the most significant bit in the final byte.
        const u = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('u coordinate', uEnc, montgomeryBytes);
        if (fieldLen === 32)
            u[31] &= 127; // 0b0111_1111
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE)(u);
    }
    function decodeScalar(n) {
        const bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('scalar', n);
        const len = bytes.length;
        if (len !== montgomeryBytes && len !== fieldLen) {
            let valid = '' + montgomeryBytes + ' or ' + fieldLen;
            throw new Error('invalid scalar, expected ' + valid + ' bytes, got ' + len);
        }
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE)(adjustScalarBytes(bytes));
    }
    function scalarMult(scalar, u) {
        const pointU = decodeUCoordinate(u);
        const _scalar = decodeScalar(scalar);
        const pu = montgomeryLadder(pointU, _scalar);
        // The result was not contributory
        // https://cr.yp.to/ecdh.html#validate
        if (pu === _0n)
            throw new Error('invalid private or public key received');
        return encodeUCoordinate(pu);
    }
    // Computes public key from private. By doing scalar multiplication of base point.
    const GuBytes = encodeUCoordinate(CURVE.Gu);
    function scalarMultBase(scalar) {
        return scalarMult(scalar, GuBytes);
    }
    return {
        scalarMult,
        scalarMultBase,
        getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),
        getPublicKey: (privateKey) => scalarMultBase(privateKey),
        utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
        GuBytes: GuBytes,
    };
}
//# sourceMappingURL=montgomery.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   aInRange: () => (/* binding */ aInRange),
/* harmony export */   abool: () => (/* binding */ abool),
/* harmony export */   abytes: () => (/* binding */ abytes),
/* harmony export */   bitGet: () => (/* binding */ bitGet),
/* harmony export */   bitLen: () => (/* binding */ bitLen),
/* harmony export */   bitMask: () => (/* binding */ bitMask),
/* harmony export */   bitSet: () => (/* binding */ bitSet),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),
/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),
/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),
/* harmony export */   equalBytes: () => (/* binding */ equalBytes),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),
/* harmony export */   inRange: () => (/* binding */ inRange),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   memoized: () => (/* binding */ memoized),
/* harmony export */   notImplemented: () => (/* binding */ notImplemented),
/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),
/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),
/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),
/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   validateObject: () => (/* binding */ validateObject)
/* harmony export */ });
/**
 * Hex, bytes and number utilities.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const _0n = /* @__PURE__ */ BigInt(0);
const _1n = /* @__PURE__ */ BigInt(1);
function isBytes(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
function abytes(item) {
    if (!isBytes(item))
        throw new Error('Uint8Array expected');
}
function abool(title, value) {
    if (typeof value !== 'boolean')
        throw new Error(title + ' boolean expected, got ' + value);
}
// Used in weierstrass, der
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? '0' + hex : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian
}
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = 
// @ts-ignore
typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function';
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * Convert byte array to hex string. Uses built-in function, when available.
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore
    if (hasHexBuiltin)
        return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * Convert hex string to byte array. Uses built-in function, when available.
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    // @ts-ignore
    if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
    abytes(bytes);
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
}
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
// Unpadded, rarely used
function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
}
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */
function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === 'string') {
        try {
            res = hexToBytes(hex);
        }
        catch (e) {
            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);
        }
    }
    else if (isBytes(hex)) {
        // Uint8Array.from() instead of hash.slice() because node.js Buffer
        // is instance of Uint8Array, and its slice() creates **mutable** copy
        res = Uint8Array.from(hex);
    }
    else {
        throw new Error(title + ' must be hex string or Uint8Array');
    }
    const len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength)
        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);
    return res;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
// Compares 2 u8a-s in kinda constant time
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error('string expected');
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
// Is positive bigint
const isPosBig = (n) => typeof n === 'bigint' && _0n <= n;
function inRange(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
}
/**
 * Asserts min <= n < max. NOTE: It's < max and not <= max.
 * @example
 * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)
 */
function aInRange(title, n, min, max) {
    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?
    // consider P=256n, min=0n, max=P
    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`
    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`
    // - our way is the cleanest:               `inRange('x', x, 0n, P)
    if (!inRange(n, min, max))
        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);
}
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 * TODO: merge with nLength in modular
 */
function bitLen(n) {
    let len;
    for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
    return len;
}
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */
function bitGet(n, pos) {
    return (n >> BigInt(pos)) & _1n;
}
/**
 * Sets single bit at position.
 */
function bitSet(n, pos, value) {
    return n | ((value ? _1n : _0n) << BigInt(pos));
}
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */
const bitMask = (n) => (_1n << BigInt(n)) - _1n;
// DRBG
const u8n = (len) => new Uint8Array(len); // creates Uint8Array
const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2)
        throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2)
        throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function')
        throw new Error('hmacFn must be a function');
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n(0)) => {
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0)
            return;
        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = () => {
        // HMAC-DRBG generate() function
        if (i++ >= 1000)
            throw new Error('drbg: tried 1000 values');
        let len = 0;
        const out = [];
        while (len < qByteLen) {
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while (!(res = pred(gen())))
            reseed();
        reset();
        return res;
    };
    return genUntil;
}
// Validating curves and fields
const validatorFns = {
    bigint: (val) => typeof val === 'bigint',
    function: (val) => typeof val === 'function',
    boolean: (val) => typeof val === 'boolean',
    string: (val) => typeof val === 'string',
    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== 'function')
            throw new Error('invalid validator function');
        const val = object[fieldName];
        if (isOptional && val === undefined)
            return;
        if (!checkVal(val, object)) {
            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);
        }
    };
    for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
    return object;
}
// validate type tests
// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
/**
 * throws not implemented error
 */
const notImplemented = () => {
    throw new Error('not implemented');
};
/**
 * Memoizes (caches) computation result.
 * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.
 */
function memoized(fn) {
    const map = new WeakMap();
    return (arg, ...args) => {
        const val = map.get(arg);
        if (val !== undefined)
            return val;
        const computed = fn(arg, ...args);
        map.set(arg, computed);
        return computed;
    };
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DER: () => (/* binding */ DER),
/* harmony export */   DERErr: () => (/* binding */ DERErr),
/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),
/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),
/* harmony export */   weierstrass: () => (/* binding */ weierstrass),
/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)
/* harmony export */ });
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/curve.js");
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.
 *
 * ### Parameters
 *
 * To initialize a weierstrass curve, one needs to pass following params:
 *
 * * a: formula param
 * * b: formula param
 * * Fp: finite Field over which we'll do calculations. Can be complex (Fp2, Fp12)
 * * n: Curve prime subgroup order, total count of valid points in the field
 * * Gx: Base point (x, y) aka generator point x coordinate
 * * Gy: ...y coordinate
 * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)
 * * lowS: whether to enable (default) or disable "low-s" non-malleable signatures
 *
 * ### Design rationale for types
 *
 * * Interaction between classes from different curves should fail:
 *   `k256.Point.BASE.add(p256.Point.BASE)`
 * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime
 * * Different calls of `curve()` would return different classes -
 *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,
 *   it won't affect others
 *
 * TypeScript can't infer types for classes created inside a function. Classes is one instance
 * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create
 * unique type for every function call.
 *
 * We can use generic types via some param, like curve opts, but that would:
 *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)
 *     which is hard to debug.
 *     2. Params can be generic and we can't enforce them to be constant value:
 *     if somebody creates curve from non-constant params,
 *     it would be allowed to interact with other curves with non-constant params
 *
 * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// prettier-ignore

// prettier-ignore

// prettier-ignore

function validateSigVerOpts(opts) {
    if (opts.lowS !== undefined)
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('lowS', opts.lowS);
    if (opts.prehash !== undefined)
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('prehash', opts.prehash);
}
function validatePointOpts(curve) {
    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.validateObject)(opts, {
        a: 'field',
        b: 'field',
    }, {
        allowedPrivateKeyLengths: 'array',
        wrapPrivateKey: 'boolean',
        isTorsionFree: 'function',
        clearCofactor: 'function',
        allowInfinityPoint: 'boolean',
        fromBytes: 'function',
        toBytes: 'function',
    });
    const { endo, Fp, a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');
        }
        if (typeof endo !== 'object' ||
            typeof endo.beta !== 'bigint' ||
            typeof endo.splitScalar !== 'function') {
            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');
        }
    }
    return Object.freeze({ ...opts });
}
class DERErr extends Error {
    constructor(m = '') {
        super(m);
    }
}
/**
 * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:
 *
 *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]
 *
 * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html
 */
const DER = {
    // asn.1 DER encoding utils
    Err: DERErr,
    // Basic building block is TLV (Tag-Length-Value)
    _tlv: {
        encode: (tag, data) => {
            const { Err: E } = DER;
            if (tag < 0 || tag > 256)
                throw new E('tlv.encode: wrong tag');
            if (data.length & 1)
                throw new E('tlv.encode: unpadded data');
            const dataLen = data.length / 2;
            const len = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToHexUnpadded)(dataLen);
            if ((len.length / 2) & 128)
                throw new E('tlv.encode: long form length too big');
            // length of length with long form flag
            const lenLen = dataLen > 127 ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToHexUnpadded)((len.length / 2) | 128) : '';
            const t = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToHexUnpadded)(tag);
            return t + lenLen + len + data;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
            const { Err: E } = DER;
            let pos = 0;
            if (tag < 0 || tag > 256)
                throw new E('tlv.encode: wrong tag');
            if (data.length < 2 || data[pos++] !== tag)
                throw new E('tlv.decode: wrong tlv');
            const first = data[pos++];
            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form
            let length = 0;
            if (!isLong)
                length = first;
            else {
                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]
                const lenLen = first & 127;
                if (!lenLen)
                    throw new E('tlv.decode(long): indefinite length not supported');
                if (lenLen > 4)
                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js
                const lengthBytes = data.subarray(pos, pos + lenLen);
                if (lengthBytes.length !== lenLen)
                    throw new E('tlv.decode: length bytes not complete');
                if (lengthBytes[0] === 0)
                    throw new E('tlv.decode(long): zero leftmost byte');
                for (const b of lengthBytes)
                    length = (length << 8) | b;
                pos += lenLen;
                if (length < 128)
                    throw new E('tlv.decode(long): not minimal encoding');
            }
            const v = data.subarray(pos, pos + length);
            if (v.length !== length)
                throw new E('tlv.decode: wrong value length');
            return { v, l: data.subarray(pos + length) };
        },
    },
    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
    // since we always use positive integers here. It must always be empty:
    // - add zero byte if exists
    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
    _int: {
        encode(num) {
            const { Err: E } = DER;
            if (num < _0n)
                throw new E('integer: negative integers are not allowed');
            let hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToHexUnpadded)(num);
            // Pad with zero byte if negative flag is present
            if (Number.parseInt(hex[0], 16) & 0b1000)
                hex = '00' + hex;
            if (hex.length & 1)
                throw new E('unexpected DER parsing assertion: unpadded hex');
            return hex;
        },
        decode(data) {
            const { Err: E } = DER;
            if (data[0] & 128)
                throw new E('invalid signature integer: negative');
            if (data[0] === 0x00 && !(data[1] & 128))
                throw new E('invalid signature integer: unnecessary leading zero');
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberBE)(data);
        },
    },
    toSig(hex) {
        // parse DER signature
        const { Err: E, _int: int, _tlv: tlv } = DER;
        const data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('signature', hex);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);
        if (seqLeftBytes.length)
            throw new E('invalid signature: left bytes after parsing');
        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);
        if (sLeftBytes.length)
            throw new E('invalid signature: left bytes after parsing');
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
    },
    hexFromSig(sig) {
        const { _tlv: tlv, _int: int } = DER;
        const rs = tlv.encode(0x02, int.encode(sig.r));
        const ss = tlv.encode(0x02, int.encode(sig.s));
        const seq = rs + ss;
        return tlv.encode(0x30, seq);
    },
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const Fn = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.Field)(CURVE.n, CURVE.nBitLength);
    const toBytes = CURVE.toBytes ||
        ((_c, point, _isCompressed) => {
            const a = point.toAffine();
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
        });
    const fromBytes = CURVE.fromBytes ||
        ((bytes) => {
            // const head = bytes[0];
            const tail = bytes.subarray(1);
            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
        });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².
     * @returns y²
     */
    function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error('bad generator point: equation left != right');
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.inRange)(num, _1n, CURVE.n);
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
        if (lengths && typeof key !== 'bigint') {
            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isBytes)(key))
                key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== 'string' || !lengths.includes(key.length))
                throw new Error('invalid private key');
            key = key.padStart(nByteLength * 2, '0');
        }
        let num;
        try {
            num =
                typeof key === 'bigint'
                    ? key
                    : (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberBE)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('private key', key, nByteLength));
        }
        catch (error) {
            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);
        }
        if (wrapPrivateKey)
            num = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(num, N); // disabled by default, enabled for BLS
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('private key', num, _1n, N); // num in range [1..N-1]
        return num;
    }
    function aprjpoint(other) {
        if (!(other instanceof Point))
            throw new Error('ProjectivePoint expected');
    }
    // Memoized toAffine / validity check. They are heavy. Points are immutable.
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    const toAffineMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.memoized)((p, iz) => {
        const { px: x, py: y, pz: z } = p;
        // Fast-path for normalized points
        if (Fp.eql(z, Fp.ONE))
            return { x, y };
        const is0 = p.is0();
        // If invZ was 0, we return zero point. However we still want to execute
        // all operations, so we replace invZ with a random number, 1.
        if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
        const ax = Fp.mul(x, iz);
        const ay = Fp.mul(y, iz);
        const zz = Fp.mul(z, iz);
        if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
        if (!Fp.eql(zz, Fp.ONE))
            throw new Error('invZ was invalid');
        return { x: ax, y: ay };
    });
    // NOTE: on exception this will crash 'cached' and no value will be set.
    // Otherwise true will be return
    const assertValidMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.memoized)((p) => {
        if (p.is0()) {
            // (0, 1, 0) aka ZERO is invalid in most contexts.
            // In BLS, ZERO can be serialized, so we allow it.
            // (0, 0, 0) is invalid representation of ZERO.
            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))
                return;
            throw new Error('bad point: ZERO');
        }
        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
        const { x, y } = p.toAffine();
        // Check if x, y are valid field elements
        if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error('bad point: x or y not FE');
        const left = Fp.sqr(y); // y²
        const right = weierstrassEquation(x); // x³ + ax + b
        if (!Fp.eql(left, right))
            throw new Error('bad point: equation left != right');
        if (!p.isTorsionFree())
            throw new Error('bad point: not in prime-order subgroup');
        return true;
    });
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */
    class Point {
        constructor(px, py, pz) {
            if (px == null || !Fp.isValid(px))
                throw new Error('x required');
            if (py == null || !Fp.isValid(py) || Fp.is0(py))
                throw new Error('y required');
            if (pz == null || !Fp.isValid(pz))
                throw new Error('z required');
            this.px = px;
            this.py = py;
            this.pz = pz;
            Object.freeze(this);
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x, y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                throw new Error('invalid affine point');
            if (p instanceof Point)
                throw new Error('projective point not allowed');
            const is0 = (i) => Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y))
                return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
            const toInv = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.FpInvertBatch)(Fp, points.map((p) => p.pz));
            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('pointHex', hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
            return (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.pippenger)(Point, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            wnaf.setWindowSize(this, windowSize);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            assertValidMemo(this);
        }
        hasEvenY() {
            const { y } = this.toAffine();
            if (Fp.isOdd)
                return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
            aprjpoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a, b } = CURVE;
            const b3 = Fp.mul(b, _3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            aprjpoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, _3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
            const { endo, n: N } = CURVE;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('scalar', sc, _0n, N);
            const I = Point.ZERO;
            if (sc === _0n)
                return I;
            if (this.is0() || sc === _1n)
                return this;
            // Case a: no endomorphism. Case b: has precomputes.
            if (!endo || wnaf.hasPrecomputes(this))
                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);
            // Case c: endomorphism
            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
            let k1p = I;
            let k2p = I;
            let d = this;
            while (k1 > _0n || k2 > _0n) {
                if (k1 & _1n)
                    k1p = k1p.add(d);
                if (k2 & _1n)
                    k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n;
                k2 >>= _1n;
            }
            if (k1neg)
                k1p = k1p.negate();
            if (k2neg)
                k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
            const { endo, n: N } = CURVE;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('scalar', scalar, _1n, N);
            let point, fake; // Fake point is used to const-time mult
            if (endo) {
                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            }
            else {
                const { p, f } = this.wNAF(scalar);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            return toAffineMemo(this, iz);
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree } = CURVE;
            if (cofactor === _1n)
                return true; // No subgroups, always torsion-free
            if (isTorsionFree)
                return isTorsionFree(Point, this);
            throw new Error('isTorsionFree() has not been declared for the elliptic curve');
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor } = CURVE;
            if (cofactor === _1n)
                return this; // Fast-path
            if (clearCofactor)
                return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('isCompressed', isCompressed);
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('isCompressed', isCompressed);
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0
    const _bits = CURVE.nBitLength;
    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder,
    };
}
function validateOpts(curve) {
    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.validateObject)(opts, {
        hash: 'hash',
        hmac: 'function',
        randomBytes: 'function',
    }, {
        bits2int: 'function',
        bits2int_modN: 'function',
        lowS: 'boolean',
    });
    return Object.freeze({ lowS: true, ...opts });
}
/**
 * Creates short weierstrass curve and ECDSA signature methods for it.
 * @example
 * import { Field } from '@noble/curves/abstract/modular';
 * // Before that, define BigInt-s: a, b, p, n, Gx, Gy
 * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })
 */
function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function modN(a) {
        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(a, CURVE_ORDER);
    }
    function invN(a) {
        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.invert)(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abool)('isCompressed', isCompressed);
            if (isCompressed) {
                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
            }
            else {
                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
            }
        },
        fromBytes(bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberBE)(tail);
                if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.inRange)(x, _1n, Fp.ORDER))
                    throw new Error('Point is not on curve');
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y;
                try {
                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                }
                catch (sqrtError) {
                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';
                    throw new Error('Point is not on curve' + suffix);
                }
                const isYOdd = (y & _1n) === _1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd)
                    y = Fp.neg(y);
                return { x, y };
            }
            else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            }
            else {
                const cl = compressedLen;
                const ul = uncompressedLen;
                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);
            }
        },
    });
    const numToNByteHex = (num) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToBytesBE)(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberBE)(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */
    class Signature {
        constructor(r, s, recovery) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('r', r, _1n, CURVE_ORDER); // r in [1..N]
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('s', s, _1n, CURVE_ORDER); // s in [1..N]
            this.r = r;
            this.s = s;
            if (recovery != null)
                this.recovery = recovery;
            Object.freeze(this);
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('compactSignature', hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('DER', hex));
            return new Signature(r, s);
        }
        /**
         * @todo remove
         * @deprecated
         */
        assertValidity() { }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r, s, recovery: rec } = this;
            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('msgHash', msgHash)); // Truncate hash
            if (rec == null || ![0, 1, 2, 3].includes(rec))
                throw new Error('recovery id invalid');
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER)
                throw new Error('recovery id 2 or 3 invalid');
            const prefix = (rec & 1) === 0 ? '02' : '03';
            const R = Point.fromHex(prefix + numToNByteHex(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q)
                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(this.toDERHex());
        }
        toDERHex() {
            return DER.hexFromSig(this);
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteHex(this.r) + numToNByteHex(this.s);
        }
    }
    const utils = {
        isValidPrivateKey(privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            }
            catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
            const length = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.getMinHashLength)(CURVE.n);
            return (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mapHashToField)(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        },
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */
    function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */
    function isProbPub(item) {
        const arr = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isBytes)(item);
        const str = typeof item === 'string';
        const len = (arr || str) && item.length;
        if (arr)
            return len === compressedLen || len === uncompressedLen;
        if (str)
            return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
            return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */
    function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
            throw new Error('first arg must be private key');
        if (!isProbPub(publicB))
            throw new Error('second arg must be public key');
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int ||
        function (bytes) {
            // Our custom check "just in case"
            if (bytes.length > 8192)
                throw new Error('input is too large');
            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
            // for some cases, since bytes.length * 8 is not actual bitLength.
            const num = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNumberBE)(bytes); // check for == u8 done here
            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
            return delta > 0 ? num >> BigInt(delta) : num;
        };
    const bits2int_modN = CURVE.bits2int_modN ||
        function (bytes) {
            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
        };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bitMask)(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */
    function int2octets(num) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aInRange)('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);
        // works with order, can have different size than numToField!
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.numberToBytesBE)(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,
    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (['recovered', 'canonical'].some((k) => k in opts))
            throw new Error('sign() legacy options not supported');
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null)
            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('msgHash', msgHash);
        validateSigVerOpts(opts);
        if (prehash)
            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('prehashed msgHash', hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [int2octets(d), int2octets(h1int)];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null && ent !== false) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('extraEntropy', e)); // check for being bytes
        }
        const seed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k))
                return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === _0n)
                return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === _0n)
                return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */
    function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHmacDrbg)(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('msgHash', msgHash);
        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('publicKey', publicKey);
        const { lowS, prehash, format } = opts;
        // Verify opts, deduce signature format
        validateSigVerOpts(opts);
        if ('strict' in opts)
            throw new Error('options.strict was renamed to lowS');
        if (format !== undefined && format !== 'compact' && format !== 'der')
            throw new Error('format must be compact or der');
        const isHex = typeof sg === 'string' || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isBytes)(sg);
        const isObj = !isHex &&
            !format &&
            typeof sg === 'object' &&
            sg !== null &&
            typeof sg.r === 'bigint' &&
            typeof sg.s === 'bigint';
        if (!isHex && !isObj)
            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');
        let _sig = undefined;
        let P;
        try {
            if (isObj)
                _sig = new Signature(sg.r, sg.s);
            if (isHex) {
                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                // Since DER can also be 2*nByteLength bytes, we check for it first.
                try {
                    if (format !== 'compact')
                        _sig = Signature.fromDER(sg);
                }
                catch (derError) {
                    if (!(derError instanceof DER.Err))
                        throw derError;
                }
                if (!_sig && format !== 'der')
                    _sig = Signature.fromCompact(sg);
            }
            P = Point.fromHex(publicKey);
        }
        catch (error) {
            return false;
        }
        if (!_sig)
            return false;
        if (lowS && _sig.hasHighS())
            return false;
        if (prehash)
            msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R)
            return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils,
    };
}
/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */
function SWUFpSqrtRatio(Fp, Z) {
    // Generic implementation
    const q = Fp.ORDER;
    let l = _0n;
    for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
    // 2n ** c1 == 2n << (c1-1)
    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);
    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
    let sqrtRatio = (u, v) => {
        let tv1 = c6; // 1. tv1 = c6
        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
        // 17. for i in (c1, c1 - 1, ..., 2):
        for (let i = c1; i > _1n; i--) {
            let tv5 = i - _2n; // 18.    tv5 = i - 2
            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5
            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
        }
        return { isValid: isQR, value: tv3 };
    };
    if (Fp.ORDER % _4n === _3n) {
        // sqrt_ratio_3mod4(u, v)
        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
        sqrtRatio = (u, v) => {
            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2
        };
    }
    // No curves uses that
    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
    return sqrtRatio;
}
/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */
function mapToCurveSimpleSWU(Fp, opts) {
    (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.validateField)(Fp);
    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error('mapToCurveSimpleSWU: invalid opts');
    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
    if (!Fp.isOdd)
        throw new Error('Fp.isOdd is not implemented!');
    // Input: u, an element of F.
    // Output: (x, y), a point on E.
    return (u) => {
        // prettier-ignore
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
        y = Fp.mul(y, value); // 20.   y = y * y1
        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
        const tv4_inv = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.FpInvertBatch)(Fp, [tv4], true)[0];
        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4
        return { x, y };
    };
}
//# sourceMappingURL=weierstrass.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/ed25519.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/ed25519.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ED25519_TORSION_SUBGROUP: () => (/* binding */ ED25519_TORSION_SUBGROUP),
/* harmony export */   RistrettoPoint: () => (/* binding */ RistrettoPoint),
/* harmony export */   ed25519: () => (/* binding */ ed25519),
/* harmony export */   ed25519_hasher: () => (/* binding */ ed25519_hasher),
/* harmony export */   ed25519ctx: () => (/* binding */ ed25519ctx),
/* harmony export */   ed25519ph: () => (/* binding */ ed25519ph),
/* harmony export */   edwardsToMontgomery: () => (/* binding */ edwardsToMontgomery),
/* harmony export */   edwardsToMontgomeryPriv: () => (/* binding */ edwardsToMontgomeryPriv),
/* harmony export */   edwardsToMontgomeryPub: () => (/* binding */ edwardsToMontgomeryPub),
/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),
/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),
/* harmony export */   hashToRistretto255: () => (/* binding */ hashToRistretto255),
/* harmony export */   hash_to_ristretto255: () => (/* binding */ hash_to_ristretto255),
/* harmony export */   x25519: () => (/* binding */ x25519)
/* harmony export */ });
/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha2 */ "./node_modules/@noble/hashes/esm/sha2.js");
/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ "./node_modules/@noble/hashes/esm/utils.js");
/* harmony import */ var _abstract_curve_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/curve.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/curve.js");
/* harmony import */ var _abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/edwards.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/edwards.js");
/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/hash-to-curve.js");
/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/montgomery.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/montgomery.js");
/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./abstract/utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/utils.js");
/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */








// 2n**255n - 19n
const ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');
// √(-1) aka √(a) aka 2^((p-1)/4)
// Fp.sqrt(Fp.neg(1))
const ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
// prettier-ignore
const _5n = BigInt(5), _8n = BigInt(8);
function ed25519_pow_2_252_3(x) {
    // prettier-ignore
    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
    const P = ED25519_P;
    const x2 = (x * x) % P;
    const b2 = (x2 * x) % P; // x^3, 11
    const b4 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b2, _2n, P) * b2) % P; // x^15, 1111
    const b5 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b4, _1n, P) * x) % P; // x^31
    const b10 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b5, _5n, P) * b5) % P;
    const b20 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b10, _10n, P) * b10) % P;
    const b40 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b20, _20n, P) * b20) % P;
    const b80 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b40, _40n, P) * b40) % P;
    const b160 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b80, _80n, P) * b80) % P;
    const b240 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b160, _80n, P) * b80) % P;
    const b250 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b240, _10n, P) * b10) % P;
    const pow_p_5_8 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(b250, _2n, P) * x) % P;
    // ^ To pow to (p+3)/8, multiply it by x.
    return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes) {
    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
    // set the three least significant bits of the first byte
    bytes[0] &= 248; // 0b1111_1000
    // and the most significant bit of the last to zero,
    bytes[31] &= 127; // 0b0111_1111
    // set the second most significant bit of the last byte to 1
    bytes[31] |= 64; // 0b0100_0000
    return bytes;
}
// sqrt(u/v)
function uvRatio(u, v) {
    const P = ED25519_P;
    const v3 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(v * v * v, P); // v³
    const v7 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(v3 * v3 * v, P); // v⁷
    // (p+3)/8 and (p-5)/8
    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
    let x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8
    const vx2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(v * x * x, P); // vx²
    const root1 = x; // First root candidate
    const root2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(x * ED25519_SQRT_M1, P); // Second root candidate
    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root
    const useRoot2 = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)
    const noRoot = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)
    if (useRoot1)
        x = root1;
    if (useRoot2 || noRoot)
        x = root2; // We return root2 anyway, for const-time
    if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(x, P))
        x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)(-x, P);
    return { isValid: useRoot1 || useRoot2, value: x };
}
/** Weird / bogus points, useful for debugging. */
const ED25519_TORSION_SUBGROUP = [
    '0100000000000000000000000000000000000000000000000000000000000000',
    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',
    '0000000000000000000000000000000000000000000000000000000000000080',
    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',
    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',
    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',
    '0000000000000000000000000000000000000000000000000000000000000000',
    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',
];
const Fp = /* @__PURE__ */ (() => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.Field)(ED25519_P, undefined, true))();
const ed25519Defaults = /* @__PURE__ */ (() => ({
    // Removing Fp.create() will still work, and is 10% faster on sign
    a: Fp.create(BigInt(-1)),
    // d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))
    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
    // Finite field 2n**255n - 19n
    Fp,
    // Subgroup order 2n**252n + 27742317777372353535851937790883648493n;
    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),
    h: _8n,
    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
    hash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512,
    randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,
    adjustScalarBytes,
    // dom2
    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
    // Constant-time, u/√v
    uvRatio,
}))();
/**
 * ed25519 curve with EdDSA signatures.
 * @example
 * import { ed25519 } from '@noble/curves/ed25519';
 * const priv = ed25519.utils.randomPrivateKey();
 * const pub = ed25519.getPublicKey(priv);
 * const msg = new TextEncoder().encode('hello');
 * const sig = ed25519.sign(msg, priv);
 * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215
 * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5
 */
const ed25519 = /* @__PURE__ */ (() => (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)(ed25519Defaults))();
function ed25519_domain(data, ctx, phflag) {
    if (ctx.length > 255)
        throw new Error('Context is too big');
    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
const ed25519ctx = /* @__PURE__ */ (() => (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)({
    ...ed25519Defaults,
    domain: ed25519_domain,
}))();
const ed25519ph = /* @__PURE__ */ (() => (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)(Object.assign({}, ed25519Defaults, {
    domain: ed25519_domain,
    prehash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512,
})))();
/**
 * ECDH using curve25519 aka x25519.
 * @example
 * import { x25519 } from '@noble/curves/ed25519';
 * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';
 * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';
 * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases
 * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);
 * x25519.getPublicKey(x25519.utils.randomPrivateKey());
 */
const x25519 = /* @__PURE__ */ (() => (0,_abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_6__.montgomery)({
    P: ED25519_P,
    a: BigInt(486662),
    montgomeryBits: 255, // n is 253 bits
    nByteLength: 32,
    Gu: BigInt(9),
    powPminus2: (x) => {
        const P = ED25519_P;
        // x^(p-2) aka x^(2^255-21)
        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
        return (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.mod)((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.pow2)(pow_p_5_8, _3n, P) * b2, P);
    },
    adjustScalarBytes,
    randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,
}))();
/**
 * Converts ed25519 public key to x25519 public key. Uses formula:
 * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
 * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
 * @example
 *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());
 *   const aPriv = x25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))
 */
function edwardsToMontgomeryPub(edwardsPub) {
    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);
    const _1n = BigInt(1);
    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));
}
const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated
/**
 * Converts ed25519 secret key to x25519 secret key.
 * @example
 *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());
 *   const aPriv = ed25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)
 */
function edwardsToMontgomeryPriv(edwardsPriv) {
    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));
    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);
}
// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)
// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since
// SageMath returns different root first and everything falls apart
const ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic
const ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1
const ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)
// prettier-ignore
function map_to_curve_elligator2_curve25519(u) {
    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic
    const ELL2_J = BigInt(486662);
    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2
    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1
    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not
    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)
    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2
    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3
    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd
    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd
    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2
    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2
    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2
    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4
    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3
    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3
    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7
    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)
    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)
    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3
    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2
    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd
    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1
    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt
    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd
    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u
    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2
    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3
    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)
    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2
    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd
    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2
    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt
    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2
    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd
    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1
    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2
    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2
    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y
    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)
    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)
}
const ELL2_C1_EDWARDS = /* @__PURE__ */ (() => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0
function map_to_curve_elligator2_edwards25519(u) {
    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =
    // map_to_curve_elligator2_curve25519(u)
    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd
    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1
    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM
    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd
    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)
    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd
    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0
    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)
    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)
    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)
    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)
    const [xd_inv, yd_inv] = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.FpInvertBatch)(Fp, [xd, yd], true); // batch division
    return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) }; //  13. return (xn, xd, yn, yd)
}
const ed25519_hasher = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',
    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',
    p: Fp.ORDER,
    m: 1,
    k: 128,
    expand: 'xmd',
    hash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512,
}))();
const hashToCurve = /* @__PURE__ */ (() => ed25519_hasher.hashToCurve)();
const encodeToCurve = /* @__PURE__ */ (() => ed25519_hasher.encodeToCurve)();
function aristp(other) {
    if (!(other instanceof RistPoint))
        throw new Error('RistrettoPoint expected');
}
// √(-1) aka √(a) aka 2^((p-1)/4)
const SQRT_M1 = ED25519_SQRT_M1;
// √(ad - 1)
const SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');
// 1 / √(a-d)
const INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');
// 1-d²
const ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');
// (d-1)²
const D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');
// Calculates 1/√(number)
const invertSqrt = (number) => uvRatio(_1n, number);
const MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
const bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.bytesToNumberLE)(bytes) & MAX_255B);
// Computes Elligator map for Ristretto
// https://ristretto.group/formulas/elligator.html
function calcElligatorRistrettoMap(r0) {
    const { d } = ed25519.CURVE;
    const P = ed25519.CURVE.Fp.ORDER;
    const mod = ed25519.CURVE.Fp.create;
    const r = mod(SQRT_M1 * r0 * r0); // 1
    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2
    let c = BigInt(-1); // 3
    const D = mod((c - d * r) * mod(r + d)); // 4
    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5
    let s_ = mod(s * r0); // 6
    if (!(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(s_, P))
        s_ = mod(-s_);
    if (!Ns_D_is_sq)
        s = s_; // 7
    if (!Ns_D_is_sq)
        c = r; // 8
    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9
    const s2 = s * s;
    const W0 = mod((s + s) * D); // 10
    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11
    const W2 = mod(_1n - s2); // 12
    const W3 = mod(_1n + s2); // 13
    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));
}
/**
 * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be
 * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.
 * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,
 * but it should work in its own namespace: do not combine those two.
 * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448
 */
class RistPoint {
    // Private property to discourage combining ExtendedPoint + RistrettoPoint
    // Always use Ristretto encoding/decoding instead.
    constructor(ep) {
        this.ep = ep;
    }
    static fromAffine(ap) {
        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));
    }
    /**
     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
     * The hash-to-group operation applies Elligator twice and adds the results.
     * **Note:** this is one-way map, there is no conversion from point to hash.
     * https://ristretto.group/formulas/elligator.html
     * @param hex 64-byte output of a hash function
     */
    static hashToCurve(hex) {
        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.ensureBytes)('ristrettoHash', hex, 64);
        const r1 = bytes255ToNumberLE(hex.slice(0, 32));
        const R1 = calcElligatorRistrettoMap(r1);
        const r2 = bytes255ToNumberLE(hex.slice(32, 64));
        const R2 = calcElligatorRistrettoMap(r2);
        return new RistPoint(R1.add(R2));
    }
    /**
     * Converts ristretto-encoded string to ristretto point.
     * https://ristretto.group/formulas/decoding.html
     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
     */
    static fromHex(hex) {
        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.ensureBytes)('ristrettoHex', hex, 32);
        const { a, d } = ed25519.CURVE;
        const P = ed25519.CURVE.Fp.ORDER;
        const mod = ed25519.CURVE.Fp.create;
        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';
        const s = bytes255ToNumberLE(hex);
        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.
        // 3. Check that s is non-negative, or else abort
        if (!(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.equalBytes)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.numberToBytesLE)(s, 32), hex) || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(s, P))
            throw new Error(emsg);
        const s2 = mod(s * s);
        const u1 = mod(_1n + a * s2); // 4 (a is -1)
        const u2 = mod(_1n - a * s2); // 5
        const u1_2 = mod(u1 * u1);
        const u2_2 = mod(u2 * u2);
        const v = mod(a * d * u1_2 - u2_2); // 6
        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7
        const Dx = mod(I * u2); // 8
        const Dy = mod(I * Dx * v); // 9
        let x = mod((s + s) * Dx); // 10
        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(x, P))
            x = mod(-x); // 10
        const y = mod(u1 * Dy); // 11
        const t = mod(x * y); // 12
        if (!isValid || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(t, P) || y === _0n)
            throw new Error(emsg);
        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));
    }
    static msm(points, scalars) {
        const Fn = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.Field)(ed25519.CURVE.n, ed25519.CURVE.nBitLength);
        return (0,_abstract_curve_js__WEBPACK_IMPORTED_MODULE_2__.pippenger)(RistPoint, Fn, points, scalars);
    }
    /**
     * Encodes ristretto point to Uint8Array.
     * https://ristretto.group/formulas/encoding.html
     */
    toRawBytes() {
        let { ex: x, ey: y, ez: z, et: t } = this.ep;
        const P = ed25519.CURVE.Fp.ORDER;
        const mod = ed25519.CURVE.Fp.create;
        const u1 = mod(mod(z + y) * mod(z - y)); // 1
        const u2 = mod(x * y); // 2
        // Square root always exists
        const u2sq = mod(u2 * u2);
        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3
        const D1 = mod(invsqrt * u1); // 4
        const D2 = mod(invsqrt * u2); // 5
        const zInv = mod(D1 * D2 * t); // 6
        let D; // 7
        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(t * zInv, P)) {
            let _x = mod(y * SQRT_M1);
            let _y = mod(x * SQRT_M1);
            x = _x;
            y = _y;
            D = mod(D1 * INVSQRT_A_MINUS_D);
        }
        else {
            D = D2; // 8
        }
        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(x * zInv, P))
            y = mod(-y); // 9
        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))
        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_5__.isNegativeLE)(s, P))
            s = mod(-s);
        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.numberToBytesLE)(s, 32); // 11
    }
    toHex() {
        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex)(this.toRawBytes());
    }
    toString() {
        return this.toHex();
    }
    // Compare one point to another.
    equals(other) {
        aristp(other);
        const { ex: X1, ey: Y1 } = this.ep;
        const { ex: X2, ey: Y2 } = other.ep;
        const mod = ed25519.CURVE.Fp.create;
        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)
        const one = mod(X1 * Y2) === mod(Y1 * X2);
        const two = mod(Y1 * Y2) === mod(X1 * X2);
        return one || two;
    }
    add(other) {
        aristp(other);
        return new RistPoint(this.ep.add(other.ep));
    }
    subtract(other) {
        aristp(other);
        return new RistPoint(this.ep.subtract(other.ep));
    }
    multiply(scalar) {
        return new RistPoint(this.ep.multiply(scalar));
    }
    multiplyUnsafe(scalar) {
        return new RistPoint(this.ep.multiplyUnsafe(scalar));
    }
    double() {
        return new RistPoint(this.ep.double());
    }
    negate() {
        return new RistPoint(this.ep.negate());
    }
}
const RistrettoPoint = /* @__PURE__ */ (() => {
    if (!RistPoint.BASE)
        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);
    if (!RistPoint.ZERO)
        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);
    return RistPoint;
})();
// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B
const hashToRistretto255 = (msg, options) => {
    const d = options.DST;
    const DST = typeof d === 'string' ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(d) : d;
    const uniform_bytes = (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.expand_message_xmd)(msg, DST, 64, _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512);
    const P = RistPoint.hashToCurve(uniform_bytes);
    return P;
};
/** @deprecated */
const hash_to_ristretto255 = hashToRistretto255; // legacy
//# sourceMappingURL=ed25519.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/nist.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/nist.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p256: () => (/* binding */ p256),
/* harmony export */   p256_hasher: () => (/* binding */ p256_hasher),
/* harmony export */   p384: () => (/* binding */ p384),
/* harmony export */   p384_hasher: () => (/* binding */ p384_hasher),
/* harmony export */   p521: () => (/* binding */ p521),
/* harmony export */   p521_hasher: () => (/* binding */ p521_hasher),
/* harmony export */   secp256r1: () => (/* binding */ secp256r1),
/* harmony export */   secp384r1: () => (/* binding */ secp384r1),
/* harmony export */   secp521r1: () => (/* binding */ secp521r1)
/* harmony export */ });
/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha2 */ "./node_modules/@noble/hashes/esm/sha2.js");
/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/_shortw_utils.js");
/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/hash-to-curve.js");
/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/modular.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/modular.js");
/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/weierstrass.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/abstract/weierstrass.js");
/**
 * Internal module for NIST P256, P384, P521 curves.
 * Do not use for now.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */





const Fp256 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_3__.Field)(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));
const p256_a = Fp256.create(BigInt('-3'));
const p256_b = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');
/**
 * secp256r1 curve, ECDSA and ECDH methods.
 * Field: `2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n`
 */
// prettier-ignore
const p256 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({
    a: p256_a,
    b: p256_b,
    Fp: Fp256,
    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),
    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),
    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),
    h: BigInt(1),
    lowS: false
}, _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256);
/** Alias to p256. */
const secp256r1 = p256;
const p256_mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_4__.mapToCurveSimpleSWU)(Fp256, {
    A: p256_a,
    B: p256_b,
    Z: Fp256.create(BigInt('-10')),
}))();
/** Hashing / encoding to p256 points / field. RFC 9380 methods. */
const p256_hasher = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(secp256r1.ProjectivePoint, (scalars) => p256_mapSWU(scalars[0]), {
    DST: 'P256_XMD:SHA-256_SSWU_RO_',
    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',
    p: Fp256.ORDER,
    m: 1,
    k: 128,
    expand: 'xmd',
    hash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256,
}))();
// Field over which we'll do calculations.
const Fp384 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_3__.Field)(BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'));
const p384_a = Fp384.create(BigInt('-3'));
// prettier-ignore
const p384_b = BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef');
/**
 * secp384r1 curve, ECDSA and ECDH methods.
 * Field: `2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n`.
 * */
// prettier-ignore
const p384 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({
    a: p384_a,
    b: p384_b,
    Fp: Fp384,
    n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),
    Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),
    Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),
    h: BigInt(1),
    lowS: false
}, _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha384);
/** Alias to p384. */
const secp384r1 = p384;
const p384_mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_4__.mapToCurveSimpleSWU)(Fp384, {
    A: p384_a,
    B: p384_b,
    Z: Fp384.create(BigInt('-12')),
}))();
/** Hashing / encoding to p384 points / field. RFC 9380 methods. */
const p384_hasher = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(secp384r1.ProjectivePoint, (scalars) => p384_mapSWU(scalars[0]), {
    DST: 'P384_XMD:SHA-384_SSWU_RO_',
    encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',
    p: Fp384.ORDER,
    m: 1,
    k: 192,
    expand: 'xmd',
    hash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha384,
}))();
// Field over which we'll do calculations.
const Fp521 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_3__.Field)(BigInt('0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'));
const p521_a = Fp521.create(BigInt('-3'));
const p521_b = BigInt('0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00');
/**
 * NIST secp521r1 aka p521 curve, ECDSA and ECDH methods.
 * Field: `2n**521n - 1n`.
 */
// prettier-ignore
const p521 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({
    a: p521_a,
    b: p521_b,
    Fp: Fp521,
    n: BigInt('0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'),
    Gx: BigInt('0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'),
    Gy: BigInt('0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'),
    h: BigInt(1),
    lowS: false,
    allowedPrivateKeyLengths: [130, 131, 132] // P521 keys are variable-length. Normalize to 132b
}, _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512);
const secp521r1 = p521;
const p521_mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_4__.mapToCurveSimpleSWU)(Fp521, {
    A: p521_a,
    B: p521_b,
    Z: Fp521.create(BigInt('-4')),
}))();
/** Hashing / encoding to p521 points / field. RFC 9380 methods. */
const p521_hasher = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_2__.createHasher)(secp521r1.ProjectivePoint, (scalars) => p521_mapSWU(scalars[0]), {
    DST: 'P521_XMD:SHA-512_SSWU_RO_',
    encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',
    p: Fp521.ORDER,
    m: 1,
    k: 256,
    expand: 'xmd',
    hash: _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha512,
}))();
//# sourceMappingURL=nist.js.map

/***/ }),

/***/ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/p256.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/p256.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),
/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),
/* harmony export */   p256: () => (/* binding */ p256),
/* harmony export */   secp256r1: () => (/* binding */ secp256r1)
/* harmony export */ });
/* harmony import */ var _nist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nist.js */ "./node_modules/@turnkey/crypto/node_modules/@noble/curves/esm/nist.js");
/**
 * NIST secp256r1 aka p256.
 * @module
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */


const p256 = _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256;
const secp256r1 = _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256;
const hashToCurve = /* @__PURE__ */ (() => _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256_hasher.hashToCurve)();
const encodeToCurve = /* @__PURE__ */ (() => _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256_hasher.encodeToCurve)();
//# sourceMappingURL=p256.js.map

/***/ }),

/***/ "./node_modules/@turnkey/encoding/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/encoding/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),
/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),
/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),
/* harmony export */   hexToAscii: () => (/* binding */ hexToAscii),
/* harmony export */   normalizePadding: () => (/* binding */ normalizePadding),
/* harmony export */   pointEncode: () => (/* binding */ pointEncode),
/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),
/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),
/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)
/* harmony export */ });
/**
 * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23
 */
const DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;
function pointEncode(raw) {
    if (raw.length !== 65 || raw[0] !== 0x04) {
        throw new Error("Invalid uncompressed P-256 key");
    }
    const x = raw.slice(1, 33);
    const y = raw.slice(33, 65);
    if (x.length !== 32 || y.length !== 32) {
        throw new Error("Invalid x or y length");
    }
    const prefix = (y[31] & 1) === 0 ? 0x02 : 0x03;
    const compressed = new Uint8Array(33);
    compressed[0] = prefix;
    compressed.set(x, 1);
    return compressed;
}
function stringToBase64urlString(input) {
    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments
    const base64String = btoa(input);
    return base64StringToBase64UrlEncodedString(base64String);
}
function hexStringToBase64url(input, length) {
    // Add an extra 0 to the start of the string to get a valid hex string (even length)
    // (e.g. 0x0123 instead of 0x123)
    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, "0");
    const buffer = uint8ArrayFromHexString(hexString, length);
    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), ""));
}
function base64StringToBase64UrlEncodedString(input) {
    return input.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function uint8ArrayToHexString(input) {
    return input.reduce((result, x) => result + x.toString(16).padStart(2, "0"), "");
}
const uint8ArrayFromHexString = (hexString, length) => {
    const hexRegex = /^[0-9A-Fa-f]+$/;
    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {
        throw new Error(`cannot create uint8array from invalid hex string: "${hexString}"`);
    }
    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));
    if (!length) {
        return buffer;
    }
    if (hexString.length / 2 > length) {
        throw new Error("hex value cannot fit in a buffer of " + length + " byte(s)");
    }
    // If a length is specified, ensure we sufficiently pad
    let paddedBuffer = new Uint8Array(length);
    paddedBuffer.set(buffer, length - buffer.length);
    return paddedBuffer;
};
/**
 * Converts a hex string to an ASCII string.
 * @param {string} hexString - The input hex string to convert.
 * @returns {string} - The converted ASCII string.
 */
function hexToAscii(hexString) {
    let asciiStr = "";
    for (let i = 0; i < hexString.length; i += 2) {
        asciiStr += String.fromCharCode(parseInt(hexString.substr(i, 2), 16));
    }
    return asciiStr;
}
/**
 * Function to normalize padding of byte array with 0's to a target length.
 *
 * @param {Uint8Array} byteArray - The byte array to pad or trim.
 * @param {number} targetLength - The target length after padding or trimming.
 * @returns {Uint8Array} - The normalized byte array.
 */
const normalizePadding = (byteArray, targetLength) => {
    const paddingLength = targetLength - byteArray.length;
    // Add leading 0's to array
    if (paddingLength > 0) {
        const padding = new Uint8Array(paddingLength).fill(0);
        return new Uint8Array([...padding, ...byteArray]);
    }
    // Remove leading 0's from array
    if (paddingLength < 0) {
        const expectedZeroCount = paddingLength * -1;
        let zeroCount = 0;
        for (let i = 0; i < expectedZeroCount && i < byteArray.length; i++) {
            if (byteArray[i] === 0) {
                zeroCount++;
            }
        }
        // Check if the number of zeros found equals the number of zeroes expected
        if (zeroCount !== expectedZeroCount) {
            throw new Error(`invalid number of starting zeroes. Expected number of zeroes: ${expectedZeroCount}. Found: ${zeroCount}.`);
        }
        return byteArray.slice(expectedZeroCount, expectedZeroCount + targetLength);
    }
    return byteArray;
};
// Pure JS implementation of btoa. This is adapted from the following:
// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js
function btoa(s) {
    if (arguments.length === 0) {
        throw new TypeError("1 argument required, but only 0 present.");
    }
    let i;
    // String conversion as required by Web IDL.
    s = `${s}`;
    // "The btoa() method must throw an "InvalidCharacterError" DOMException if
    // data contains any character whose code point is greater than U+00FF."
    for (i = 0; i < s.length; i++) {
        if (s.charCodeAt(i) > 255) {
            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);
        }
    }
    let out = "";
    for (i = 0; i < s.length; i += 3) {
        const groupsOfSix = [
            undefined,
            undefined,
            undefined,
            undefined,
        ];
        groupsOfSix[0] = s.charCodeAt(i) >> 2;
        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;
        if (s.length > i + 1) {
            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;
            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;
        }
        if (s.length > i + 2) {
            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;
            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;
        }
        for (let j = 0; j < groupsOfSix.length; j++) {
            if (typeof groupsOfSix[j] === "undefined") {
                out += "=";
            }
            else {
                out += btoaLookup(groupsOfSix[j]);
            }
        }
    }
    return out;
}
function btoaLookup(index) {
    /**
     * Lookup table for btoa(), which converts a six-bit number into the
     * corresponding ASCII character.
     */
    const keystr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    if (index >= 0 && index < 64) {
        return keystr[index];
    }
    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.
    return undefined;
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)
/* harmony export */ });
/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ "./node_modules/@turnkey/http/dist/base.mjs");
/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ "./node_modules/@turnkey/http/dist/version.mjs");
/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ "./node_modules/@turnkey/http/dist/universal.mjs");




/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */
class TurnkeyClient {
    constructor(config, stamper) {
        this.name = "TurnkeyClient";
        /**
         * Get details about an activity.
         *
         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
         *
         * See also {@link stampGetActivity}.
         */
        this.getActivity = async (input) => {
            return this.request("/public/v1/query/get_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivity}.
         */
        this.stampGetActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an API key.
         *
         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).
         *
         * See also {@link stampGetApiKey}.
         */
        this.getApiKey = async (input) => {
            return this.request("/public/v1/query/get_api_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKey}.
         */
        this.stampGetApiKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about API keys for a user.
         *
         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).
         *
         * See also {@link stampGetApiKeys}.
         */
        this.getApiKeys = async (input) => {
            return this.request("/public/v1/query/get_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKeys}.
         */
        this.stampGetApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get the attestation document corresponding to an enclave.
         *
         * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).
         *
         * See also {@link stampGetAttestationDocument}.
         */
        this.getAttestationDocument = async (input) => {
            return this.request("/public/v1/query/get_attestation", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
         *
         * See also {@link GetAttestationDocument}.
         */
        this.stampGetAttestationDocument = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_attestation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an authenticator.
         *
         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
         *
         * See also {@link stampGetAuthenticator}.
         */
        this.getAuthenticator = async (input) => {
            return this.request("/public/v1/query/get_authenticator", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticator}.
         */
        this.stampGetAuthenticator = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about authenticators for a user.
         *
         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
         *
         * See also {@link stampGetAuthenticators}.
         */
        this.getAuthenticators = async (input) => {
            return this.request("/public/v1/query/get_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticators}.
         */
        this.stampGetAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about Oauth providers for a user.
         *
         * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).
         *
         * See also {@link stampGetOauthProviders}.
         */
        this.getOauthProviders = async (input) => {
            return this.request("/public/v1/query/get_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link GetOauthProviders}.
         */
        this.stampGetOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an organization.
         *
         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
         *
         * See also {@link stampGetOrganization}.
         */
        this.getOrganization = async (input) => {
            return this.request("/public/v1/query/get_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganization}.
         */
        this.stampGetOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get quorum settings and features for an organization.
         *
         * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).
         *
         * See also {@link stampGetOrganizationConfigs}.
         */
        this.getOrganizationConfigs = async (input) => {
            return this.request("/public/v1/query/get_organization_configs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganizationConfigs}.
         */
        this.stampGetOrganizationConfigs = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization_configs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a policy.
         *
         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
         *
         * See also {@link stampGetPolicy}.
         */
        this.getPolicy = async (input) => {
            return this.request("/public/v1/query/get_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicy}.
         */
        this.stampGetPolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get the policy evaluations for an activity.
         *
         * Sign the provided `TGetPolicyEvaluationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy_evaluations).
         *
         * See also {@link stampGetPolicyEvaluations}.
         */
        this.getPolicyEvaluations = async (input) => {
            return this.request("/public/v1/query/get_policy_evaluations", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPolicyEvaluationsBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicyEvaluations}.
         */
        this.stampGetPolicyEvaluations = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy_evaluations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a private key.
         *
         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
         *
         * See also {@link stampGetPrivateKey}.
         */
        this.getPrivateKey = async (input) => {
            return this.request("/public/v1/query/get_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKey}.
         */
        this.stampGetPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a smart contract interface.
         *
         * Sign the provided `TGetSmartContractInterfaceBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_smart_contract_interface).
         *
         * See also {@link stampGetSmartContractInterface}.
         */
        this.getSmartContractInterface = async (input) => {
            return this.request("/public/v1/query/get_smart_contract_interface", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetSmartContractInterfaceBody` by using the client's `stamp` function.
         *
         * See also {@link GetSmartContractInterface}.
         */
        this.stampGetSmartContractInterface = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a user.
         *
         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
         *
         * See also {@link stampGetUser}.
         */
        this.getUser = async (input) => {
            return this.request("/public/v1/query/get_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
         *
         * See also {@link GetUser}.
         */
        this.stampGetUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a wallet.
         *
         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).
         *
         * See also {@link stampGetWallet}.
         */
        this.getWallet = async (input) => {
            return this.request("/public/v1/query/get_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallet}.
         */
        this.stampGetWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get a single wallet account.
         *
         * Sign the provided `TGetWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet_account).
         *
         * See also {@link stampGetWalletAccount}.
         */
        this.getWalletAccount = async (input) => {
            return this.request("/public/v1/query/get_wallet_account", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletAccountBody` by using the client's `stamp` function.
         *
         * See also {@link GetWalletAccount}.
         */
        this.stampGetWalletAccount = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all activities within an organization.
         *
         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
         *
         * See also {@link stampGetActivities}.
         */
        this.getActivities = async (input) => {
            return this.request("/public/v1/query/list_activities", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivities}.
         */
        this.stampGetActivities = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all policies within an organization.
         *
         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
         *
         * See also {@link stampGetPolicies}.
         */
        this.getPolicies = async (input) => {
            return this.request("/public/v1/query/list_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicies}.
         */
        this.stampGetPolicies = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all private key tags within an organization.
         *
         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).
         *
         * See also {@link stampListPrivateKeyTags}.
         */
        this.listPrivateKeyTags = async (input) => {
            return this.request("/public/v1/query/list_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListPrivateKeyTags}.
         */
        this.stampListPrivateKeyTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all private keys within an organization.
         *
         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
         *
         * See also {@link stampGetPrivateKeys}.
         */
        this.getPrivateKeys = async (input) => {
            return this.request("/public/v1/query/list_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKeys}.
         */
        this.stampGetPrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all smart contract interfaces within an organization.
         *
         * Sign the provided `TGetSmartContractInterfacesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_smart_contract_interfaces).
         *
         * See also {@link stampGetSmartContractInterfaces}.
         */
        this.getSmartContractInterfaces = async (input) => {
            return this.request("/public/v1/query/list_smart_contract_interfaces", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetSmartContractInterfacesBody` by using the client's `stamp` function.
         *
         * See also {@link GetSmartContractInterfaces}.
         */
        this.stampGetSmartContractInterfaces = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_smart_contract_interfaces";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get all suborg IDs associated given a parent org ID and an optional filter.
         *
         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).
         *
         * See also {@link stampGetSubOrgIds}.
         */
        this.getSubOrgIds = async (input) => {
            return this.request("/public/v1/query/list_suborgs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
         *
         * See also {@link GetSubOrgIds}.
         */
        this.stampGetSubOrgIds = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all user tags within an organization.
         *
         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).
         *
         * See also {@link stampListUserTags}.
         */
        this.listUserTags = async (input) => {
            return this.request("/public/v1/query/list_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListUserTags}.
         */
        this.stampListUserTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all users within an organization.
         *
         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
         *
         * See also {@link stampGetUsers}.
         */
        this.getUsers = async (input) => {
            return this.request("/public/v1/query/list_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
         *
         * See also {@link GetUsers}.
         */
        this.stampGetUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get all email or phone verified suborg IDs associated given a parent org ID.
         *
         * Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_verified_suborgs).
         *
         * See also {@link stampGetVerifiedSubOrgIds}.
         */
        this.getVerifiedSubOrgIds = async (input) => {
            return this.request("/public/v1/query/list_verified_suborgs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
         *
         * See also {@link GetVerifiedSubOrgIds}.
         */
        this.stampGetVerifiedSubOrgIds = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_verified_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all accounts within a wallet.
         *
         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).
         *
         * See also {@link stampGetWalletAccounts}.
         */
        this.getWalletAccounts = async (input) => {
            return this.request("/public/v1/query/list_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWalletAccounts}.
         */
        this.stampGetWalletAccounts = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all wallets within an organization.
         *
         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).
         *
         * See also {@link stampGetWallets}.
         */
        this.getWallets = async (input) => {
            return this.request("/public/v1/query/list_wallets", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallets}.
         */
        this.stampGetWallets = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get basic information about your current API or WebAuthN user and their organization. Affords sub-organization look ups via parent organization for WebAuthN or API key users.
         *
         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
         *
         * See also {@link stampGetWhoami}.
         */
        this.getWhoami = async (input) => {
            return this.request("/public/v1/query/whoami", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
         *
         * See also {@link GetWhoami}.
         */
        this.stampGetWhoami = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Approve an activity.
         *
         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
         *
         * See also {@link stampApproveActivity}.
         */
        this.approveActivity = async (input) => {
            return this.request("/public/v1/submit/approve_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
         *
         * See also {@link ApproveActivity}.
         */
        this.stampApproveActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Add API keys to an existing user.
         *
         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
         *
         * See also {@link stampCreateApiKeys}.
         */
        this.createApiKeys = async (input) => {
            return this.request("/public/v1/submit/create_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiKeys}.
         */
        this.stampCreateApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create API-only users in an existing organization.
         *
         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
         *
         * See also {@link stampCreateApiOnlyUsers}.
         */
        this.createApiOnlyUsers = async (input) => {
            return this.request("/public/v1/submit/create_api_only_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiOnlyUsers}.
         */
        this.stampCreateApiOnlyUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_only_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create authenticators to authenticate requests to Turnkey.
         *
         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
         *
         * See also {@link stampCreateAuthenticators}.
         */
        this.createAuthenticators = async (input) => {
            return this.request("/public/v1/submit/create_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateAuthenticators}.
         */
        this.stampCreateAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create invitations to join an existing organization.
         *
         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
         *
         * See also {@link stampCreateInvitations}.
         */
        this.createInvitations = async (input) => {
            return this.request("/public/v1/submit/create_invitations", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateInvitations}.
         */
        this.stampCreateInvitations = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_invitations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create Oauth providers for a specified user.
         *
         * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).
         *
         * See also {@link stampCreateOauthProviders}.
         */
        this.createOauthProviders = async (input) => {
            return this.request("/public/v1/submit/create_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateOauthProviders}.
         */
        this.stampCreateOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create new policies.
         *
         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).
         *
         * See also {@link stampCreatePolicies}.
         */
        this.createPolicies = async (input) => {
            return this.request("/public/v1/submit/create_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicies}.
         */
        this.stampCreatePolicies = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a new policy.
         *
         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
         *
         * See also {@link stampCreatePolicy}.
         */
        this.createPolicy = async (input) => {
            return this.request("/public/v1/submit/create_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicy}.
         */
        this.stampCreatePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a private key tag and add it to private keys.
         *
         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
         *
         * See also {@link stampCreatePrivateKeyTag}.
         */
        this.createPrivateKeyTag = async (input) => {
            return this.request("/public/v1/submit/create_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeyTag}.
         */
        this.stampCreatePrivateKeyTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create new private keys.
         *
         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
         *
         * See also {@link stampCreatePrivateKeys}.
         */
        this.createPrivateKeys = async (input) => {
            return this.request("/public/v1/submit/create_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeys}.
         */
        this.stampCreatePrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a read only session for a user (valid for 1 hour).
         *
         * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).
         *
         * See also {@link stampCreateReadOnlySession}.
         */
        this.createReadOnlySession = async (input) => {
            return this.request("/public/v1/submit/create_read_only_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadOnlySession}.
         */
        this.stampCreateReadOnlySession = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_only_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a read write session for a user.
         *
         * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).
         *
         * See also {@link stampCreateReadWriteSession}.
         */
        this.createReadWriteSession = async (input) => {
            return this.request("/public/v1/submit/create_read_write_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadWriteSession}.
         */
        this.stampCreateReadWriteSession = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_write_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create an ABI/IDL in JSON.
         *
         * Sign the provided `TCreateSmartContractInterfaceBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_smart_contract_interface).
         *
         * See also {@link stampCreateSmartContractInterface}.
         */
        this.createSmartContractInterface = async (input) => {
            return this.request("/public/v1/submit/create_smart_contract_interface", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateSmartContractInterfaceBody` by using the client's `stamp` function.
         *
         * See also {@link CreateSmartContractInterface}.
         */
        this.stampCreateSmartContractInterface = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a new sub-organization.
         *
         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
         *
         * See also {@link stampCreateSubOrganization}.
         */
        this.createSubOrganization = async (input) => {
            return this.request("/public/v1/submit/create_sub_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link CreateSubOrganization}.
         */
        this.stampCreateSubOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a user tag and add it to users.
         *
         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
         *
         * See also {@link stampCreateUserTag}.
         */
        this.createUserTag = async (input) => {
            return this.request("/public/v1/submit/create_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUserTag}.
         */
        this.stampCreateUserTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create users in an existing organization.
         *
         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
         *
         * See also {@link stampCreateUsers}.
         */
        this.createUsers = async (input) => {
            return this.request("/public/v1/submit/create_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUsers}.
         */
        this.stampCreateUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a wallet and derive addresses.
         *
         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).
         *
         * See also {@link stampCreateWallet}.
         */
        this.createWallet = async (input) => {
            return this.request("/public/v1/submit/create_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWallet}.
         */
        this.stampCreateWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Derive additional addresses using an existing wallet.
         *
         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).
         *
         * See also {@link stampCreateWalletAccounts}.
         */
        this.createWalletAccounts = async (input) => {
            return this.request("/public/v1/submit/create_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWalletAccounts}.
         */
        this.stampCreateWalletAccounts = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove api keys from a user.
         *
         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
         *
         * See also {@link stampDeleteApiKeys}.
         */
        this.deleteApiKeys = async (input) => {
            return this.request("/public/v1/submit/delete_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteApiKeys}.
         */
        this.stampDeleteApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove authenticators from a user.
         *
         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
         *
         * See also {@link stampDeleteAuthenticators}.
         */
        this.deleteAuthenticators = async (input) => {
            return this.request("/public/v1/submit/delete_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteAuthenticators}.
         */
        this.stampDeleteAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete an existing invitation.
         *
         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).
         *
         * See also {@link stampDeleteInvitation}.
         */
        this.deleteInvitation = async (input) => {
            return this.request("/public/v1/submit/delete_invitation", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteInvitation}.
         */
        this.stampDeleteInvitation = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_invitation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove Oauth providers for a specified user.
         *
         * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).
         *
         * See also {@link stampDeleteOauthProviders}.
         */
        this.deleteOauthProviders = async (input) => {
            return this.request("/public/v1/submit/delete_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteOauthProviders}.
         */
        this.stampDeleteOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete an existing policy.
         *
         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
         *
         * See also {@link stampDeletePolicy}.
         */
        this.deletePolicy = async (input) => {
            return this.request("/public/v1/submit/delete_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePolicy}.
         */
        this.stampDeletePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete private key tags within an organization.
         *
         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).
         *
         * See also {@link stampDeletePrivateKeyTags}.
         */
        this.deletePrivateKeyTags = async (input) => {
            return this.request("/public/v1/submit/delete_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePrivateKeyTags}.
         */
        this.stampDeletePrivateKeyTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete private keys for an organization.
         *
         * Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_keys).
         *
         * See also {@link stampDeletePrivateKeys}.
         */
        this.deletePrivateKeys = async (input) => {
            return this.request("/public/v1/submit/delete_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePrivateKeys}.
         */
        this.stampDeletePrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete a smart contract interface.
         *
         * Sign the provided `TDeleteSmartContractInterfaceBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_smart_contract_interface).
         *
         * See also {@link stampDeleteSmartContractInterface}.
         */
        this.deleteSmartContractInterface = async (input) => {
            return this.request("/public/v1/submit/delete_smart_contract_interface", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteSmartContractInterfaceBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteSmartContractInterface}.
         */
        this.stampDeleteSmartContractInterface = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete a sub-organization.
         *
         * Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_sub_organization).
         *
         * See also {@link stampDeleteSubOrganization}.
         */
        this.deleteSubOrganization = async (input) => {
            return this.request("/public/v1/submit/delete_sub_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteSubOrganization}.
         */
        this.stampDeleteSubOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete user tags within an organization.
         *
         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).
         *
         * See also {@link stampDeleteUserTags}.
         */
        this.deleteUserTags = async (input) => {
            return this.request("/public/v1/submit/delete_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUserTags}.
         */
        this.stampDeleteUserTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete users within an organization.
         *
         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).
         *
         * See also {@link stampDeleteUsers}.
         */
        this.deleteUsers = async (input) => {
            return this.request("/public/v1/submit/delete_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUsers}.
         */
        this.stampDeleteUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete wallets for an organization.
         *
         * Sign the provided `TDeleteWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_wallets).
         *
         * See also {@link stampDeleteWallets}.
         */
        this.deleteWallets = async (input) => {
            return this.request("/public/v1/submit/delete_wallets", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteWallets}.
         */
        this.stampDeleteWallets = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user via email.
         *
         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).
         *
         * See also {@link stampEmailAuth}.
         */
        this.emailAuth = async (input) => {
            return this.request("/public/v1/submit/email_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
         *
         * See also {@link EmailAuth}.
         */
        this.stampEmailAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/email_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Export a private key.
         *
         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).
         *
         * See also {@link stampExportPrivateKey}.
         */
        this.exportPrivateKey = async (input) => {
            return this.request("/public/v1/submit/export_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ExportPrivateKey}.
         */
        this.stampExportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Export a wallet.
         *
         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).
         *
         * See also {@link stampExportWallet}.
         */
        this.exportWallet = async (input) => {
            return this.request("/public/v1/submit/export_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWallet}.
         */
        this.stampExportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Export a wallet account.
         *
         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).
         *
         * See also {@link stampExportWalletAccount}.
         */
        this.exportWalletAccount = async (input) => {
            return this.request("/public/v1/submit/export_wallet_account", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWalletAccount}.
         */
        this.stampExportWalletAccount = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Import a private key.
         *
         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).
         *
         * See also {@link stampImportPrivateKey}.
         */
        this.importPrivateKey = async (input) => {
            return this.request("/public/v1/submit/import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ImportPrivateKey}.
         */
        this.stampImportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Import a wallet.
         *
         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).
         *
         * See also {@link stampImportWallet}.
         */
        this.importWallet = async (input) => {
            return this.request("/public/v1/submit/import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ImportWallet}.
         */
        this.stampImportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initiate a fiat on ramp flow.
         *
         * Sign the provided `TInitFiatOnRampBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_fiat_on_ramp).
         *
         * See also {@link stampInitFiatOnRamp}.
         */
        this.initFiatOnRamp = async (input) => {
            return this.request("/public/v1/submit/init_fiat_on_ramp", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitFiatOnRampBody` by using the client's `stamp` function.
         *
         * See also {@link InitFiatOnRamp}.
         */
        this.stampInitFiatOnRamp = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_fiat_on_ramp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initialize a new private key import.
         *
         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).
         *
         * See also {@link stampInitImportPrivateKey}.
         */
        this.initImportPrivateKey = async (input) => {
            return this.request("/public/v1/submit/init_import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportPrivateKey}.
         */
        this.stampInitImportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initialize a new wallet import.
         *
         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).
         *
         * See also {@link stampInitImportWallet}.
         */
        this.initImportWallet = async (input) => {
            return this.request("/public/v1/submit/init_import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportWallet}.
         */
        this.stampInitImportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initiate a generic OTP activity.
         *
         * Sign the provided `TInitOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp).
         *
         * See also {@link stampInitOtp}.
         */
        this.initOtp = async (input) => {
            return this.request("/public/v1/submit/init_otp", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitOtpBody` by using the client's `stamp` function.
         *
         * See also {@link InitOtp}.
         */
        this.stampInitOtp = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initiate an OTP auth activity.
         *
         * Sign the provided `TInitOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp_auth).
         *
         * See also {@link stampInitOtpAuth}.
         */
        this.initOtpAuth = async (input) => {
            return this.request("/public/v1/submit/init_otp_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
         *
         * See also {@link InitOtpAuth}.
         */
        this.stampInitOtpAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initialize a new email recovery.
         *
         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).
         *
         * See also {@link stampInitUserEmailRecovery}.
         */
        this.initUserEmailRecovery = async (input) => {
            return this.request("/public/v1/submit/init_user_email_recovery", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
         *
         * See also {@link InitUserEmailRecovery}.
         */
        this.stampInitUserEmailRecovery = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_user_email_recovery";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user with an OIDC token (Oauth).
         *
         * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).
         *
         * See also {@link stampOauth}.
         */
        this.oauth = async (input) => {
            return this.request("/public/v1/submit/oauth", input);
        };
        /**
         * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
         *
         * See also {@link Oauth}.
         */
        this.stampOauth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create an Oauth session for a user.
         *
         * Sign the provided `TOauthLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth_login).
         *
         * See also {@link stampOauthLogin}.
         */
        this.oauthLogin = async (input) => {
            return this.request("/public/v1/submit/oauth_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TOauthLoginBody` by using the client's `stamp` function.
         *
         * See also {@link OauthLogin}.
         */
        this.stampOauthLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user with an OTP code sent via email or SMS.
         *
         * Sign the provided `TOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_auth).
         *
         * See also {@link stampOtpAuth}.
         */
        this.otpAuth = async (input) => {
            return this.request("/public/v1/submit/otp_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
         *
         * See also {@link OtpAuth}.
         */
        this.stampOtpAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create an OTP session for a user.
         *
         * Sign the provided `TOtpLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_login).
         *
         * See also {@link stampOtpLogin}.
         */
        this.otpLogin = async (input) => {
            return this.request("/public/v1/submit/otp_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TOtpLoginBody` by using the client's `stamp` function.
         *
         * See also {@link OtpLogin}.
         */
        this.stampOtpLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Complete the process of recovering a user by adding an authenticator.
         *
         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).
         *
         * See also {@link stampRecoverUser}.
         */
        this.recoverUser = async (input) => {
            return this.request("/public/v1/submit/recover_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
         *
         * See also {@link RecoverUser}.
         */
        this.stampRecoverUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/recover_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Reject an activity.
         *
         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
         *
         * See also {@link stampRejectActivity}.
         */
        this.rejectActivity = async (input) => {
            return this.request("/public/v1/submit/reject_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
         *
         * See also {@link RejectActivity}.
         */
        this.stampRejectActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove an organization feature. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).
         *
         * See also {@link stampRemoveOrganizationFeature}.
         */
        this.removeOrganizationFeature = async (input) => {
            return this.request("/public/v1/submit/remove_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link RemoveOrganizationFeature}.
         */
        this.stampRemoveOrganizationFeature = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/remove_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Set an organization feature. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).
         *
         * See also {@link stampSetOrganizationFeature}.
         */
        this.setOrganizationFeature = async (input) => {
            return this.request("/public/v1/submit/set_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link SetOrganizationFeature}.
         */
        this.stampSetOrganizationFeature = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/set_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign a raw payload.
         *
         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
         *
         * See also {@link stampSignRawPayload}.
         */
        this.signRawPayload = async (input) => {
            return this.request("/public/v1/submit/sign_raw_payload", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayload}.
         */
        this.stampSignRawPayload = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign multiple raw payloads with the same signing parameters.
         *
         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).
         *
         * See also {@link stampSignRawPayloads}.
         */
        this.signRawPayloads = async (input) => {
            return this.request("/public/v1/submit/sign_raw_payloads", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayloads}.
         */
        this.stampSignRawPayloads = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payloads";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign a transaction.
         *
         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
         *
         * See also {@link stampSignTransaction}.
         */
        this.signTransaction = async (input) => {
            return this.request("/public/v1/submit/sign_transaction", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
         *
         * See also {@link SignTransaction}.
         */
        this.stampSignTransaction = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a session for a user through stamping client side (API key, wallet client, or passkey client).
         *
         * Sign the provided `TStampLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/stamp_login).
         *
         * See also {@link stampStampLogin}.
         */
        this.stampLogin = async (input) => {
            return this.request("/public/v1/submit/stamp_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TStampLoginBody` by using the client's `stamp` function.
         *
         * See also {@link StampLogin}.
         */
        this.stampStampLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/stamp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update an existing policy.
         *
         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
         *
         * See also {@link stampUpdatePolicy}.
         */
        this.updatePolicy = async (input) => {
            return this.request("/public/v1/submit/update_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePolicy}.
         */
        this.stampUpdatePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
         *
         * See also {@link stampUpdatePrivateKeyTag}.
         */
        this.updatePrivateKeyTag = async (input) => {
            return this.request("/public/v1/submit/update_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePrivateKeyTag}.
         */
        this.stampUpdatePrivateKeyTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
         *
         * See also {@link stampUpdateRootQuorum}.
         */
        this.updateRootQuorum = async (input) => {
            return this.request("/public/v1/submit/update_root_quorum", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateRootQuorum}.
         */
        this.stampUpdateRootQuorum = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_root_quorum";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a user in an existing organization.
         *
         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
         *
         * See also {@link stampUpdateUser}.
         */
        this.updateUser = async (input) => {
            return this.request("/public/v1/submit/update_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUser}.
         */
        this.stampUpdateUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a user's email in an existing organization.
         *
         * Sign the provided `TUpdateUserEmailBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_email).
         *
         * See also {@link stampUpdateUserEmail}.
         */
        this.updateUserEmail = async (input) => {
            return this.request("/public/v1/submit/update_user_email", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserEmailBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserEmail}.
         */
        this.stampUpdateUserEmail = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_email";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a user's name in an existing organization.
         *
         * Sign the provided `TUpdateUserNameBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_name).
         *
         * See also {@link stampUpdateUserName}.
         */
        this.updateUserName = async (input) => {
            return this.request("/public/v1/submit/update_user_name", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserNameBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserName}.
         */
        this.stampUpdateUserName = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_name";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a user's phone number in an existing organization.
         *
         * Sign the provided `TUpdateUserPhoneNumberBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_phone_number).
         *
         * See also {@link stampUpdateUserPhoneNumber}.
         */
        this.updateUserPhoneNumber = async (input) => {
            return this.request("/public/v1/submit/update_user_phone_number", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserPhoneNumberBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserPhoneNumber}.
         */
        this.stampUpdateUserPhoneNumber = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_phone_number";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
         *
         * See also {@link stampUpdateUserTag}.
         */
        this.updateUserTag = async (input) => {
            return this.request("/public/v1/submit/update_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserTag}.
         */
        this.stampUpdateUserTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a wallet for an organization.
         *
         * Sign the provided `TUpdateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_wallet).
         *
         * See also {@link stampUpdateWallet}.
         */
        this.updateWallet = async (input) => {
            return this.request("/public/v1/submit/update_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateWalletBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateWallet}.
         */
        this.stampUpdateWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Verify a generic OTP.
         *
         * Sign the provided `TVerifyOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/verify_otp).
         *
         * See also {@link stampVerifyOtp}.
         */
        this.verifyOtp = async (input) => {
            return this.request("/public/v1/submit/verify_otp", input);
        };
        /**
         * Produce a `SignedRequest` from `TVerifyOtpBody` by using the client's `stamp` function.
         *
         * See also {@link VerifyOtp}.
         */
        this.stampVerifyOtp = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/verify_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite.
         *
         * Sign the provided `TTestRateLimitsBody` with the client's `stamp` function, and submit the request (POST /tkhq/api/v1/test_rate_limits).
         *
         * See also {@link stampTestRateLimits}.
         */
        this.testRateLimits = async (input) => {
            return this.request("/tkhq/api/v1/test_rate_limits", input);
        };
        /**
         * Produce a `SignedRequest` from `TTestRateLimitsBody` by using the client's `stamp` function.
         *
         * See also {@link TestRateLimits}.
         */
        this.stampTestRateLimits = async (input) => {
            const fullUrl = this.config.baseUrl + "/tkhq/api/v1/test_rate_limits";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        if (!config.baseUrl) {
            throw new Error(`Missing base URL. Please verify env vars.`);
        }
        this.config = config;
        this.stamper = stamper;
    }
    async request(url, body) {
        const fullUrl = this.config.baseUrl + url;
        const stringifiedBody = JSON.stringify(body);
        const stamp = await this.stamper.stamp(stringifiedBody);
        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {
            method: "POST",
            headers: {
                [stamp.stampHeaderName]: stamp.stampHeaderValue,
                "X-Client-Version": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,
            },
            body: stringifiedBody,
            redirect: "follow",
        });
        if (!response.ok) {
            let res;
            try {
                res = await response.json();
            }
            catch (_) {
                throw new Error(`${response.status} ${response.statusText}`);
            }
            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);
        }
        const data = await response.json();
        return data;
    }
}


//# sourceMappingURL=public_api.client.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   approveActivity: () => (/* binding */ approveActivity),
/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),
/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),
/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),
/* harmony export */   createInvitations: () => (/* binding */ createInvitations),
/* harmony export */   createOauthProviders: () => (/* binding */ createOauthProviders),
/* harmony export */   createPolicies: () => (/* binding */ createPolicies),
/* harmony export */   createPolicy: () => (/* binding */ createPolicy),
/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),
/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),
/* harmony export */   createReadOnlySession: () => (/* binding */ createReadOnlySession),
/* harmony export */   createReadWriteSession: () => (/* binding */ createReadWriteSession),
/* harmony export */   createSmartContractInterface: () => (/* binding */ createSmartContractInterface),
/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),
/* harmony export */   createUserTag: () => (/* binding */ createUserTag),
/* harmony export */   createUsers: () => (/* binding */ createUsers),
/* harmony export */   createWallet: () => (/* binding */ createWallet),
/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),
/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),
/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),
/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),
/* harmony export */   deleteOauthProviders: () => (/* binding */ deleteOauthProviders),
/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),
/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),
/* harmony export */   deletePrivateKeys: () => (/* binding */ deletePrivateKeys),
/* harmony export */   deleteSmartContractInterface: () => (/* binding */ deleteSmartContractInterface),
/* harmony export */   deleteSubOrganization: () => (/* binding */ deleteSubOrganization),
/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),
/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),
/* harmony export */   deleteWallets: () => (/* binding */ deleteWallets),
/* harmony export */   emailAuth: () => (/* binding */ emailAuth),
/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),
/* harmony export */   exportWallet: () => (/* binding */ exportWallet),
/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),
/* harmony export */   getActivities: () => (/* binding */ getActivities),
/* harmony export */   getActivity: () => (/* binding */ getActivity),
/* harmony export */   getApiKey: () => (/* binding */ getApiKey),
/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),
/* harmony export */   getAttestationDocument: () => (/* binding */ getAttestationDocument),
/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),
/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),
/* harmony export */   getOauthProviders: () => (/* binding */ getOauthProviders),
/* harmony export */   getOrganization: () => (/* binding */ getOrganization),
/* harmony export */   getOrganizationConfigs: () => (/* binding */ getOrganizationConfigs),
/* harmony export */   getPolicies: () => (/* binding */ getPolicies),
/* harmony export */   getPolicy: () => (/* binding */ getPolicy),
/* harmony export */   getPolicyEvaluations: () => (/* binding */ getPolicyEvaluations),
/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),
/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),
/* harmony export */   getSmartContractInterface: () => (/* binding */ getSmartContractInterface),
/* harmony export */   getSmartContractInterfaces: () => (/* binding */ getSmartContractInterfaces),
/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),
/* harmony export */   getUser: () => (/* binding */ getUser),
/* harmony export */   getUsers: () => (/* binding */ getUsers),
/* harmony export */   getVerifiedSubOrgIds: () => (/* binding */ getVerifiedSubOrgIds),
/* harmony export */   getWallet: () => (/* binding */ getWallet),
/* harmony export */   getWalletAccount: () => (/* binding */ getWalletAccount),
/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),
/* harmony export */   getWallets: () => (/* binding */ getWallets),
/* harmony export */   getWhoami: () => (/* binding */ getWhoami),
/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),
/* harmony export */   importWallet: () => (/* binding */ importWallet),
/* harmony export */   initFiatOnRamp: () => (/* binding */ initFiatOnRamp),
/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),
/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),
/* harmony export */   initOtp: () => (/* binding */ initOtp),
/* harmony export */   initOtpAuth: () => (/* binding */ initOtpAuth),
/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),
/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),
/* harmony export */   listUserTags: () => (/* binding */ listUserTags),
/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),
/* harmony export */   oauth: () => (/* binding */ oauth),
/* harmony export */   oauthLogin: () => (/* binding */ oauthLogin),
/* harmony export */   otpAuth: () => (/* binding */ otpAuth),
/* harmony export */   otpLogin: () => (/* binding */ otpLogin),
/* harmony export */   recoverUser: () => (/* binding */ recoverUser),
/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),
/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),
/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),
/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),
/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),
/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),
/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),
/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),
/* harmony export */   signCreateOauthProviders: () => (/* binding */ signCreateOauthProviders),
/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),
/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),
/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),
/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),
/* harmony export */   signCreateReadOnlySession: () => (/* binding */ signCreateReadOnlySession),
/* harmony export */   signCreateReadWriteSession: () => (/* binding */ signCreateReadWriteSession),
/* harmony export */   signCreateSmartContractInterface: () => (/* binding */ signCreateSmartContractInterface),
/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),
/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),
/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),
/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),
/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),
/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),
/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),
/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),
/* harmony export */   signDeleteOauthProviders: () => (/* binding */ signDeleteOauthProviders),
/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),
/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),
/* harmony export */   signDeletePrivateKeys: () => (/* binding */ signDeletePrivateKeys),
/* harmony export */   signDeleteSmartContractInterface: () => (/* binding */ signDeleteSmartContractInterface),
/* harmony export */   signDeleteSubOrganization: () => (/* binding */ signDeleteSubOrganization),
/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),
/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),
/* harmony export */   signDeleteWallets: () => (/* binding */ signDeleteWallets),
/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),
/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),
/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),
/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),
/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),
/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),
/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),
/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),
/* harmony export */   signGetAttestationDocument: () => (/* binding */ signGetAttestationDocument),
/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),
/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),
/* harmony export */   signGetOauthProviders: () => (/* binding */ signGetOauthProviders),
/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),
/* harmony export */   signGetOrganizationConfigs: () => (/* binding */ signGetOrganizationConfigs),
/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),
/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),
/* harmony export */   signGetPolicyEvaluations: () => (/* binding */ signGetPolicyEvaluations),
/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),
/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),
/* harmony export */   signGetSmartContractInterface: () => (/* binding */ signGetSmartContractInterface),
/* harmony export */   signGetSmartContractInterfaces: () => (/* binding */ signGetSmartContractInterfaces),
/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),
/* harmony export */   signGetUser: () => (/* binding */ signGetUser),
/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),
/* harmony export */   signGetVerifiedSubOrgIds: () => (/* binding */ signGetVerifiedSubOrgIds),
/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),
/* harmony export */   signGetWalletAccount: () => (/* binding */ signGetWalletAccount),
/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),
/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),
/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),
/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),
/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),
/* harmony export */   signInitFiatOnRamp: () => (/* binding */ signInitFiatOnRamp),
/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),
/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),
/* harmony export */   signInitOtp: () => (/* binding */ signInitOtp),
/* harmony export */   signInitOtpAuth: () => (/* binding */ signInitOtpAuth),
/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),
/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),
/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),
/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),
/* harmony export */   signOauth: () => (/* binding */ signOauth),
/* harmony export */   signOauthLogin: () => (/* binding */ signOauthLogin),
/* harmony export */   signOtpAuth: () => (/* binding */ signOtpAuth),
/* harmony export */   signOtpLogin: () => (/* binding */ signOtpLogin),
/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),
/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),
/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),
/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),
/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),
/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),
/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),
/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),
/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),
/* harmony export */   signStampLogin: () => (/* binding */ signStampLogin),
/* harmony export */   signTestRateLimits: () => (/* binding */ signTestRateLimits),
/* harmony export */   signTransaction: () => (/* binding */ signTransaction),
/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),
/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),
/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),
/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),
/* harmony export */   signUpdateUserEmail: () => (/* binding */ signUpdateUserEmail),
/* harmony export */   signUpdateUserName: () => (/* binding */ signUpdateUserName),
/* harmony export */   signUpdateUserPhoneNumber: () => (/* binding */ signUpdateUserPhoneNumber),
/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),
/* harmony export */   signUpdateWallet: () => (/* binding */ signUpdateWallet),
/* harmony export */   signVerifyOtp: () => (/* binding */ signVerifyOtp),
/* harmony export */   stampLogin: () => (/* binding */ stampLogin),
/* harmony export */   testRateLimits: () => (/* binding */ testRateLimits),
/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),
/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),
/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),
/* harmony export */   updateUser: () => (/* binding */ updateUser),
/* harmony export */   updateUserEmail: () => (/* binding */ updateUserEmail),
/* harmony export */   updateUserName: () => (/* binding */ updateUserName),
/* harmony export */   updateUserPhoneNumber: () => (/* binding */ updateUserPhoneNumber),
/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag),
/* harmony export */   updateWallet: () => (/* binding */ updateWallet),
/* harmony export */   verifyOtp: () => (/* binding */ verifyOtp)
/* harmony export */ });
/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ "./node_modules/@turnkey/http/dist/base.mjs");


/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */
/**
 * Get activity
 *
 * Get details about an activity.
 *
 * `POST /public/v1/query/get_activity`
 */
const getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */
const signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options,
});
/**
 * Get API key
 *
 * Get details about an API key.
 *
 * `POST /public/v1/query/get_api_key`
 */
const getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_api_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKey}
 */
const signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_api_key",
    body: input.body,
    options,
});
/**
 * Get API keys
 *
 * Get details about API keys for a user.
 *
 * `POST /public/v1/query/get_api_keys`
 */
const getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKeys}
 */
const signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_api_keys",
    body: input.body,
    options,
});
/**
 * Attestation
 *
 * Get the attestation document corresponding to an enclave.
 *
 * `POST /public/v1/query/get_attestation`
 */
const getAttestationDocument = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_attestation",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAttestationDocument}
 */
const signGetAttestationDocument = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_attestation",
    body: input.body,
    options,
});
/**
 * Get authenticator
 *
 * Get details about an authenticator.
 *
 * `POST /public/v1/query/get_authenticator`
 */
const getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_authenticator",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */
const signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_authenticator",
    body: input.body,
    options,
});
/**
 * Get authenticators
 *
 * Get details about authenticators for a user.
 *
 * `POST /public/v1/query/get_authenticators`
 */
const getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */
const signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_authenticators",
    body: input.body,
    options,
});
/**
 * Get Oauth providers
 *
 * Get details about Oauth providers for a user.
 *
 * `POST /public/v1/query/get_oauth_providers`
 */
const getOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOauthProviders}
 */
const signGetOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_oauth_providers",
    body: input.body,
    options,
});
/**
 * Get organization
 *
 * Get details about an organization.
 *
 * `POST /public/v1/query/get_organization`
 */
const getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */
const signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options,
});
/**
 * Get configs
 *
 * Get quorum settings and features for an organization.
 *
 * `POST /public/v1/query/get_organization_configs`
 */
const getOrganizationConfigs = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_organization_configs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganizationConfigs}
 */
const signGetOrganizationConfigs = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_organization_configs",
    body: input.body,
    options,
});
/**
 * Get policy
 *
 * Get details about a policy.
 *
 * `POST /public/v1/query/get_policy`
 */
const getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */
const signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options,
});
/**
 * Get policy evaluations
 *
 * Get the policy evaluations for an activity.
 *
 * `POST /public/v1/query/get_policy_evaluations`
 */
const getPolicyEvaluations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_policy_evaluations",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicyEvaluations` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicyEvaluations}
 */
const signGetPolicyEvaluations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_policy_evaluations",
    body: input.body,
    options,
});
/**
 * Get private key
 *
 * Get details about a private key.
 *
 * `POST /public/v1/query/get_private_key`
 */
const getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */
const signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options,
});
/**
 * Get smart contract interface
 *
 * Get details about a smart contract interface.
 *
 * `POST /public/v1/query/get_smart_contract_interface`
 */
const getSmartContractInterface = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_smart_contract_interface",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetSmartContractInterface` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSmartContractInterface}
 */
const signGetSmartContractInterface = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_smart_contract_interface",
    body: input.body,
    options,
});
/**
 * Get user
 *
 * Get details about a user.
 *
 * `POST /public/v1/query/get_user`
 */
const getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */
const signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_user",
    body: input.body,
    options,
});
/**
 * Get wallet
 *
 * Get details about a wallet.
 *
 * `POST /public/v1/query/get_wallet`
 */
const getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallet}
 */
const signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_wallet",
    body: input.body,
    options,
});
/**
 * Get wallet account
 *
 * Get a single wallet account.
 *
 * `POST /public/v1/query/get_wallet_account`
 */
const getWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/get_wallet_account",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccount}
 */
const signGetWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/get_wallet_account",
    body: input.body,
    options,
});
/**
 * List activities
 *
 * List all activities within an organization.
 *
 * `POST /public/v1/query/list_activities`
 */
const getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */
const signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options,
});
/**
 * List policies
 *
 * List all policies within an organization.
 *
 * `POST /public/v1/query/list_policies`
 */
const getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */
const signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options,
});
/**
 * List private key tags
 *
 * List all private key tags within an organization.
 *
 * `POST /public/v1/query/list_private_key_tags`
 */
const listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_private_key_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListPrivateKeyTags}
 */
const signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_private_key_tags",
    body: input.body,
    options,
});
/**
 * List private keys
 *
 * List all private keys within an organization.
 *
 * `POST /public/v1/query/list_private_keys`
 */
const getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */
const signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options,
});
/**
 * List smart contract interfaces
 *
 * List all smart contract interfaces within an organization.
 *
 * `POST /public/v1/query/list_smart_contract_interfaces`
 */
const getSmartContractInterfaces = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_smart_contract_interfaces",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetSmartContractInterfaces` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSmartContractInterfaces}
 */
const signGetSmartContractInterfaces = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_smart_contract_interfaces",
    body: input.body,
    options,
});
/**
 * Get sub-organizations
 *
 * Get all suborg IDs associated given a parent org ID and an optional filter.
 *
 * `POST /public/v1/query/list_suborgs`
 */
const getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_suborgs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSubOrgIds}
 */
const signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_suborgs",
    body: input.body,
    options,
});
/**
 * List user tags
 *
 * List all user tags within an organization.
 *
 * `POST /public/v1/query/list_user_tags`
 */
const listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_user_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListUserTags}
 */
const signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_user_tags",
    body: input.body,
    options,
});
/**
 * List users
 *
 * List all users within an organization.
 *
 * `POST /public/v1/query/list_users`
 */
const getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */
const signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_users",
    body: input.body,
    options,
});
/**
 * Get verified sub-organizations
 *
 * Get all email or phone verified suborg IDs associated given a parent org ID.
 *
 * `POST /public/v1/query/list_verified_suborgs`
 */
const getVerifiedSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_verified_suborgs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetVerifiedSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetVerifiedSubOrgIds}
 */
const signGetVerifiedSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_verified_suborgs",
    body: input.body,
    options,
});
/**
 * List wallets accounts
 *
 * List all accounts within a wallet.
 *
 * `POST /public/v1/query/list_wallet_accounts`
 */
const getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccounts}
 */
const signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_wallet_accounts",
    body: input.body,
    options,
});
/**
 * List wallets
 *
 * List all wallets within an organization.
 *
 * `POST /public/v1/query/list_wallets`
 */
const getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/list_wallets",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallets}
 */
const signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/list_wallets",
    body: input.body,
    options,
});
/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords sub-organization look ups via parent organization for WebAuthN or API key users.
 *
 * `POST /public/v1/query/whoami`
 */
const getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */
const signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/query/whoami",
    body: input.body,
    options,
});
/**
 * Approve activity
 *
 * Approve an activity.
 *
 * `POST /public/v1/submit/approve_activity`
 */
const approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */
const signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options,
});
/**
 * Create API keys
 *
 * Add API keys to an existing user.
 *
 * `POST /public/v1/submit/create_api_keys`
 */
const createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */
const signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options,
});
/**
 * Create API-only users
 *
 * Create API-only users in an existing organization.
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
const createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */
const signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options,
});
/**
 * Create authenticators
 *
 * Create authenticators to authenticate requests to Turnkey.
 *
 * `POST /public/v1/submit/create_authenticators`
 */
const createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */
const signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options,
});
/**
 * Create invitations
 *
 * Create invitations to join an existing organization.
 *
 * `POST /public/v1/submit/create_invitations`
 */
const createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */
const signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options,
});
/**
 * Create Oauth providers
 *
 * Create Oauth providers for a specified user.
 *
 * `POST /public/v1/submit/create_oauth_providers`
 */
const createOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateOauthProviders}
 */
const signCreateOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_oauth_providers",
    body: input.body,
    options,
});
/**
 * Create policies
 *
 * Create new policies.
 *
 * `POST /public/v1/submit/create_policies`
 */
const createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_policies",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicies}
 */
const signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_policies",
    body: input.body,
    options,
});
/**
 * Create policy
 *
 * Create a new policy.
 *
 * `POST /public/v1/submit/create_policy`
 */
const createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */
const signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options,
});
/**
 * Create private key tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */
const createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */
const signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_private_key_tag",
    body: input.body,
    options,
});
/**
 * Create private keys
 *
 * Create new private keys.
 *
 * `POST /public/v1/submit/create_private_keys`
 */
const createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */
const signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options,
});
/**
 * Create read only session
 *
 * Create a read only session for a user (valid for 1 hour).
 *
 * `POST /public/v1/submit/create_read_only_session`
 */
const createReadOnlySession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_read_only_session",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadOnlySession}
 */
const signCreateReadOnlySession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_read_only_session",
    body: input.body,
    options,
});
/**
 * Create read write session
 *
 * Create a read write session for a user.
 *
 * `POST /public/v1/submit/create_read_write_session`
 */
const createReadWriteSession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_read_write_session",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadWriteSession}
 */
const signCreateReadWriteSession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_read_write_session",
    body: input.body,
    options,
});
/**
 * Create smart contract interface
 *
 * Create an ABI/IDL in JSON.
 *
 * `POST /public/v1/submit/create_smart_contract_interface`
 */
const createSmartContractInterface = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_smart_contract_interface",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateSmartContractInterface` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSmartContractInterface}
 */
const signCreateSmartContractInterface = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_smart_contract_interface",
    body: input.body,
    options,
});
/**
 * Create sub-organization
 *
 * Create a new sub-organization.
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
const createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */
const signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options,
});
/**
 * Create user tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */
const createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */
const signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_user_tag",
    body: input.body,
    options,
});
/**
 * Create users
 *
 * Create users in an existing organization.
 *
 * `POST /public/v1/submit/create_users`
 */
const createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */
const signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options,
});
/**
 * Create wallet
 *
 * Create a wallet and derive addresses.
 *
 * `POST /public/v1/submit/create_wallet`
 */
const createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWallet}
 */
const signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_wallet",
    body: input.body,
    options,
});
/**
 * Create wallet accounts
 *
 * Derive additional addresses using an existing wallet.
 *
 * `POST /public/v1/submit/create_wallet_accounts`
 */
const createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/create_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWalletAccounts}
 */
const signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/create_wallet_accounts",
    body: input.body,
    options,
});
/**
 * Delete API keys
 *
 * Remove api keys from a user.
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
const deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */
const signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options,
});
/**
 * Delete authenticators
 *
 * Remove authenticators from a user.
 *
 * `POST /public/v1/submit/delete_authenticators`
 */
const deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */
const signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_authenticators",
    body: input.body,
    options,
});
/**
 * Delete invitation
 *
 * Delete an existing invitation.
 *
 * `POST /public/v1/submit/delete_invitation`
 */
const deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_invitation",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */
const signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_invitation",
    body: input.body,
    options,
});
/**
 * Delete Oauth providers
 *
 * Remove Oauth providers for a specified user.
 *
 * `POST /public/v1/submit/delete_oauth_providers`
 */
const deleteOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteOauthProviders}
 */
const signDeleteOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_oauth_providers",
    body: input.body,
    options,
});
/**
 * Delete policy
 *
 * Delete an existing policy.
 *
 * `POST /public/v1/submit/delete_policy`
 */
const deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */
const signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options,
});
/**
 * Delete private key tags
 *
 * Delete private key tags within an organization.
 *
 * `POST /public/v1/submit/delete_private_key_tags`
 */
const deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_private_key_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeyTags}
 */
const signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_private_key_tags",
    body: input.body,
    options,
});
/**
 * Delete private keys
 *
 * Delete private keys for an organization.
 *
 * `POST /public/v1/submit/delete_private_keys`
 */
const deletePrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeys}
 */
const signDeletePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_private_keys",
    body: input.body,
    options,
});
/**
 * Delete smart contract interface
 *
 * Delete a smart contract interface.
 *
 * `POST /public/v1/submit/delete_smart_contract_interface`
 */
const deleteSmartContractInterface = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_smart_contract_interface",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteSmartContractInterface` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteSmartContractInterface}
 */
const signDeleteSmartContractInterface = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_smart_contract_interface",
    body: input.body,
    options,
});
/**
 * Delete sub-organization
 *
 * Delete a sub-organization.
 *
 * `POST /public/v1/submit/delete_sub_organization`
 */
const deleteSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_sub_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteSubOrganization}
 */
const signDeleteSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_sub_organization",
    body: input.body,
    options,
});
/**
 * Delete user tags
 *
 * Delete user tags within an organization.
 *
 * `POST /public/v1/submit/delete_user_tags`
 */
const deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_user_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUserTags}
 */
const signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_user_tags",
    body: input.body,
    options,
});
/**
 * Delete users
 *
 * Delete users within an organization.
 *
 * `POST /public/v1/submit/delete_users`
 */
const deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUsers}
 */
const signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_users",
    body: input.body,
    options,
});
/**
 * Delete wallets
 *
 * Delete wallets for an organization.
 *
 * `POST /public/v1/submit/delete_wallets`
 */
const deleteWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/delete_wallets",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteWallets}
 */
const signDeleteWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/delete_wallets",
    body: input.body,
    options,
});
/**
 * Perform email auth
 *
 * Authenticate a user via email.
 *
 * `POST /public/v1/submit/email_auth`
 */
const emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/email_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link EmailAuth}
 */
const signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/email_auth",
    body: input.body,
    options,
});
/**
 * Export private key
 *
 * Export a private key.
 *
 * `POST /public/v1/submit/export_private_key`
 */
const exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/export_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportPrivateKey}
 */
const signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/export_private_key",
    body: input.body,
    options,
});
/**
 * Export wallet
 *
 * Export a wallet.
 *
 * `POST /public/v1/submit/export_wallet`
 */
const exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/export_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWallet}
 */
const signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/export_wallet",
    body: input.body,
    options,
});
/**
 * Export wallet account
 *
 * Export a wallet account.
 *
 * `POST /public/v1/submit/export_wallet_account`
 */
const exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/export_wallet_account",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWalletAccount}
 */
const signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/export_wallet_account",
    body: input.body,
    options,
});
/**
 * Import private key
 *
 * Import a private key.
 *
 * `POST /public/v1/submit/import_private_key`
 */
const importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/import_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportPrivateKey}
 */
const signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/import_private_key",
    body: input.body,
    options,
});
/**
 * Import wallet
 *
 * Import a wallet.
 *
 * `POST /public/v1/submit/import_wallet`
 */
const importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/import_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportWallet}
 */
const signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/import_wallet",
    body: input.body,
    options,
});
/**
 * Init fiat on ramp
 *
 * Initiate a fiat on ramp flow.
 *
 * `POST /public/v1/submit/init_fiat_on_ramp`
 */
const initFiatOnRamp = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_fiat_on_ramp",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitFiatOnRamp` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitFiatOnRamp}
 */
const signInitFiatOnRamp = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_fiat_on_ramp",
    body: input.body,
    options,
});
/**
 * Init import private key
 *
 * Initialize a new private key import.
 *
 * `POST /public/v1/submit/init_import_private_key`
 */
const initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_import_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportPrivateKey}
 */
const signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_import_private_key",
    body: input.body,
    options,
});
/**
 * Init import wallet
 *
 * Initialize a new wallet import.
 *
 * `POST /public/v1/submit/init_import_wallet`
 */
const initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_import_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportWallet}
 */
const signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_import_wallet",
    body: input.body,
    options,
});
/**
 * Init generic OTP
 *
 * Initiate a generic OTP activity.
 *
 * `POST /public/v1/submit/init_otp`
 */
const initOtp = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_otp",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitOtp` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitOtp}
 */
const signInitOtp = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_otp",
    body: input.body,
    options,
});
/**
 * Init OTP auth
 *
 * Initiate an OTP auth activity.
 *
 * `POST /public/v1/submit/init_otp_auth`
 */
const initOtpAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_otp_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitOtpAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitOtpAuth}
 */
const signInitOtpAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_otp_auth",
    body: input.body,
    options,
});
/**
 * Init email recovery
 *
 * Initialize a new email recovery.
 *
 * `POST /public/v1/submit/init_user_email_recovery`
 */
const initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/init_user_email_recovery",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitUserEmailRecovery}
 */
const signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/init_user_email_recovery",
    body: input.body,
    options,
});
/**
 * Oauth
 *
 * Authenticate a user with an OIDC token (Oauth).
 *
 * `POST /public/v1/submit/oauth`
 */
const oauth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/oauth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.
 *
 * See {@link Oauth}
 */
const signOauth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/oauth",
    body: input.body,
    options,
});
/**
 * Login with Oauth
 *
 * Create an Oauth session for a user.
 *
 * `POST /public/v1/submit/oauth_login`
 */
const oauthLogin = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/oauth_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OauthLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link OauthLogin}
 */
const signOauthLogin = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/oauth_login",
    body: input.body,
    options,
});
/**
 * OTP auth
 *
 * Authenticate a user with an OTP code sent via email or SMS.
 *
 * `POST /public/v1/submit/otp_auth`
 */
const otpAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/otp_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OtpAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link OtpAuth}
 */
const signOtpAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/otp_auth",
    body: input.body,
    options,
});
/**
 * Login with OTP
 *
 * Create an OTP session for a user.
 *
 * `POST /public/v1/submit/otp_login`
 */
const otpLogin = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/otp_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OtpLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link OtpLogin}
 */
const signOtpLogin = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/otp_login",
    body: input.body,
    options,
});
/**
 * Recover a user
 *
 * Complete the process of recovering a user by adding an authenticator.
 *
 * `POST /public/v1/submit/recover_user`
 */
const recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/recover_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link RecoverUser}
 */
const signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/recover_user",
    body: input.body,
    options,
});
/**
 * Reject activity
 *
 * Reject an activity.
 *
 * `POST /public/v1/submit/reject_activity`
 */
const rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */
const signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options,
});
/**
 * Remove organization feature
 *
 * Remove an organization feature. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/remove_organization_feature`
 */
const removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/remove_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link RemoveOrganizationFeature}
 */
const signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/remove_organization_feature",
    body: input.body,
    options,
});
/**
 * Set organization feature
 *
 * Set an organization feature. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/set_organization_feature`
 */
const setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/set_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link SetOrganizationFeature}
 */
const signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/set_organization_feature",
    body: input.body,
    options,
});
/**
 * Sign raw payload
 *
 * Sign a raw payload.
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
const signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */
const signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options,
});
/**
 * Sign raw payloads
 *
 * Sign multiple raw payloads with the same signing parameters.
 *
 * `POST /public/v1/submit/sign_raw_payloads`
 */
const signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/sign_raw_payloads",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayloads}
 */
const signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/sign_raw_payloads",
    body: input.body,
    options,
});
/**
 * Sign transaction
 *
 * Sign a transaction.
 *
 * `POST /public/v1/submit/sign_transaction`
 */
const signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */
const signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options,
});
/**
 * Login with a stamp
 *
 * Create a session for a user through stamping client side (API key, wallet client, or passkey client).
 *
 * `POST /public/v1/submit/stamp_login`
 */
const stampLogin = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/stamp_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `StampLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link StampLogin}
 */
const signStampLogin = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/stamp_login",
    body: input.body,
    options,
});
/**
 * Update policy
 *
 * Update an existing policy.
 *
 * `POST /public/v1/submit/update_policy`
 */
const updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */
const signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_policy",
    body: input.body,
    options,
});
/**
 * Update private key tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
const updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */
const signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options,
});
/**
 * Update root quorum
 *
 * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
const updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */
const signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options,
});
/**
 * Update user
 *
 * Update a user in an existing organization.
 *
 * `POST /public/v1/submit/update_user`
 */
const updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */
const signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_user",
    body: input.body,
    options,
});
/**
 * Update user's email
 *
 * Update a user's email in an existing organization.
 *
 * `POST /public/v1/submit/update_user_email`
 */
const updateUserEmail = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_user_email",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserEmail` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserEmail}
 */
const signUpdateUserEmail = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_user_email",
    body: input.body,
    options,
});
/**
 * Update user's name
 *
 * Update a user's name in an existing organization.
 *
 * `POST /public/v1/submit/update_user_name`
 */
const updateUserName = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_user_name",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserName` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserName}
 */
const signUpdateUserName = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_user_name",
    body: input.body,
    options,
});
/**
 * Update user's phone number
 *
 * Update a user's phone number in an existing organization.
 *
 * `POST /public/v1/submit/update_user_phone_number`
 */
const updateUserPhoneNumber = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_user_phone_number",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserPhoneNumber` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserPhoneNumber}
 */
const signUpdateUserPhoneNumber = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_user_phone_number",
    body: input.body,
    options,
});
/**
 * Update user tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
const updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */
const signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options,
});
/**
 * Update wallet
 *
 * Update a wallet for an organization.
 *
 * `POST /public/v1/submit/update_wallet`
 */
const updateWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/update_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateWallet}
 */
const signUpdateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/update_wallet",
    body: input.body,
    options,
});
/**
 * Verify generic OTP
 *
 * Verify a generic OTP.
 *
 * `POST /public/v1/submit/verify_otp`
 */
const verifyOtp = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/public/v1/submit/verify_otp",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `VerifyOtp` request, ready to be POSTed to Turnkey.
 *
 * See {@link VerifyOtp}
 */
const signVerifyOtp = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/public/v1/submit/verify_otp",
    body: input.body,
    options,
});
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
const nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
});
/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */
const signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
});
/**
 * Test rate limit
 *
 * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite.
 *
 * `POST /tkhq/api/v1/test_rate_limits`
 */
const testRateLimits = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({
    uri: "/tkhq/api/v1/test_rate_limits",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `TestRateLimits` request, ready to be POSTed to Turnkey.
 *
 * See {@link TestRateLimits}
 */
const signTestRateLimits = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({
    uri: "/tkhq/api/v1/test_rate_limits",
    body: input.body,
    options,
});


//# sourceMappingURL=public_api.fetcher.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/async.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/async.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),
/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)
/* harmony export */ });
/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ "./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs");
/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ "./node_modules/@turnkey/http/dist/shared.mjs");



const DEFAULT_REFRESH_INTERVAL_MS = 500;
/**
 * Wraps a request to create a fetcher with built-in async polling support.
 *
 * @deprecated this function only works with {@link TurnkeyApi}.
 * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.
 */
function withAsyncPolling(params) {
    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;
    return async (input) => {
        const initialResponse = await request(input);
        let activity = initialResponse.activity;
        while (true) {
            switch (activity.status) {
                case "ACTIVITY_STATUS_COMPLETED": {
                    return activity;
                }
                case "ACTIVITY_STATUS_CREATED": {
                    // Async pending state -- keep polling
                    break;
                }
                case "ACTIVITY_STATUS_PENDING": {
                    // Async pending state -- keep polling
                    break;
                }
                case "ACTIVITY_STATUS_CONSENSUS_NEEDED": {
                    // If the activity requires consensus, we shouldn't be polling forever.
                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,
                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`
                    // when the required approvals/rejections are in place.
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Consensus needed for activity ${activity.id}`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                case "ACTIVITY_STATUS_FAILED": {
                    // Activity failed
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Activity ${activity.id} failed`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                case "ACTIVITY_STATUS_REJECTED": {
                    // Activity was rejected
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Activity ${activity.id} was rejected`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                default: {
                    // Make sure the switch block is exhaustive
                    assertNever(activity.status);
                }
            }
            await sleep(refreshIntervalMs);
            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({
                body: {
                    activityId: activity.id,
                    organizationId: activity.organizationId,
                },
            });
            activity = pollingResponse.activity;
        }
    };
}
/**
 * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.
 * The default refresh interval is 500ms.
 *
 * The returned poller will poll until the activity becomes `COMPLETED`.
 * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.
 *
 * @example
 * const activityPoller = createActivityPoller(client, client.createPrivateKeys);
 * const activity = await activityPoller(input);
 * console.log(activity.result); // activity is completed
 */
function createActivityPoller(params) {
    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;
    return async (input) => {
        const initialResponse = await requestFn(input);
        let activity = initialResponse.activity;
        while (true) {
            switch (activity.status) {
                case "ACTIVITY_STATUS_COMPLETED": {
                    return activity;
                }
                case "ACTIVITY_STATUS_CREATED": {
                    // Async pending state -- keep polling
                    break;
                }
                case "ACTIVITY_STATUS_PENDING": {
                    // Async pending state -- keep polling
                    break;
                }
                case "ACTIVITY_STATUS_CONSENSUS_NEEDED": {
                    // If the activity requires consensus, we shouldn't be polling forever.
                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,
                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`
                    // when the required approvals/rejections are in place.
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Consensus needed for activity ${activity.id}`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                case "ACTIVITY_STATUS_FAILED": {
                    // Activity failed
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Activity ${activity.id} failed`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                case "ACTIVITY_STATUS_REJECTED": {
                    // Activity was rejected
                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({
                        message: `Activity ${activity.id} was rejected`,
                        activityId: activity.id,
                        activityStatus: activity.status,
                        activityType: activity.type,
                    });
                }
                default: {
                    // Make sure the switch block is exhaustive
                    assertNever(activity.status);
                }
            }
            await sleep(refreshIntervalMs);
            const pollingResponse = await client.getActivity({
                activityId: activity.id,
                organizationId: activity.organizationId,
            });
            activity = pollingResponse.activity;
        }
    };
}
function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
function assertNever(input, message) {
    throw new Error(`Unexpected case: ${JSON.stringify(input)}`);
}


//# sourceMappingURL=async.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/base.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/base.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),
/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),
/* harmony export */   isHttpClient: () => (/* binding */ isHttpClient),
/* harmony export */   request: () => (/* binding */ request),
/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),
/* harmony export */   signedRequest: () => (/* binding */ signedRequest)
/* harmony export */ });
/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ "./node_modules/@turnkey/api-key-stamper/dist/index.mjs");
/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ "./node_modules/@turnkey/http/dist/universal.mjs");
/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ "./node_modules/@turnkey/http/dist/config.mjs");
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ "./node_modules/@turnkey/http/dist/webauthn.mjs");






const sharedHeaders = {};
const sharedRequestOptions = {
    redirect: "follow",
};
/**
 * @deprecated
 */
async function signedRequest(input) {
    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;
    const url = constructUrl({
        uri: inputUri,
        query: inputQuery,
        substitution: inputSubstitution,
    });
    const body = JSON.stringify(inputBody);
    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);
    return {
        url: url.toString(),
        body,
        stamp,
    };
}
async function request(input) {
    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;
    const url = constructUrl({
        uri: inputUri,
        query: inputQuery,
        substitution: inputSubstitution,
    });
    const { sealedBody, xStamp } = await sealAndStampRequestBody({
        body: inputBody,
    });
    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {
        ...sharedRequestOptions,
        method,
        headers: {
            ...sharedHeaders,
            ...inputHeaders,
            "X-Stamp": xStamp,
        },
        body: sealedBody,
    });
    if (!response.ok) {
        // Can't use native `cause` here because it's not well supported on Node v16
        // https://node.green/#ES2022-features-Error-cause-property
        let res;
        try {
            res = await response.json();
        }
        catch (_) {
            throw new Error(`${response.status} ${response.statusText}`);
        }
        throw new TurnkeyRequestError(res);
    }
    const data = await response.json();
    return data;
}
function constructUrl(input) {
    const { uri, query, substitution } = input;
    const baseUrl = getBaseUrl();
    const url = new URL(substitutePath(uri, substitution), baseUrl);
    for (const key in query) {
        const value = query[key];
        if (Array.isArray(value)) {
            for (const item of value) {
                url.searchParams.append(key, item);
            }
        }
        else {
            url.searchParams.append(key, value ?? "");
        }
    }
    return url;
}
function getBaseUrl() {
    try {
        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();
        return baseUrl;
    }
    catch (e) {
        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();
        return baseUrl;
    }
}
function substitutePath(uri, substitutionMap) {
    let result = uri;
    const keyList = Object.keys(substitutionMap);
    for (const key of keyList) {
        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);
        invariant(output !== result, `Substitution error: cannot find "${key}" in URI "${uri}". \`substitutionMap\`: ${JSON.stringify(substitutionMap)}`);
        result = output;
    }
    invariant(!/\{.*\}/.test(result), `Substitution error: found unsubstituted components in "${result}"`);
    return result;
}
function invariant(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}
function stableStringify(input) {
    return JSON.stringify(input);
}
/**
 * Seals and stamps the request body with your Turnkey API credentials.
 *
 * You can either:
 * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`
 * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments
 */
async function sealAndStampRequestBody(input) {
    const { body } = input;
    let { apiPublicKey, apiPrivateKey } = input;
    if (!apiPublicKey) {
        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();
        apiPublicKey = config.apiPublicKey;
    }
    if (!apiPrivateKey) {
        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();
        apiPrivateKey = config.apiPrivateKey;
    }
    const sealedBody = stableStringify(body);
    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({
        content: sealedBody,
        privateKey: apiPrivateKey,
        publicKey: apiPublicKey,
    });
    const sealedStamp = stableStringify({
        publicKey: apiPublicKey,
        scheme: "SIGNATURE_SCHEME_TK_API_P256",
        signature: signature,
    });
    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);
    return {
        sealedBody,
        xStamp,
    };
}
// Check if the client is an instance of TurnkeyClient. We check the name field here since the 'instanceof' operator does not work across if the http client isn't EXACTLY the same (mismatching versions).
function isHttpClient(client) {
    return client?.name === "TurnkeyClient";
}
class TurnkeyRequestError extends Error {
    constructor(input) {
        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;
        if (input.details != null) {
            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
        }
        super(turnkeyErrorMessage);
        this.name = "TurnkeyRequestError";
        this.details = input.details ?? null;
        this.code = input.code;
    }
}


//# sourceMappingURL=base.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/config.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/config.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   browserInit: () => (/* binding */ browserInit),
/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),
/* harmony export */   getConfig: () => (/* binding */ getConfig),
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
const config = {
    apiPublicKey: null,
    apiPrivateKey: null,
    baseUrl: null,
};
const browserConfig = {
    baseUrl: null,
};
/**
 * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.
 */
function browserInit(value) {
    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, "baseUrl");
}
/**
 * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.
 */
function init(value) {
    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, "apiPublicKey");
    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, "apiPrivateKey");
    config.baseUrl = assertNonEmptyString(value.baseUrl, "baseUrl");
}
function getConfig() {
    return {
        apiPublicKey: assertNonEmptyString(config.apiPublicKey, "apiPublicKey"),
        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, "apiPrivateKey"),
        baseUrl: assertNonEmptyString(config.baseUrl, "baseUrl"),
    };
}
function getBrowserConfig() {
    return {
        baseUrl: assertNonEmptyString(browserConfig.baseUrl, "baseUrl"),
    };
}
function assertNonEmptyString(input, name) {
    if (typeof input !== "string" || !input) {
        throw new Error(`"${name}" must be a non-empty string`);
    }
    return input;
}


//# sourceMappingURL=config.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InvalidArgumentError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.InvalidArgumentError),
/* harmony export */   TERMINAL_ACTIVITY_STATUSES: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TERMINAL_ACTIVITY_STATUSES),
/* harmony export */   TurnkeyActivityConsensusNeededError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityConsensusNeededError),
/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),
/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),
/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),
/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),
/* harmony export */   assertActivityCompleted: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.assertActivityCompleted),
/* harmony export */   assertNonNull: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.assertNonNull),
/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),
/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),
/* harmony export */   getSignatureFromActivity: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.getSignatureFromActivity),
/* harmony export */   getSignaturesFromActivity: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.getSignaturesFromActivity),
/* harmony export */   getSignedTransactionFromActivity: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.getSignedTransactionFromActivity),
/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),
/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),
/* harmony export */   isHttpClient: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.isHttpClient),
/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),
/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)
/* harmony export */ });
/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ "./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs");
/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ "./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs");
/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ "./node_modules/@turnkey/http/dist/config.mjs");
/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ "./node_modules/@turnkey/http/dist/base.mjs");
/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ "./node_modules/@turnkey/http/dist/shared.mjs");
/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ "./node_modules/@turnkey/http/dist/webauthn.mjs");
/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ "./node_modules/@turnkey/http/dist/async.mjs");
/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ "./node_modules/@turnkey/http/dist/version.mjs");









//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/shared.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/shared.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),
/* harmony export */   TERMINAL_ACTIVITY_STATUSES: () => (/* binding */ TERMINAL_ACTIVITY_STATUSES),
/* harmony export */   TurnkeyActivityConsensusNeededError: () => (/* binding */ TurnkeyActivityConsensusNeededError),
/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError),
/* harmony export */   assertActivityCompleted: () => (/* binding */ assertActivityCompleted),
/* harmony export */   assertNonNull: () => (/* binding */ assertNonNull),
/* harmony export */   getSignatureFromActivity: () => (/* binding */ getSignatureFromActivity),
/* harmony export */   getSignaturesFromActivity: () => (/* binding */ getSignaturesFromActivity),
/* harmony export */   getSignedTransactionFromActivity: () => (/* binding */ getSignedTransactionFromActivity)
/* harmony export */ });
class TurnkeyActivityError extends Error {
    constructor(input) {
        const { message, cause, activityId, activityStatus, activityType } = input;
        super(message);
        this.name = "TurnkeyActivityError";
        this.activityId = activityId ?? undefined;
        this.activityStatus = activityStatus ?? undefined;
        this.activityType = activityType ?? undefined;
        this.cause = cause ?? undefined;
    }
}
class TurnkeyActivityConsensusNeededError extends Error {
    constructor(input) {
        const { message, cause, activityId, activityStatus, activityType } = input;
        super(message);
        this.name = "TurnkeyActivityConsensusNeededError";
        this.activityId = activityId ?? undefined;
        this.activityStatus = activityStatus ?? undefined;
        this.activityType = activityType ?? undefined;
        this.cause = cause ?? undefined;
    }
}
class InvalidArgumentError extends Error {
    constructor(input) {
        const { message, cause, activityId, activityStatus, activityType } = input;
        super(message);
        this.name = "InvalidArgumentError";
        this.activityId = activityId ?? undefined;
        this.activityStatus = activityStatus ?? undefined;
        this.activityType = activityType ?? undefined;
        this.cause = cause ?? undefined;
    }
}
function assertActivityCompleted(activity) {
    const { id: activityId, status: activityStatus } = activity;
    if (activityStatus === "ACTIVITY_STATUS_CONSENSUS_NEEDED") {
        throw new TurnkeyActivityConsensusNeededError({
            message: "Activity requires consensus",
            activityId,
            activityStatus,
        });
    }
    if (activityStatus !== "ACTIVITY_STATUS_COMPLETED") {
        throw new TurnkeyActivityError({
            message: `Expected COMPLETED status, got ${activityStatus}`,
            activityId,
            activityStatus,
        });
    }
    return true;
}
function assertNonNull(input) {
    if (input == null) {
        throw new Error(`Got unexpected ${JSON.stringify(input)}`);
    }
    return input;
}
const TERMINAL_ACTIVITY_STATUSES = [
    "ACTIVITY_STATUS_COMPLETED",
    "ACTIVITY_STATUS_FAILED",
    "ACTIVITY_STATUS_REJECTED",
];
/**
 * This function is a helper method to easily extract a signature string from a completed signing activity.
 * Particularly useful for scenarios where a signature requires consensus
 *
 * @param activity the signing activity
 * @return signature {r, s, v}
 */
function getSignatureFromActivity(activity) {
    if (![
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD",
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
    ].includes(activity.type)) {
        throw new InvalidArgumentError({
            message: `Cannot get signature from activity type: ${activity.type}`,
            activityId: activity.id,
            activityStatus: activity.status,
        });
    }
    assertActivityCompleted(activity);
    const signature = activity.result?.signRawPayloadResult;
    return assertNonNull(signature);
}
/**
 * This function is a helper method to easily extract signature strings from a completed signing activity.
 * Particularly useful for scenarios where a signature requires consensus
 *
 * @param activity the signing activity
 * @return signatures {r, s, v}[]
 */
function getSignaturesFromActivity(activity) {
    if (!["ACTIVITY_TYPE_SIGN_RAW_PAYLOADS"].includes(activity.type)) {
        throw new InvalidArgumentError({
            message: `Cannot get signature from activity type: ${activity.type}`,
            activityId: activity.id,
            activityStatus: activity.status,
        });
    }
    assertActivityCompleted(activity);
    const { signatures } = activity.result?.signRawPayloadsResult;
    return assertNonNull(signatures);
}
/**
 * This function is a helper method to easily extract a signed transaction from a completed signing activity.
 * Particularly useful for scenarios where a signature requires consensus
 *
 * @param activity the signing activity
 * @return signed transaction string
 */
function getSignedTransactionFromActivity(activity) {
    if (![
        "ACTIVITY_TYPE_SIGN_TRANSACTION",
        "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
    ].includes(activity.type)) {
        throw new InvalidArgumentError({
            message: `Cannot get signed transaction from activity type: ${activity.type}`,
            activityId: activity.id,
            activityStatus: activity.status,
        });
    }
    assertActivityCompleted(activity);
    const { signedTransaction } = activity.result?.signTransactionResult;
    return assertNonNull(`0x${signedTransaction}`);
}


//# sourceMappingURL=shared.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/universal.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/universal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetch: () => (/* binding */ fetch)
/* harmony export */ });
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");


/// <reference lib="dom" />
// This is useful for mocking fetch in tests.
const fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;


//# sourceMappingURL=universal.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/version.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/version.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "@turnkey/http@3.10.0";


//# sourceMappingURL=version.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),
/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)
/* harmony export */ });
/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs");
/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs");
/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs");




function createResponseToJSON(credential) {
    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);
}
function getResponseToJSON(credential) {
    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);
}


//# sourceMappingURL=api.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)
/* harmony export */ });
function bufferToBase64url(buffer) {
    // Buffer to binary string
    const byteView = new Uint8Array(buffer);
    let str = "";
    for (const charCode of byteView) {
        str += String.fromCharCode(charCode);
    }
    // Binary string to base64
    const base64String = btoa(str);
    // Base64 to base64url
    // We assume that the base64url string is well-formed.
    const base64urlString = base64String
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=/g, "");
    return base64urlString;
}


//# sourceMappingURL=base64url.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convert: () => (/* binding */ convert),
/* harmony export */   convertValue: () => (/* binding */ convertValue),
/* harmony export */   copyValue: () => (/* binding */ copyValue),
/* harmony export */   derived: () => (/* binding */ derived),
/* harmony export */   optional: () => (/* binding */ optional),
/* harmony export */   required: () => (/* binding */ required)
/* harmony export */ });
// We export these values in order so that they can be used to deduplicate
// schema definitions in minified JS code.
// TODO: Parcel isn't deduplicating these values.
const copyValue = "copy";
const convertValue = "convert";
function convert(conversionFn, schema, input) {
    if (schema === copyValue) {
        return input;
    }
    if (schema === convertValue) {
        return conversionFn(input);
    }
    if (schema instanceof Array) {
        return input.map((v) => convert(conversionFn, schema[0], v));
    }
    if (schema instanceof Object) {
        const output = {};
        for (const [key, schemaField] of Object.entries(schema)) {
            if (schemaField.derive) {
                const v = schemaField.derive(input);
                if (v !== undefined) {
                    input[key] = v;
                }
            }
            if (!(key in input)) {
                if (schemaField.required) {
                    throw new Error(`Missing key: ${key}`);
                }
                continue;
            }
            // Fields can be null (rather than missing or `undefined`), e.g. the
            // `userHandle` field of the `AuthenticatorAssertionResponse`:
            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse
            if (input[key] == null) {
                output[key] = null;
                continue;
            }
            output[key] = convert(conversionFn, schemaField.schema, input[key]);
        }
        return output;
    }
}
function derived(schema, derive) {
    return {
        required: true,
        schema,
        derive,
    };
}
function required(schema) {
    return {
        required: true,
        schema,
    };
}
function optional(schema) {
    return {
        required: false,
        schema,
    };
}


//# sourceMappingURL=convert.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   get: () => (/* binding */ get)
/* harmony export */ });
/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/api.mjs");


async function create(options) {
    const response = (await navigator.credentials.create(options));
    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);
    return response;
}
async function get(options) {
    const response = (await navigator.credentials.get(options));
    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);
    return response;
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),
/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)
/* harmony export */ });
/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs");


const simplifiedClientExtensionResultsSchema = {
    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
};
// `navigator.create()` response
const publicKeyCredentialWithAttestation = {
    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({
        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),
    }),
    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),
};
// `navigator.get()` response
const publicKeyCredentialWithAssertion = {
    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({
        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
    }),
    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),
};


//# sourceMappingURL=schema.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/http/dist/webauthn.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),
/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),
/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)
/* harmony export */ });
/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ "./node_modules/@turnkey/http/dist/webauthn-json/index.mjs");


const defaultTimeout = 5 * 60 * 1000; // five minutes
const defaultUserVerification = "preferred";
const defaultSigningOptions = {
    publicKey: {
        timeout: defaultTimeout,
        userVerification: defaultUserVerification,
    },
};
async function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {
    const challenge = await getChallengeFromPayload(payload);
    const signingOptions = {
        ...tkSigningOptions,
        publicKey: {
            ...defaultSigningOptions.publicKey,
            ...tkSigningOptions.publicKey,
            challenge,
        },
    };
    return signingOptions;
}
async function getChallengeFromPayload(payload) {
    const messageBuffer = new TextEncoder().encode(payload);
    const hashBuffer = await crypto.subtle.digest("SHA-256", messageBuffer);
    const hexString = Buffer.from(hashBuffer).toString("hex");
    const hexBuffer = Buffer.from(hexString, "utf8");
    return new Uint8Array(hexBuffer);
}
/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */
function protocolTransportEnumToInternalEnum(protocolEnum) {
    switch (protocolEnum) {
        case "internal": {
            return "AUTHENTICATOR_TRANSPORT_INTERNAL";
        }
        case "usb": {
            return "AUTHENTICATOR_TRANSPORT_USB";
        }
        case "nfc": {
            return "AUTHENTICATOR_TRANSPORT_NFC";
        }
        case "ble": {
            return "AUTHENTICATOR_TRANSPORT_BLE";
        }
        case "hybrid": {
            return "AUTHENTICATOR_TRANSPORT_HYBRID";
        }
        default: {
            throw new Error("unsupported transport format");
        }
    }
}
function toInternalAttestation(attestation) {
    return {
        credentialId: attestation.rawId,
        attestationObject: attestation.response.attestationObject,
        clientDataJson: attestation.response.clientDataJSON,
        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),
    };
}
async function getWebAuthnAssertion(payload, options) {
    const webAuthnSupported = hasWebAuthnSupport();
    if (!webAuthnSupported) {
        throw new Error("webauthn is not supported by this browser");
    }
    const signingOptions = await getCredentialRequestOptions(payload, options);
    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);
    const assertion = clientGetResult.toJSON();
    const stamp = {
        authenticatorData: assertion.response.authenticatorData,
        clientDataJson: assertion.response.clientDataJSON,
        credentialId: assertion.id,
        signature: assertion.response.signature,
    };
    return JSON.stringify(stamp);
}
async function getWebAuthnAttestation(options) {
    const webAuthnSupported = hasWebAuthnSupport();
    if (!webAuthnSupported) {
        throw new Error("webauthn is not supported by this browser");
    }
    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);
    return toInternalAttestation(res.toJSON());
}
// `hasWebAuthnSupport` checks for barebones webauthn support.
// For additional details and granular settings, see:
// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential
function hasWebAuthnSupport() {
    return !!window.PublicKeyCredential;
}


//# sourceMappingURL=webauthn.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),
/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),
/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)
/* harmony export */ });
/// <reference lib="dom" />
// Header name for an API key stamp
const stampHeaderName = "X-Stamp";
// Set of constants for event types expected to be sent and received between a parent page and its iframe.
var IframeEventType;
(function (IframeEventType) {
    // Event sent by the iframe to its parent to indicate readiness.
    // Value: the iframe public key
    IframeEventType["PublicKeyReady"] = "PUBLIC_KEY_READY";
    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.
    // Value: the bundle to inject
    IframeEventType["InjectCredentialBundle"] = "INJECT_CREDENTIAL_BUNDLE";
    // Event sent by the parent to inject a private key export bundle into the iframe.
    // Value: the bundle to inject
    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.
    IframeEventType["InjectKeyExportBundle"] = "INJECT_KEY_EXPORT_BUNDLE";
    // Event sent by the parent to inject a wallet export bundle into the iframe.
    // Value: the bundle to inject
    IframeEventType["InjectWalletExportBundle"] = "INJECT_WALLET_EXPORT_BUNDLE";
    // Event sent by the parent to inject an import bundle into the iframe.
    // Value: the bundle to inject
    IframeEventType["InjectImportBundle"] = "INJECT_IMPORT_BUNDLE";
    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.
    // Value: none
    IframeEventType["ExtractWalletEncryptedBundle"] = "EXTRACT_WALLET_ENCRYPTED_BUNDLE";
    // Event sent by the parent to extract an encrypted private key bundle from the iframe.
    // Value: none
    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
    IframeEventType["ExtractKeyEncryptedBundle"] = "EXTRACT_KEY_ENCRYPTED_BUNDLE";
    // Event sent by the parent to apply settings on the iframe.
    // Value: the settings to apply in JSON string format.
    IframeEventType["ApplySettings"] = "APPLY_SETTINGS";
    // Event sent by the iframe to its parent when `InjectBundle` is successful
    // Value: true (boolean)
    IframeEventType["BundleInjected"] = "BUNDLE_INJECTED";
    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful
    // Value: the bundle encrypted in the iframe
    IframeEventType["EncryptedBundleExtracted"] = "ENCRYPTED_BUNDLE_EXTRACTED";
    // Event sent by the iframe to its parent when `ApplySettings` is successful
    // Value: true (boolean)
    IframeEventType["SettingsApplied"] = "SETTINGS_APPLIED";
    // Event sent by the parent page to request a signature
    // Value: payload to sign
    IframeEventType["StampRequest"] = "STAMP_REQUEST";
    // Event sent by the iframe to communicate the result of a stamp operation.
    // Value: signed payload
    IframeEventType["Stamp"] = "STAMP";
    // Event sent by the parent to establish secure communication via MessageChannel API.
    // Value: MessageChannel port
    IframeEventType["TurnkeyInitMessageChannel"] = "TURNKEY_INIT_MESSAGE_CHANNEL";
    // Event sent by the parent to get the iframe target embedded key's public key.
    // Value: none
    IframeEventType["GetEmbeddedPublicKey"] = "GET_EMBEDDED_PUBLIC_KEY";
    // Event sent by the parent to clear the iframe's embedded key.
    // Value: none
    IframeEventType["ClearEmbeddedKey"] = "RESET_EMBEDDED_KEY";
    // Event sent by the parent to initialize a new embedded key.
    // Value: none
    IframeEventType["InitEmbeddedKey"] = "INIT_EMBEDDED_KEY";
    // Event sent by the iframe to communicate an error
    // Value: serialized error
    IframeEventType["Error"] = "ERROR";
})(IframeEventType || (IframeEventType = {}));
// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it
// or after exporting it and decrypting it.
var KeyFormat;
(function (KeyFormat) {
    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys
    KeyFormat["Hexadecimal"] = "HEXADECIMAL";
    // Key format used by Phantom and Solflare for Solana keys
    KeyFormat["Solana"] = "SOLANA";
})(KeyFormat || (KeyFormat = {}));
function generateUUID() {
    return crypto.randomUUID();
}
/**
 * Stamper to use with `@turnkey/http`'s `TurnkeyClient`
 * Creating a stamper inserts an iframe in the current page.
 */
class IframeStamper {
    /**
     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.
     * Call `.init()` to insert the iframe element in the DOM.
     */
    constructor(config) {
        if (typeof window === "undefined") {
            throw new Error("Cannot initialize iframe in non-browser environment");
        }
        if (typeof MessageChannel === "undefined") {
            throw new Error("Cannot initialize iframe without MessageChannel support");
        }
        if (!config.iframeContainer) {
            throw new Error("Iframe container cannot be found");
        }
        this.container = config.iframeContainer;
        if (this.container.querySelector(`#${config.iframeElementId}`)) {
            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);
        }
        let iframe = window.document.createElement("iframe");
        // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox
        // We do not need any other permission than running scripts for import/export/auth frames.
        iframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
        iframe.id = config.iframeElementId;
        iframe.src = config.iframeUrl;
        this.iframe = iframe;
        const iframeUrl = new URL(config.iframeUrl);
        this.iframeOrigin = iframeUrl.origin;
        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!
        this.iframePublicKey = null;
        /**
         * The MessageChannel API is used to establish secure communication between two execution contexts.
         * In this case, the parent page and the iframe.
         * See https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel
         */
        this.messageChannel = new MessageChannel();
        // Initialize a pending requests tracker
        this.pendingRequests = new Map();
    }
    onMessageHandler(event) {
        const { type, value, requestId } = event.data || {};
        // Handle messages without requestId (like PUBLIC_KEY_READY)
        if (!requestId) {
            if (type === IframeEventType.PublicKeyReady) {
                this.iframePublicKey = value;
                return;
            }
            return;
        }
        const pendingRequest = this.pendingRequests.get(requestId);
        if (!pendingRequest) {
            console.warn(`Received response for unknown request: ${requestId}`);
            return;
        }
        // Remove from pending requests
        this.pendingRequests.delete(requestId);
        if (type === IframeEventType.Error) {
            pendingRequest.reject(new Error(value));
            return;
        }
        // Handle specific response types
        switch (type) {
            case IframeEventType.Stamp:
                pendingRequest.resolve({
                    stampHeaderName,
                    stampHeaderValue: value,
                });
                break;
            default:
                pendingRequest.resolve(value);
        }
    }
    /**
     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key
     * @param dangerouslyOverrideIframeKeyTtl Optional TTL override for the iframe's embedded key (default 48 hours). Only use this if you are intentional about the security implications.
     */
    async init(dangerouslyOverrideIframeKeyTtl) {
        return new Promise((resolve, reject) => {
            this.container.appendChild(this.iframe);
            this.iframe.addEventListener("load", () => {
                if (!this.iframe.contentWindow?.postMessage) {
                    reject(new Error("contentWindow or contentWindow.postMessage does not exist"));
                    return;
                }
                this.iframe.contentWindow.postMessage({
                    type: IframeEventType.TurnkeyInitMessageChannel,
                    dangerouslyOverrideIframeKeyTtl: dangerouslyOverrideIframeKeyTtl,
                }, this.iframeOrigin, [this.messageChannel.port2]);
            });
            this.messageChannel.port1.onmessage = (event) => {
                // Handle initial PublicKeyReady event
                if (event.data?.type === IframeEventType.PublicKeyReady) {
                    this.iframePublicKey = event.data.value;
                    resolve(event.data.value);
                }
                // Handle all other messages
                this.onMessageHandler(event);
            };
        });
    }
    /**
     * Removes the iframe from the DOM
     */
    clear() {
        this.messageChannel?.port1?.close();
        this.messageChannel?.port2?.close();
        this.iframe.remove();
        this.pendingRequests.clear();
    }
    /**
     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.
     */
    publicKey() {
        return this.iframePublicKey;
    }
    /**
     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.
     * This differs from the above in that it reaches out to the live iframe to see if an embedded key exists.
     */
    async getEmbeddedPublicKey() {
        const publicKey = await this.createRequest(IframeEventType.GetEmbeddedPublicKey);
        this.iframePublicKey = publicKey;
        return publicKey;
    }
    /**
     * Clears the embedded key within an iframe.
     */
    async clearEmbeddedKey() {
        await this.createRequest(IframeEventType.ClearEmbeddedKey);
        this.iframePublicKey = "";
        return null;
    }
    /**
     * Creates a new embedded key within an iframe. If an embedded key already exists, this will return it.
     * This is primarily to be used in conjunction with `clearEmbeddedKey()`: after an embedded key is cleared,
     * this can be used to create a new one.
     * @return {string | null} the newly created embedded public key.
     */
    async initEmbeddedKey() {
        const publicKey = await this.createRequest(IframeEventType.InitEmbeddedKey);
        this.iframePublicKey = publicKey;
        return publicKey;
    }
    /**
     * Generic function to abstract away request creation
     * @param type
     * @param payload
     * @returns expected shape <T>
     */
    createRequest(type, payload = {}) {
        return new Promise((resolve, reject) => {
            const requestId = generateUUID();
            this.pendingRequests.set(requestId, {
                resolve,
                reject,
                requestId,
            });
            this.messageChannel.port1.postMessage({
                type,
                requestId,
                ...payload,
            });
        });
    }
    /**
     * Function to inject a new credential into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during recovery and auth flows.
     */
    async injectCredentialBundle(bundle) {
        return this.createRequest(IframeEventType.InjectCredentialBundle, {
            value: bundle,
        });
    }
    /**
     * Function to inject an export bundle into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
     * This is used during the private key export flow.
     */
    async injectKeyExportBundle(bundle, organizationId, keyFormat) {
        return this.createRequest(IframeEventType.InjectKeyExportBundle, {
            value: bundle,
            keyFormat,
            organizationId,
        });
    }
    /**
     * Function to inject an export bundle into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during the wallet export flow.
     */
    async injectWalletExportBundle(bundle, organizationId) {
        return this.createRequest(IframeEventType.InjectWalletExportBundle, {
            value: bundle,
            organizationId,
        });
    }
    /**
     * Function to inject an import bundle into the iframe
     * This is used to initiate either the wallet import flow or the private key import flow.
     */
    async injectImportBundle(bundle, organizationId, userId) {
        return this.createRequest(IframeEventType.InjectImportBundle, {
            value: bundle,
            organizationId,
            userId,
        });
    }
    /**
     * Function to extract an encrypted bundle from the iframe
     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during the wallet import flow.
     */
    async extractWalletEncryptedBundle() {
        return this.createRequest(IframeEventType.ExtractWalletEncryptedBundle);
    }
    /**
     * Function to extract an encrypted bundle from the iframe
     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
     * This is used during the private key import flow.
     */
    async extractKeyEncryptedBundle(keyFormat) {
        return this.createRequest(IframeEventType.ExtractKeyEncryptedBundle, { keyFormat });
    }
    /**
     * Function to apply settings on allowed parameters in the iframe
     * This is used to style the HTML element used for plaintext in wallet and private key import.
     */
    async applySettings(settings) {
        return this.createRequest(IframeEventType.ApplySettings, {
            value: JSON.stringify(settings),
        });
    }
    /**
     * Function to sign a payload with the underlying iframe
     */
    async stamp(payload) {
        if (this.iframePublicKey === null) {
            throw new Error("null iframe public key. Have you called/awaited .init()?");
        }
        return this.createRequest(IframeEventType.StampRequest, {
            value: payload,
        });
    }
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/indexed-db-stamper/dist/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/indexed-db-stamper/dist/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IndexedDbStamper: () => (/* binding */ IndexedDbStamper)
/* harmony export */ });
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");


const DB_NAME = "TurnkeyStamperDB";
const DB_STORE = "KeyStore";
const DB_KEY = "turnkeyKeyPair";
const stampHeaderName = "X-Stamp";
/**
 * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:
 * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa
 *
 * Turnkey expects the signature encoding to be DER-encoded ASN.1:
 * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149
 *
 * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114
 *
 * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.
 *
 * @param ieee the ECDSA signature in IEEE encoding
 * @return ECDSA signature in DER encoding
 */
function convertEcdsaIeee1363ToDer(ieee) {
    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {
        throw new Error("Invalid IEEE P1363 signature encoding. Length: " + ieee.length);
    }
    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));
    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));
    let offset = 0;
    const length = 1 + 1 + r.length + 1 + 1 + s.length;
    let der;
    if (length >= 128) {
        der = new Uint8Array(length + 3);
        der[offset++] = 48;
        der[offset++] = 128 + 1;
        der[offset++] = length;
    }
    else {
        der = new Uint8Array(length + 2);
        der[offset++] = 48;
        der[offset++] = length;
    }
    der[offset++] = 2;
    der[offset++] = r.length;
    der.set(r, offset);
    offset += r.length;
    der[offset++] = 2;
    der[offset++] = s.length;
    der.set(s, offset);
    return der;
}
/**
 * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311
 *
 * Transform a big integer in big endian to minimal unsigned form which has
 * no extra zero at the beginning except when the highest bit is set.
 */
function toUnsignedBigNum(bytes) {
    // Remove zero prefixes.
    let start = 0;
    while (start < bytes.length && bytes[start] == 0) {
        start++;
    }
    if (start == bytes.length) {
        start = bytes.length - 1;
    }
    let extraZero = 0;
    // If the 1st bit is not zero, add 1 zero byte.
    if ((bytes[start] & 128) == 128) {
        // Add extra zero.
        extraZero = 1;
    }
    const res = new Uint8Array(bytes.length - start + extraZero);
    res.set(bytes.subarray(start), extraZero);
    return res;
}
class IndexedDbStamper {
    constructor() {
        this.publicKeyHex = null;
        this.privateKey = null;
        if (typeof window === "undefined") {
            throw new Error("IndexedDB is only available in the browser");
        }
    }
    async openDb() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(DB_NAME, 1);
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                db.createObjectStore(DB_STORE);
            };
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }
    async storeKeyPair(publicKey, privateKey) {
        const db = await this.openDb();
        return new Promise((resolve, reject) => {
            const tx = db.transaction(DB_STORE, "readwrite");
            const store = tx.objectStore(DB_STORE);
            store.put(publicKey, `${DB_KEY}-pub`);
            store.put(privateKey, `${DB_KEY}-priv`);
            tx.oncomplete = () => {
                db.close();
                resolve();
            };
            tx.onerror = () => reject(tx.error);
            tx.onabort = () => reject(tx.error);
        });
    }
    async getStoredKeys() {
        const db = await this.openDb();
        return new Promise((resolve, reject) => {
            const tx = db.transaction(DB_STORE, "readonly");
            const store = tx.objectStore(DB_STORE);
            const getPub = store.get(`${DB_KEY}-pub`);
            const getPriv = store.get(`${DB_KEY}-priv`);
            let publicKey = null;
            let privateKey = null;
            getPub.onsuccess = () => (publicKey = getPub.result || null);
            getPriv.onsuccess = () => (privateKey = getPriv.result || null);
            tx.oncomplete = () => {
                db.close();
                resolve({ publicKey, privateKey });
            };
            tx.onerror = () => reject(tx.error);
        });
    }
    async init() {
        const { publicKey, privateKey } = await this.getStoredKeys();
        if (publicKey && privateKey) {
            this.publicKeyHex = publicKey;
            this.privateKey = privateKey;
        }
        else {
            await this.resetKeyPair();
        }
    }
    async resetKeyPair(externalKeyPair) {
        let privateKey;
        let publicKey;
        if (externalKeyPair) {
            // Sanity check — ensure privateKey is non-extractable
            const extractable = externalKeyPair.privateKey.extractable;
            if (extractable !== false) {
                throw new Error("Provided privateKey must be non-extractable.");
            }
            privateKey = externalKeyPair.privateKey;
            publicKey = externalKeyPair.publicKey;
        }
        else {
            const keyPair = await crypto.subtle.generateKey({
                name: "ECDSA",
                namedCurve: "P-256",
            }, false, ["sign", "verify"]);
            privateKey = keyPair.privateKey;
            publicKey = keyPair.publicKey;
        }
        const rawPubKey = new Uint8Array(await crypto.subtle.exportKey("raw", publicKey));
        const compressedPubKey = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.pointEncode)(rawPubKey);
        const compressedHex = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToHexString)(compressedPubKey);
        await this.storeKeyPair(compressedHex, privateKey);
        this.publicKeyHex = compressedHex;
        this.privateKey = privateKey;
    }
    getPublicKey() {
        return this.publicKeyHex;
    }
    async sign(payload) {
        if (!this.privateKey) {
            throw new Error("Key not initialized. Call init() first.");
        }
        const encodedPayload = new TextEncoder().encode(payload);
        const signatureIeee1363 = await crypto.subtle.sign({
            name: "ECDSA",
            hash: { name: "SHA-256" },
        }, this.privateKey, encodedPayload);
        const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));
        return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToHexString)(signatureDer);
    }
    async stamp(payload) {
        if (!this.publicKeyHex || !this.privateKey) {
            throw new Error("Key not initialized. Call init() first.");
        }
        const signature = await this.sign(payload);
        const stamp = {
            publicKey: this.publicKeyHex,
            scheme: "SIGNATURE_SCHEME_TK_API_P256",
            signature: signature,
        };
        return {
            stampHeaderName: stampHeaderName,
            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),
        };
    }
    async clear() {
        const db = await this.openDb();
        return new Promise((resolve, reject) => {
            const tx = db.transaction(DB_STORE, "readwrite");
            const store = tx.objectStore(DB_STORE);
            store.delete(`${DB_KEY}-pub`);
            store.delete(`${DB_KEY}-priv`);
            tx.oncomplete = () => {
                db.close();
                this.publicKeyHex = null;
                this.privateKey = null;
                resolve();
            };
            tx.onerror = () => reject(tx.error);
        });
    }
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__clients__/base-client.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__clients__/base-client.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeyBaseClient: () => (/* binding */ TurnkeyBaseClient)
/* harmony export */ });
/* harmony import */ var _generated_sdk_client_base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../__generated__/sdk-client-base.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__generated__/sdk-client-base.mjs");


class TurnkeyBaseClient extends _generated_sdk_client_base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeySDKClientBase {
    constructor(config, authClient) {
        super(config);
        this.authClient = authClient;
    }
}


//# sourceMappingURL=base-client.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__clients__/browser-clients.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__clients__/browser-clients.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeyBrowserClient: () => (/* binding */ TurnkeyBrowserClient),
/* harmony export */   TurnkeyIframeClient: () => (/* binding */ TurnkeyIframeClient),
/* harmony export */   TurnkeyIndexedDbClient: () => (/* binding */ TurnkeyIndexedDbClient),
/* harmony export */   TurnkeyPasskeyClient: () => (/* binding */ TurnkeyPasskeyClient),
/* harmony export */   TurnkeyWalletClient: () => (/* binding */ TurnkeyWalletClient)
/* harmony export */ });
/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ "./node_modules/@turnkey/http/dist/index.mjs");
/* harmony import */ var _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/sdk-types */ "./node_modules/@turnkey/sdk-types/dist/index.mjs");
/* harmony import */ var _base_client_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-client.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__clients__/base-client.mjs");
/* harmony import */ var _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../__types__/base.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/@turnkey/sdk-browser/dist/utils.mjs");
/* harmony import */ var _storage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../storage.mjs */ "./node_modules/@turnkey/sdk-browser/dist/storage.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/@turnkey/sdk-browser/dist/constants.mjs");
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");









class TurnkeyBrowserClient extends _base_client_mjs__WEBPACK_IMPORTED_MODULE_2__.TurnkeyBaseClient {
    constructor(config, authClient) {
        super(config, authClient);
        /**
         * @deprecated
         * This method is deprecated and only creates a READ_ONLY session using an API key.
         * Use one of the following methods instead, depending on your context:
         *
         * - `loginWithPasskey()` for WebAuthn-based sessions using IndexedDB
         * - `loginWithWallet()` for EVM or Solana wallet-based sessions
         * - `loginWithSession()` if the session string is already available (e.g. from server actions)
         * - `loginWithBundle()` for iframe-based sessions (e.g. for email-auth non otp based login)
         *
         * @param config Optional configuration containing an organization ID
         * @returns A Promise resolving to the created read-only session
         */
        this.login = async (config) => {
            const readOnlySessionResult = await this.createReadOnlySession(config || {});
            const session = {
                sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY,
                userId: readOnlySessionResult.userId,
                organizationId: readOnlySessionResult.organizationId,
                expiry: Number(readOnlySessionResult.sessionExpiry),
                token: readOnlySessionResult.session,
            };
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, this.authClient);
            return readOnlySessionResult;
        };
        /**
         * Attempts to refresh an existing Session. This method infers the current user's organization ID and target userId.
         *
         * - For `READ_ONLY` sessions: Requires the client to be a `TurnkeyPasskeyClient`.
         * - For `READ_WRITE` sessions:
         *   - If the client is a `TurnkeyIndexedDbClient`, a new keypair will be generated unless a `publicKey` is provided.
         *   - If the client is a `TurnkeyIframeClient`, it will use the provided `publicKey` if available, or fall back to `getEmbeddedPublicKey()`.
         *     If no key is available from either source, an error will be thrown.
         *
         * @param RefreshSessionParams
         *   @param params.sessionType - The type of session being refreshed. Defaults to `READ_WRITE`.
         *   @param params.expirationSeconds - How long to extend the session for, in seconds. Defaults to 900 (15 minutes).
         *   @param params.invalidateExisting - Whether to invalidate existing sessions. Defaults to `false`.
         *   @param params.publicKey - Optional public key to use for session creation. If not provided, each client type has fallback behavior.
         * @returns {Promise<void>}
         */
        this.refreshSession = async ({ sessionType = _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE, expirationSeconds = _constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SESSION_EXPIRATION_IN_SECONDS, invalidateExisting = false, publicKey, } = {}) => {
            try {
                switch (sessionType) {
                    case _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY: {
                        if (!(this instanceof TurnkeyPasskeyClient)) {
                            throw new Error("You must use a passkey client to refresh a read-only session.");
                        }
                        const result = await this.createReadOnlySession({});
                        const session = {
                            sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY,
                            userId: result.userId,
                            organizationId: result.organizationId,
                            expiry: Number(result.sessionExpiry),
                            token: result.session,
                        };
                        await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Passkey);
                        return;
                    }
                    case _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE: {
                        // function was called with an IndexedDbClient
                        if (this instanceof TurnkeyIndexedDbClient) {
                            let keyPair = undefined;
                            let compressedHex = publicKey;
                            if (!publicKey) {
                                keyPair = await crypto.subtle.generateKey({ name: "ECDSA", namedCurve: "P-256" }, false, ["sign", "verify"]);
                                const rawPubKey = new Uint8Array(await crypto.subtle.exportKey("raw", keyPair.publicKey));
                                compressedHex = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToHexString)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_7__.pointEncode)(rawPubKey));
                            }
                            const result = await this.stampLogin({
                                publicKey: compressedHex,
                                expirationSeconds,
                                invalidateExisting,
                            });
                            await this.resetKeyPair(keyPair);
                            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(result.session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.IndexedDb);
                            return;
                        }
                        // function was called with an IframeClient
                        if (this instanceof TurnkeyIframeClient) {
                            const targetPublicKey = publicKey ?? (await this.getEmbeddedPublicKey());
                            if (!targetPublicKey) {
                                throw new Error("Unable to refresh session: missing target public key.");
                            }
                            const result = await this.createReadWriteSession({
                                targetPublicKey,
                                expirationSeconds,
                                invalidateExisting,
                            });
                            const session = {
                                sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE,
                                userId: result.userId,
                                organizationId: result.organizationId,
                                expiry: Date.now() + Number(expirationSeconds) * 1000,
                                token: result.credentialBundle,
                            };
                            await this.injectCredentialBundle(session.token);
                            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Iframe);
                            return;
                        }
                        throw new Error("Unsupported client type for read-write session refresh.");
                    }
                    default:
                        throw new Error(`Invalid session type passed: ${sessionType}`);
                }
            }
            catch (error) {
                throw new Error(`Unable to refresh session: ${error}`);
            }
        };
        /**
         * Log in with a bundle. This method uses a bundle sent to the end user email
         * To be used in conjunction with an `iframeStamper`.
         *
         * @param LoginWithBundleParams
         *   @param params.bundle - Credential bundle to log in with
         *   @param params.expirationSeconds - Expiration time for the session in seconds. Defaults to 900 seconds or 15 minutes.
         * @returns {Promise<void>}
         */
        this.loginWithBundle = async (params) => {
            const { bundle, expirationSeconds = _constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SESSION_EXPIRATION_IN_SECONDS, } = params;
            if (this instanceof TurnkeyIframeClient) {
                await this.injectCredentialBundle(bundle);
            }
            else {
                // Throw an error if the client is not an iframe client
                throw new Error("You must use an iframe client to log in with a session."); //should we default to a "localStorage" client?
            }
            const whoAmI = await this.getWhoami();
            const session = {
                sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE,
                userId: whoAmI.userId,
                organizationId: whoAmI.organizationId,
                expiry: Date.now() + Number(expirationSeconds) * 1000,
                token: bundle,
            };
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Iframe);
        };
        /**
         * Log in with a session returns from Turnkey. This method uses a session from server actions and stores it and the active client in local storage
         * To be used in conjunction with an `indexeDbStamper`.
         *
         * @param session
         * @returns {Promise<void>}
         */
        this.loginWithSession = async (session) => {
            if (this instanceof TurnkeyIndexedDbClient) {
                await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.IndexedDb);
            }
            else {
                // Throw an error if the client is not an indexedDb client
                throw new Error("You must use an indexedDb client to log in with a session.");
            }
        };
        /**
         * Log in with a passkey.
         * To be used in conjunction with a `passkeyStamper`
         *
         * @param LoginWithPasskeyParams
         *   @param params.sessionType - The type of session to create
         *   @param params.publicKey - The public key of indexedDb
         *   @param params.expirationSeconds - Expiration time for the session in seconds. Defaults to 900 seconds or 15 minutes.
         * @returns {Promise<void>}
         */
        this.loginWithPasskey = async (params) => {
            try {
                const { publicKey, organizationId, sessionType = _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE, expirationSeconds = _constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SESSION_EXPIRATION_IN_SECONDS, } = params;
                // Create a read-only session
                if (sessionType === _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY) {
                    const readOnlySessionResult = await this.createReadOnlySession({});
                    const session = {
                        sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY,
                        userId: readOnlySessionResult.userId,
                        organizationId: readOnlySessionResult.organizationId,
                        expiry: Number(readOnlySessionResult.sessionExpiry),
                        token: readOnlySessionResult.session, // Once we have api key session scopes this can change
                    };
                    await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Passkey);
                    // Create a read-write session
                }
                else if (sessionType === _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE) {
                    if (!publicKey) {
                        throw new Error("You must provide a publicKey to create a passkey read write session.");
                    }
                    const sessionResponse = await this.stampLogin({
                        publicKey,
                        expirationSeconds,
                        ...(organizationId && { organizationId }),
                    });
                    await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(sessionResponse.session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.IndexedDb);
                }
                else {
                    throw new Error(`Invalid session type passed: ${sessionType}`);
                }
            }
            catch (error) {
                throw new Error(`Unable to log in with the provided passkey: ${error}`);
            }
        };
        /**
         * Log in with a browser wallet.
         *
         * @param LoginWithWalletParams
         *   @param params.sessionType - The type of session to create
         *   @param params.publicKey - The public key of indexedDb
         *   @param params.expirationSeconds - The expiration time for the session in seconds
         * @returns {Promise<void>}
         */
        this.loginWithWallet = async (params) => {
            try {
                const { publicKey, organizationId, sessionType = _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE, expirationSeconds = _constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SESSION_EXPIRATION_IN_SECONDS, } = params;
                if (sessionType === _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY) {
                    const readOnlySessionResult = await this.createReadOnlySession({});
                    const session = {
                        sessionType: _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_ONLY,
                        userId: readOnlySessionResult.userId,
                        organizationId: readOnlySessionResult.organizationId,
                        expiry: Number(readOnlySessionResult.sessionExpiry),
                        token: readOnlySessionResult.session,
                    };
                    await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Wallet);
                }
                else if (sessionType === _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SessionType.READ_WRITE) {
                    if (!publicKey) {
                        throw new Error("You must provide a publicKey to create a read-write session.");
                    }
                    const sessionResponse = await this.stampLogin({
                        publicKey: publicKey,
                        expirationSeconds,
                        ...(organizationId && { organizationId }),
                    });
                    await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.storeSession)(sessionResponse.session, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.IndexedDb);
                }
                else {
                    throw new Error(`Invalid session type passed: ${sessionType}`);
                }
            }
            catch (error) {
                throw new Error(`Unable to log in with the provided wallet: ${error}`);
            }
        };
        /**
         * Removes authentication factors from an end user.
         *
         * This function allows selectively removing:
         * - Phone number
         * - Email
         * - Authenticators (by ID)
         * - OAuth providers (by ID)
         * - API keys (by ID)
         *
         * All removal operations are executed in parallel if multiple
         * parameters are provided.
         *
         * @param params - A structured object containing all the removal parameters
         *   @param params.userId - Unique identifier of the user
         *   @param params.phoneNumber - true to remove the phone number
         *   @param params.email - true to remove the email
         *   @param params.authenticatorIds - Array of authenticator IDs to remove
         *   @param params.oauthProviderIds - Array of OAuth provider IDs to remove
         *   @param params.apiKeyIds - Array of API key IDs to remove
         * @returns A promise that resolves to an array of results from each removal operation
         */
        this.deleteUserAuth = async (params) => {
            try {
                const { userId, phoneNumber, email, authenticatorIds, oauthProviderIds, apiKeyIds, } = params;
                const promises = [];
                if (phoneNumber) {
                    promises.push(this.updateUser({ userId, userPhoneNumber: "", userTagIds: [] }));
                }
                if (email) {
                    promises.push(this.updateUser({ userId, userEmail: "", userTagIds: [] }));
                }
                if (authenticatorIds && authenticatorIds.length > 0) {
                    promises.push(this.deleteAuthenticators({ userId, authenticatorIds }));
                }
                if (oauthProviderIds && oauthProviderIds.length > 0) {
                    promises.push(this.deleteOauthProviders({ userId, providerIds: oauthProviderIds }));
                }
                if (apiKeyIds && apiKeyIds.length > 0) {
                    promises.push(this.deleteApiKeys({ userId, apiKeyIds }));
                }
                // Execute all removal operations in parallel
                return await Promise.all(promises);
            }
            catch (error) {
                // Surface error
                throw error;
            }
        };
        /**
         * Adds or updates authentication factors for an end user.
         *
         * This function allows selectively adding:
         * - Phone number
         * - Email
         * - Authenticators
         * - OAuth providers
         * - API keys
         *
         * All additions/updates are executed in parallel if multiple
         * parameters are provided.
         *
         * @param params - A structured object containing all the addition/update parameters
         *   @param params.userId - Unique identifier of the user
         *   @param params.phoneNumber - New phone number for the user
         *   @param params.email - New email address for the user
         *   @param params.authenticators - Array of authenticator objects to create
         *   @param params.oauthProviders - Array of OAuth provider objects to create
         *   @param params.apiKeys - Array of API key objects to create
         * @returns A promise that resolves to an array of results from each addition or update
         */
        this.addUserAuth = async (params) => {
            try {
                const { userId, phoneNumber, email, authenticators, oauthProviders, apiKeys, } = params;
                const promises = [];
                if (phoneNumber) {
                    promises.push(this.updateUser({
                        userId,
                        userPhoneNumber: phoneNumber,
                        userTagIds: [],
                    }));
                }
                if (email) {
                    promises.push(this.updateUser({ userId, userEmail: email, userTagIds: [] }));
                }
                if (authenticators && authenticators.length > 0) {
                    promises.push(this.createAuthenticators({ userId, authenticators }));
                }
                if (oauthProviders && oauthProviders.length > 0) {
                    promises.push(this.createOauthProviders({ userId, oauthProviders }));
                }
                if (apiKeys && apiKeys.length > 0) {
                    promises.push(this.createApiKeys({ userId, apiKeys }));
                }
                // Execute all additions/updates operations in parallel
                return await Promise.all(promises);
            }
            catch (error) {
                // Surface error
                throw error;
            }
        };
    }
    /**
     * Comprehensive authentication update for an end user.
     * Combines add/update and delete operations into a single call.
     *
     * The behavior is driven by whether values are set to:
     * - A string/array (to create or update)
     * - `null` or an array of IDs (to remove)
     *
     * All operations are executed in parallel where applicable.
     *
     * @param params - A structured object containing all the update parameters
     *   @param params.userId - Unique identifier of the user
     *   @param params.phoneNumber - String to set (new phone) or `null` to remove
     *   @param params.email - String to set (new email) or `null` to remove
     *   @param params.authenticators - Object describing authenticators to add or remove
     *   @param params.oauthProviders - Object describing OAuth providers to add or remove
     *   @param params.apiKeys - Object describing API keys to add or remove
     *
     * @returns A promise that resolves to a boolean indicating overall success
     */
    async updateUserAuth(params) {
        try {
            const { userId, phoneNumber, email, authenticators, oauthProviders, apiKeys, } = params;
            const promises = [];
            // Handle phone/email in a single updateUser call if both are changing,
            // or separate calls if only one is changing.
            const userUpdates = {};
            if (phoneNumber !== undefined) {
                userUpdates.userPhoneNumber = phoneNumber === null ? "" : phoneNumber;
            }
            if (email !== undefined) {
                userUpdates.userEmail = email === null ? "" : email;
            }
            if (Object.keys(userUpdates).length > 0) {
                promises.push(this.updateUser({ userId, ...userUpdates, userTagIds: [] }));
            }
            // Handle authenticators
            if (authenticators) {
                if (authenticators.add?.length) {
                    promises.push(this.createAuthenticators({
                        userId,
                        authenticators: authenticators.add,
                    }));
                }
                if (authenticators.deleteIds?.length) {
                    promises.push(this.deleteAuthenticators({
                        userId,
                        authenticatorIds: authenticators.deleteIds,
                    }));
                }
            }
            // Handle OAuth providers
            if (oauthProviders) {
                if (oauthProviders.add?.length) {
                    promises.push(this.createOauthProviders({
                        userId,
                        oauthProviders: oauthProviders.add,
                    }));
                }
                if (oauthProviders.deleteIds?.length) {
                    promises.push(this.deleteOauthProviders({
                        userId,
                        providerIds: oauthProviders.deleteIds,
                    }));
                }
            }
            // Handle API keys
            if (apiKeys) {
                if (apiKeys.add?.length) {
                    promises.push(this.createApiKeys({
                        userId,
                        apiKeys: apiKeys.add,
                    }));
                }
                if (apiKeys.deleteIds?.length) {
                    promises.push(this.deleteApiKeys({
                        userId,
                        apiKeyIds: apiKeys.deleteIds,
                    }));
                }
            }
            // Execute all requested operations in parallel
            await Promise.all(promises);
            return true;
        }
        catch (error) {
            // Surface error
            throw error;
        }
    }
}
class TurnkeyPasskeyClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Passkey);
        /**
         * Create a passkey for an end-user, taking care of various lower-level details.
         *
         * @returns {Promise<Passkey>}
         */
        this.createUserPasskey = async (config = {}) => {
            const challenge = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.generateRandomBuffer)();
            const encodedChallenge = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.base64UrlEncode)(challenge);
            const authenticatorUserId = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.generateRandomBuffer)();
            // WebAuthn credential options options can be found here:
            // https://www.w3.org/TR/webauthn-2/#sctn-sample-registration
            //
            // All pubkey algorithms can be found here: https://www.iana.org/assignments/cose/cose.xhtml#algorithms
            // Turnkey only supports ES256 (-7) and RS256 (-257)
            //
            // The pubkey type only supports one value, "public-key"
            // See https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype for more details
            // TODO: consider un-nesting these config params
            const webauthnConfig = {
                publicKey: {
                    rp: {
                        id: config.publicKey?.rp?.id ?? this.rpId,
                        name: config.publicKey?.rp?.name ?? "",
                    },
                    challenge: config.publicKey?.challenge ?? challenge,
                    pubKeyCredParams: config.publicKey?.pubKeyCredParams ?? [
                        {
                            type: "public-key",
                            alg: -7,
                        },
                        {
                            type: "public-key",
                            alg: -257,
                        },
                    ],
                    user: {
                        id: config.publicKey?.user?.id ?? authenticatorUserId,
                        name: config.publicKey?.user?.name ?? "Default User",
                        displayName: config.publicKey?.user?.displayName ?? "Default User",
                    },
                    authenticatorSelection: {
                        authenticatorAttachment: config.publicKey?.authenticatorSelection?.authenticatorAttachment ??
                            undefined, // default to empty
                        requireResidentKey: config.publicKey?.authenticatorSelection?.requireResidentKey ??
                            true,
                        residentKey: config.publicKey?.authenticatorSelection?.residentKey ?? "required",
                        userVerification: config.publicKey?.authenticatorSelection?.userVerification ??
                            "preferred",
                    },
                },
            };
            const attestation = await (0,_turnkey_http__WEBPACK_IMPORTED_MODULE_0__.getWebAuthnAttestation)(webauthnConfig);
            return {
                encodedChallenge: config.publicKey?.challenge
                    ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.base64UrlEncode)(config.publicKey?.challenge)
                    : encodedChallenge,
                attestation,
            };
        };
        this.rpId = this.stamper.rpId;
    }
}
/**
 * TurnkeyIframeClient is a client that uses an iframe to interact with the Turnkey API.
 * It is used to create read-write sessions, and to inject credential bundles into the iframe.
 * It is also used to extract encrypted credential bundles from the iframe.
 * @extends TurnkeyBrowserClient
 */
class TurnkeyIframeClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Iframe);
        this.injectCredentialBundle = async (credentialBundle) => {
            return await this.stamper.injectCredentialBundle(credentialBundle);
        };
        this.injectWalletExportBundle = async (credentialBundle, organizationId) => {
            return await this.stamper.injectWalletExportBundle(credentialBundle, organizationId);
        };
        this.injectKeyExportBundle = async (credentialBundle, organizationId, keyFormat) => {
            return await this.stamper.injectKeyExportBundle(credentialBundle, organizationId, keyFormat);
        };
        this.injectImportBundle = async (bundle, organizationId, userId) => {
            return await this.stamper.injectImportBundle(bundle, organizationId, userId);
        };
        this.extractWalletEncryptedBundle = async () => {
            return await this.stamper.extractWalletEncryptedBundle();
        };
        this.extractKeyEncryptedBundle = async (keyFormat) => {
            return await this.stamper.extractKeyEncryptedBundle(keyFormat);
        };
        this.getEmbeddedPublicKey = async () => {
            return await this.stamper.getEmbeddedPublicKey();
        };
        this.clearEmbeddedKey = async () => {
            return await this.stamper.clearEmbeddedKey();
        };
        this.initEmbeddedKey = async () => {
            return await this.stamper.initEmbeddedKey();
        };
        this.iframePublicKey = this.stamper.iframePublicKey;
    }
}
class TurnkeyWalletClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.Wallet);
        this.wallet = config.wallet;
    }
    async getPublicKey() {
        return this.wallet.getPublicKey();
    }
    getWalletInterface() {
        return this.wallet;
    }
}
/**
 * TurnkeyIndexedDbClient is a client that uses IndexedDb to interact with the Turnkey API.
 * @extends TurnkeyBrowserClient
 */
class TurnkeyIndexedDbClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config, _types_base_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthClient.IndexedDb);
        this.clear = async () => {
            return await this.stamper.clear();
        };
        this.getPublicKey = async () => {
            return await this.stamper.getPublicKey();
        };
        this.init = async () => {
            return await this.stamper.init();
        };
        this.resetKeyPair = async (externalKeyPair) => {
            return await this.stamper.resetKeyPair(externalKeyPair);
        };
    }
}


//# sourceMappingURL=browser-clients.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__generated__/sdk-client-base.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__generated__/sdk-client-base.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeySDKClientBase: () => (/* binding */ TurnkeySDKClientBase)
/* harmony export */ });
/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ "./node_modules/@turnkey/http/dist/index.mjs");
/* harmony import */ var _types_base_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../__types__/base.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs");
/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__generated__/version.mjs");
/* harmony import */ var _storage_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../storage.mjs */ "./node_modules/@turnkey/sdk-browser/dist/storage.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/@turnkey/sdk-browser/dist/utils.mjs");






/* @generated by codegen. DO NOT EDIT BY HAND */
class TurnkeySDKClientBase {
    constructor(config) {
        this.getActivity = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_activity", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetActivity = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getApiKey = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_api_key", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetApiKey = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_api_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getApiKeys = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_api_keys", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetApiKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getAttestationDocument = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_attestation", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetAttestationDocument = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_attestation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getAuthenticator = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_authenticator", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetAuthenticator = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_authenticator";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getAuthenticators = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_authenticators", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetAuthenticators = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getOauthProviders = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_oauth_providers", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetOauthProviders = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getOrganization = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_organization", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetOrganization = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getOrganizationConfigs = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_organization_configs", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetOrganizationConfigs = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_organization_configs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getPolicy = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_policy", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetPolicy = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getPolicyEvaluations = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_policy_evaluations", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetPolicyEvaluations = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_policy_evaluations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getPrivateKey = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_private_key", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetPrivateKey = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getSmartContractInterface = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_smart_contract_interface", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetSmartContractInterface = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getUser = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_user", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetUser = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getWallet = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_wallet", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getWalletAccount = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/get_wallet_account", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetWalletAccount = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/get_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getActivities = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_activities", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetActivities = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_activities";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getPolicies = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_policies", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetPolicies = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.listPrivateKeyTags = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_private_key_tags", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampListPrivateKeyTags = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getPrivateKeys = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_private_keys", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetPrivateKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getSmartContractInterfaces = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_smart_contract_interfaces", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetSmartContractInterfaces = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl +
                "/public/v1/query/list_smart_contract_interfaces";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getSubOrgIds = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_suborgs", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetSubOrgIds = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.listUserTags = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_user_tags", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampListUserTags = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getUsers = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_users", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetUsers = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getVerifiedSubOrgIds = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_verified_suborgs", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetVerifiedSubOrgIds = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_verified_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getWalletAccounts = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_wallet_accounts", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetWalletAccounts = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getWallets = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/list_wallets", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetWallets = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/list_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.getWhoami = async (input = {}) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/public/v1/query/whoami", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampGetWhoami = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/query/whoami";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.approveActivity = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.activityDecision("/public/v1/submit/approve_activity", {
                parameters: rest,
                organizationId: organizationId ?? session?.organizationId ?? this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_APPROVE_ACTIVITY",
            });
        };
        this.stampApproveActivity = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/approve_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createApiKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_api_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
            }, "createApiKeysResult");
        };
        this.stampCreateApiKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createApiOnlyUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_api_only_users", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
            }, "createApiOnlyUsersResult");
        };
        this.stampCreateApiOnlyUsers = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_api_only_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createAuthenticators = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_authenticators", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
            }, "createAuthenticatorsResult");
        };
        this.stampCreateAuthenticators = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createInvitations = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_invitations", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_INVITATIONS",
            }, "createInvitationsResult");
        };
        this.stampCreateInvitations = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_invitations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createOauthProviders = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_oauth_providers", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
            }, "createOauthProvidersResult");
        };
        this.stampCreateOauthProviders = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createPolicies = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_policies", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_POLICIES",
            }, "createPoliciesResult");
        };
        this.stampCreatePolicies = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createPolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_POLICY_V3",
            }, "createPolicyResult");
        };
        this.stampCreatePolicy = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createPrivateKeyTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_private_key_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
            }, "createPrivateKeyTagResult");
        };
        this.stampCreatePrivateKeyTag = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createPrivateKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_private_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
            }, "createPrivateKeysResultV2");
        };
        this.stampCreatePrivateKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createReadOnlySession = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_read_only_session", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
            }, "createReadOnlySessionResult");
        };
        this.stampCreateReadOnlySession = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_read_only_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createReadWriteSession = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_read_write_session", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2",
            }, "createReadWriteSessionResultV2");
        };
        this.stampCreateReadWriteSession = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_read_write_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createSmartContractInterface = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_smart_contract_interface", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE",
            }, "createSmartContractInterfaceResult");
        };
        this.stampCreateSmartContractInterface = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl +
                "/public/v1/submit/create_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createSubOrganization = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_sub_organization", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7",
            }, "createSubOrganizationResultV7");
        };
        this.stampCreateSubOrganization = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createUserTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_user_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_USER_TAG",
            }, "createUserTagResult");
        };
        this.stampCreateUserTag = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_users", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_USERS_V3",
            }, "createUsersResult");
        };
        this.stampCreateUsers = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_WALLET",
            }, "createWalletResult");
        };
        this.stampCreateWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.createWalletAccounts = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/create_wallet_accounts", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
            }, "createWalletAccountsResult");
        };
        this.stampCreateWalletAccounts = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/create_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteApiKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_api_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_API_KEYS",
            }, "deleteApiKeysResult");
        };
        this.stampDeleteApiKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteAuthenticators = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_authenticators", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
            }, "deleteAuthenticatorsResult");
        };
        this.stampDeleteAuthenticators = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteInvitation = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_invitation", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_INVITATION",
            }, "deleteInvitationResult");
        };
        this.stampDeleteInvitation = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_invitation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteOauthProviders = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_oauth_providers", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
            }, "deleteOauthProvidersResult");
        };
        this.stampDeleteOauthProviders = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deletePolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_POLICY",
            }, "deletePolicyResult");
        };
        this.stampDeletePolicy = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deletePrivateKeyTags = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_private_key_tags", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
            }, "deletePrivateKeyTagsResult");
        };
        this.stampDeletePrivateKeyTags = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deletePrivateKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_private_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS",
            }, "deletePrivateKeysResult");
        };
        this.stampDeletePrivateKeys = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteSmartContractInterface = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_smart_contract_interface", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE",
            }, "deleteSmartContractInterfaceResult");
        };
        this.stampDeleteSmartContractInterface = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl +
                "/public/v1/submit/delete_smart_contract_interface";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteSubOrganization = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_sub_organization", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION",
            }, "deleteSubOrganizationResult");
        };
        this.stampDeleteSubOrganization = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteUserTags = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_user_tags", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_USER_TAGS",
            }, "deleteUserTagsResult");
        };
        this.stampDeleteUserTags = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_users", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_USERS",
            }, "deleteUsersResult");
        };
        this.stampDeleteUsers = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.deleteWallets = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/delete_wallets", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_WALLETS",
            }, "deleteWalletsResult");
        };
        this.stampDeleteWallets = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/delete_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.emailAuth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/email_auth", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EMAIL_AUTH_V2",
            }, "emailAuthResult");
        };
        this.stampEmailAuth = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/email_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.exportPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/export_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
            }, "exportPrivateKeyResult");
        };
        this.stampExportPrivateKey = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/export_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.exportWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/export_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_WALLET",
            }, "exportWalletResult");
        };
        this.stampExportWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/export_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.exportWalletAccount = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/export_wallet_account", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
            }, "exportWalletAccountResult");
        };
        this.stampExportWalletAccount = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/export_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.importPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/import_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
            }, "importPrivateKeyResult");
        };
        this.stampImportPrivateKey = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.importWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/import_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_IMPORT_WALLET",
            }, "importWalletResult");
        };
        this.stampImportWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initFiatOnRamp = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_fiat_on_ramp", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_FIAT_ON_RAMP",
            }, "initFiatOnRampResult");
        };
        this.stampInitFiatOnRamp = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_fiat_on_ramp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initImportPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_import_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
            }, "initImportPrivateKeyResult");
        };
        this.stampInitImportPrivateKey = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initImportWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_import_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
            }, "initImportWalletResult");
        };
        this.stampInitImportWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initOtp = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_otp", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_OTP",
            }, "initOtpResult");
        };
        this.stampInitOtp = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initOtpAuth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_otp_auth", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_OTP_AUTH_V2",
            }, "initOtpAuthResultV2");
        };
        this.stampInitOtpAuth = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.initUserEmailRecovery = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/init_user_email_recovery", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
            }, "initUserEmailRecoveryResult");
        };
        this.stampInitUserEmailRecovery = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/init_user_email_recovery";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.oauth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/oauth", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_OAUTH",
            }, "oauthResult");
        };
        this.stampOauth = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/oauth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.oauthLogin = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/oauth_login", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_OAUTH_LOGIN",
            }, "oauthLoginResult");
        };
        this.stampOauthLogin = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/oauth_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.otpAuth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/otp_auth", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_OTP_AUTH",
            }, "otpAuthResult");
        };
        this.stampOtpAuth = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.otpLogin = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/otp_login", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_OTP_LOGIN",
            }, "otpLoginResult");
        };
        this.stampOtpLogin = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/otp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.recoverUser = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/recover_user", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_RECOVER_USER",
            }, "recoverUserResult");
        };
        this.stampRecoverUser = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/recover_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.rejectActivity = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.activityDecision("/public/v1/submit/reject_activity", {
                parameters: rest,
                organizationId: organizationId ?? session?.organizationId ?? this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_REJECT_ACTIVITY",
            });
        };
        this.stampRejectActivity = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/reject_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.removeOrganizationFeature = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/remove_organization_feature", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
            }, "removeOrganizationFeatureResult");
        };
        this.stampRemoveOrganizationFeature = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/remove_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.setOrganizationFeature = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/set_organization_feature", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
            }, "setOrganizationFeatureResult");
        };
        this.stampSetOrganizationFeature = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/set_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.signRawPayload = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/sign_raw_payload", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
            }, "signRawPayloadResult");
        };
        this.stampSignRawPayload = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/sign_raw_payload";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.signRawPayloads = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/sign_raw_payloads", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
            }, "signRawPayloadsResult");
        };
        this.stampSignRawPayloads = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/sign_raw_payloads";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.signTransaction = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/sign_transaction", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
            }, "signTransactionResult");
        };
        this.stampSignTransaction = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/sign_transaction";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.stampLogin = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/stamp_login", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_STAMP_LOGIN",
            }, "stampLoginResult");
        };
        this.stampStampLogin = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/stamp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updatePolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_POLICY_V2",
            }, "updatePolicyResultV2");
        };
        this.stampUpdatePolicy = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updatePrivateKeyTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_private_key_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
            }, "updatePrivateKeyTagResult");
        };
        this.stampUpdatePrivateKeyTag = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateRootQuorum = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_root_quorum", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
            }, "updateRootQuorumResult");
        };
        this.stampUpdateRootQuorum = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_root_quorum";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateUser = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_user", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER",
            }, "updateUserResult");
        };
        this.stampUpdateUser = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateUserEmail = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_user_email", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER_EMAIL",
            }, "updateUserEmailResult");
        };
        this.stampUpdateUserEmail = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_user_email";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateUserName = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_user_name", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER_NAME",
            }, "updateUserNameResult");
        };
        this.stampUpdateUserName = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_user_name";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateUserPhoneNumber = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_user_phone_number", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER",
            }, "updateUserPhoneNumberResult");
        };
        this.stampUpdateUserPhoneNumber = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_user_phone_number";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateUserTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_user_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER_TAG",
            }, "updateUserTagResult");
        };
        this.stampUpdateUserTag = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.updateWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/update_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_WALLET",
            }, "updateWalletResult");
        };
        this.stampUpdateWallet = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/update_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.verifyOtp = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.command("/public/v1/submit/verify_otp", {
                parameters: rest,
                organizationId: organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_VERIFY_OTP",
            }, "verifyOtpResult");
        };
        this.stampVerifyOtp = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/public/v1/submit/verify_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.testRateLimits = async (input) => {
            let session = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_3__.StorageKeys.Session);
            session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSession)(session);
            return this.request("/tkhq/api/v1/test_rate_limits", {
                ...input,
                organizationId: input.organizationId ??
                    session?.organizationId ??
                    this.config.organizationId,
            });
        };
        this.stampTestRateLimits = async (input) => {
            if (!this.stamper) {
                return undefined;
            }
            const fullUrl = this.config.apiBaseUrl + "/tkhq/api/v1/test_rate_limits";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        this.config = config;
        if (config.stamper) {
            this.stamper = config.stamper;
        }
    }
    async request(url, body) {
        const fullUrl = this.config.apiBaseUrl + url;
        const stringifiedBody = JSON.stringify(body);
        var headers = {
            "X-Client-Version": _version_mjs__WEBPACK_IMPORTED_MODULE_2__.VERSION,
        };
        if (this.stamper) {
            const stamp = await this.stamper.stamp(stringifiedBody);
            headers[stamp.stampHeaderName] = stamp.stampHeaderValue;
        }
        if (this.config.readOnlySession) {
            headers["X-Session"] = this.config.readOnlySession;
        }
        const response = await fetch(fullUrl, {
            method: "POST",
            headers: headers,
            body: stringifiedBody,
            redirect: "follow",
        });
        if (!response.ok) {
            let res;
            try {
                res = await response.json();
            }
            catch (_) {
                throw new Error(`${response.status} ${response.statusText}`);
            }
            throw new _types_base_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyRequestError(res);
        }
        const data = await response.json();
        return data;
    }
    async command(url, body, resultKey) {
        const pollingDuration = this.config.activityPoller?.intervalMs ?? 1000;
        const maxRetries = this.config.activityPoller?.numRetries ?? 3;
        const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
        const handleResponse = (activityData) => {
            const { result, status } = activityData.activity;
            if (status === "ACTIVITY_STATUS_COMPLETED") {
                return {
                    ...result[`${resultKey}`],
                    ...activityData,
                };
            }
            return activityData;
        };
        let attempts = 0;
        const pollStatus = async (activityId) => {
            const pollBody = { activityId };
            const pollData = (await this.getActivity(pollBody));
            if (attempts > maxRetries) {
                return handleResponse(pollData);
            }
            attempts += 1;
            if (!_turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TERMINAL_ACTIVITY_STATUSES.includes(pollData.activity.status)) {
                await sleep(pollingDuration);
                return pollStatus(activityId);
            }
            return handleResponse(pollData);
        };
        const responseData = (await this.request(url, body));
        if (!_turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TERMINAL_ACTIVITY_STATUSES.includes(responseData.activity.status)) {
            return pollStatus(responseData.activity.id);
        }
        return handleResponse(responseData);
    }
    async activityDecision(url, body) {
        const activityData = (await this.request(url, body));
        return {
            ...activityData["activity"]["result"],
            ...activityData,
        };
    }
}


//# sourceMappingURL=sdk-client-base.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__generated__/version.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__generated__/version.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "@turnkey/sdk-browser@5.8.0";


//# sourceMappingURL=version.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__polyfills__/window.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__polyfills__/window.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WindowWrapper)
/* harmony export */ });
const loadWindow = () => {
    if (typeof window !== "undefined") {
        return window;
    }
    else {
        return {
            localStorage: {
                getItem: (_key) => {
                    return null;
                },
                setItem: (_key, _value) => { },
                removeItem: (_key) => { },
                clear: () => { },
                key: (_index) => {
                    return null;
                },
                length: 0,
            },
            location: {
                hostname: "",
            },
        };
    }
};
var WindowWrapper = loadWindow();


//# sourceMappingURL=window.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthClient: () => (/* binding */ AuthClient),
/* harmony export */   MethodType: () => (/* binding */ MethodType),
/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError)
/* harmony export */ });
var MethodType;
(function (MethodType) {
    MethodType[MethodType["Get"] = 0] = "Get";
    MethodType[MethodType["List"] = 1] = "List";
    MethodType[MethodType["Command"] = 2] = "Command";
})(MethodType || (MethodType = {}));
class TurnkeyRequestError extends Error {
    constructor(input) {
        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;
        if (input.details != null) {
            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
        }
        super(turnkeyErrorMessage);
        this.name = "TurnkeyRequestError";
        this.details = input.details ?? null;
        this.code = input.code;
    }
}
/**
 * The Client used to authenticate the user.
 */
var AuthClient;
(function (AuthClient) {
    AuthClient["Passkey"] = "passkey";
    AuthClient["Wallet"] = "wallet";
    AuthClient["Iframe"] = "iframe";
    AuthClient["IndexedDb"] = "indexed-db";
})(AuthClient || (AuthClient = {}));


//# sourceMappingURL=base.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/constants.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/constants.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_SESSION_EXPIRATION_IN_SECONDS: () => (/* binding */ DEFAULT_SESSION_EXPIRATION_IN_SECONDS)
/* harmony export */ });
const DEFAULT_SESSION_EXPIRATION_IN_SECONDS = "900"; // default to 15 minutes


//# sourceMappingURL=constants.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiKeyStamper: () => (/* reexport safe */ _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper),
/* harmony export */   AuthClient: () => (/* reexport safe */ _types_base_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthClient),
/* harmony export */   DEFAULT_APTOS_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_APTOS_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2SH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_SIGNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_COSMOS_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_COSMOS_ACCOUNTS),
/* harmony export */   DEFAULT_DOGE_MAINNET_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_DOGE_MAINNET_ACCOUNTS),
/* harmony export */   DEFAULT_DOGE_TESTNET_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_DOGE_TESTNET_ACCOUNTS),
/* harmony export */   DEFAULT_ETHEREUM_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_ETHEREUM_ACCOUNTS),
/* harmony export */   DEFAULT_SEI_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SEI_ACCOUNTS),
/* harmony export */   DEFAULT_SOLANA_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SOLANA_ACCOUNTS),
/* harmony export */   DEFAULT_SUI_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SUI_ACCOUNTS),
/* harmony export */   DEFAULT_TON_V3R2_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_TON_V3R2_ACCOUNTS),
/* harmony export */   DEFAULT_TON_V4R2_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_TON_V4R2_ACCOUNTS),
/* harmony export */   DEFAULT_TRON_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_TRON_ACCOUNTS),
/* harmony export */   DEFAULT_XLM_ACCOUNTS: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_XLM_ACCOUNTS),
/* harmony export */   IframeEventType: () => (/* reexport safe */ _turnkey_iframe_stamper__WEBPACK_IMPORTED_MODULE_2__.IframeEventType),
/* harmony export */   IframeStamper: () => (/* reexport safe */ _turnkey_iframe_stamper__WEBPACK_IMPORTED_MODULE_2__.IframeStamper),
/* harmony export */   MethodType: () => (/* reexport safe */ _types_base_mjs__WEBPACK_IMPORTED_MODULE_7__.MethodType),
/* harmony export */   SessionType: () => (/* reexport safe */ _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_8__.SessionType),
/* harmony export */   StorageKeys: () => (/* reexport safe */ _storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys),
/* harmony export */   Turnkey: () => (/* reexport safe */ _sdk_client_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyBrowserSDK),
/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError),
/* harmony export */   TurnkeyApi: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyApi),
/* harmony export */   TurnkeyBrowserClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__.TurnkeyBrowserClient),
/* harmony export */   TurnkeyIframeClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__.TurnkeyIframeClient),
/* harmony export */   TurnkeyIndexedDbClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__.TurnkeyIndexedDbClient),
/* harmony export */   TurnkeyPasskeyClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__.TurnkeyPasskeyClient),
/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError),
/* harmony export */   TurnkeyWalletClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__.TurnkeyWalletClient),
/* harmony export */   WebauthnStamper: () => (/* reexport safe */ _turnkey_webauthn_stamper__WEBPACK_IMPORTED_MODULE_3__.WebauthnStamper),
/* harmony export */   createActivityPoller: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.createActivityPoller),
/* harmony export */   defaultAptosAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultAptosAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2PKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinMainnetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2SHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinMainnetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2TRAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinMainnetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2WPKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinMainnetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2WSHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinMainnetP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2PKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinRegtestP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2SHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinRegtestP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2TRAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinRegtestP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2WPKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinRegtestP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2WSHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinRegtestP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2PKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinSignetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2SHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinSignetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2TRAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinSignetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2WPKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinSignetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2WSHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinSignetP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2PKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinTestnetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2SHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinTestnetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2TRAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinTestnetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2WPKHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinTestnetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2WSHAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultBitcoinTestnetP2WSHAccountAtIndex),
/* harmony export */   defaultCosmosAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultCosmosAccountAtIndex),
/* harmony export */   defaultDogeMainnetAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultDogeMainnetAccountAtIndex),
/* harmony export */   defaultDogeTestnetAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultDogeTestnetAccountAtIndex),
/* harmony export */   defaultEthereumAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultEthereumAccountAtIndex),
/* harmony export */   defaultSeiAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultSeiAccountAtIndex),
/* harmony export */   defaultSolanaAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultSolanaAccountAtIndex),
/* harmony export */   defaultSuiAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultSuiAccountAtIndex),
/* harmony export */   defaultTonV3r2AccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultTonV3r2AccountAtIndex),
/* harmony export */   defaultTonV4r2AccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultTonV4r2AccountAtIndex),
/* harmony export */   defaultTronAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultTronAccountAtIndex),
/* harmony export */   defaultXlmAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultXlmAccountAtIndex),
/* harmony export */   defaultXrpAccountAtIndex: () => (/* reexport safe */ _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__.defaultXrpAccountAtIndex),
/* harmony export */   getStorageValue: () => (/* reexport safe */ _storage_mjs__WEBPACK_IMPORTED_MODULE_5__.getStorageValue),
/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.getWebAuthnAttestation),
/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.sealAndStampRequestBody),
/* harmony export */   setStorageValue: () => (/* reexport safe */ _storage_mjs__WEBPACK_IMPORTED_MODULE_5__.setStorageValue),
/* harmony export */   signWithApiKey: () => (/* reexport safe */ _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.signWithApiKey)
/* harmony export */ });
/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ "./node_modules/@turnkey/http/dist/index.mjs");
/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ "./node_modules/@turnkey/api-key-stamper/dist/index.mjs");
/* harmony import */ var _turnkey_iframe_stamper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turnkey/iframe-stamper */ "./node_modules/@turnkey/iframe-stamper/dist/index.mjs");
/* harmony import */ var _turnkey_webauthn_stamper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/webauthn-stamper */ "./node_modules/@turnkey/webauthn-stamper/dist/index.mjs");
/* harmony import */ var _sdk_client_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdk-client.mjs */ "./node_modules/@turnkey/sdk-browser/dist/sdk-client.mjs");
/* harmony import */ var _storage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage.mjs */ "./node_modules/@turnkey/sdk-browser/dist/storage.mjs");
/* harmony import */ var _turnkey_helpers_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./turnkey-helpers.mjs */ "./node_modules/@turnkey/sdk-browser/dist/turnkey-helpers.mjs");
/* harmony import */ var _types_base_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./__types__/base.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs");
/* harmony import */ var _turnkey_sdk_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @turnkey/sdk-types */ "./node_modules/@turnkey/sdk-types/dist/index.mjs");
/* harmony import */ var _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./__clients__/browser-clients.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__clients__/browser-clients.mjs");










//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/sdk-client.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/sdk-client.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TurnkeyBrowserClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyBrowserClient),
/* harmony export */   TurnkeyBrowserSDK: () => (/* binding */ TurnkeyBrowserSDK),
/* harmony export */   TurnkeyIframeClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyIframeClient),
/* harmony export */   TurnkeyIndexedDbClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyIndexedDbClient),
/* harmony export */   TurnkeyPasskeyClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyPasskeyClient),
/* harmony export */   TurnkeyWalletClient: () => (/* reexport safe */ _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyWalletClient)
/* harmony export */ });
/* harmony import */ var _turnkey_wallet_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/wallet-stamper */ "./node_modules/@turnkey/wallet-stamper/dist/index.mjs");
/* harmony import */ var _turnkey_iframe_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/iframe-stamper */ "./node_modules/@turnkey/iframe-stamper/dist/index.mjs");
/* harmony import */ var _turnkey_webauthn_stamper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turnkey/webauthn-stamper */ "./node_modules/@turnkey/webauthn-stamper/dist/index.mjs");
/* harmony import */ var _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./__polyfills__/window.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__polyfills__/window.mjs");
/* harmony import */ var _types_base_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./__types__/base.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__types__/base.mjs");
/* harmony import */ var _storage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage.mjs */ "./node_modules/@turnkey/sdk-browser/dist/storage.mjs");
/* harmony import */ var _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./__clients__/browser-clients.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__clients__/browser-clients.mjs");
/* harmony import */ var _generated_version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./__generated__/version.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__generated__/version.mjs");
/* harmony import */ var _turnkey_indexed_db_stamper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @turnkey/indexed-db-stamper */ "./node_modules/@turnkey/indexed-db-stamper/dist/index.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.mjs */ "./node_modules/@turnkey/sdk-browser/dist/utils.mjs");












class TurnkeyBrowserSDK {
    constructor(config) {
        /**
         * Creates a passkey client. The parameters override the default values passed to the underlying Turnkey `WebauthnStamper`
         * @param PasskeyClientParams
         * @returns new TurnkeyPasskeyClient
         */
        this.passkeyClient = (params) => {
            const targetRpId = params?.rpId ?? this.config.rpId ?? _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].location.hostname;
            if (!targetRpId) {
                throw new Error("Tried to initialize a passkey client with no rpId defined");
            }
            this.stamper = new _turnkey_webauthn_stamper__WEBPACK_IMPORTED_MODULE_2__.WebauthnStamper({
                rpId: targetRpId,
                ...(params?.timeout !== undefined && { timeout: params?.timeout }),
                ...(params?.userVerification !== undefined && {
                    userVerification: params?.userVerification,
                }),
                ...(params?.allowCredentials !== undefined && {
                    allowCredentials: params?.allowCredentials,
                }),
            });
            return new _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyPasskeyClient({
                stamper: this.stamper,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.iframeClient = async (params) => {
            if (!params.iframeUrl) {
                throw new Error("Tried to initialize iframeClient with no iframeUrl defined");
            }
            const TurnkeyIframeElementId = params.iframeElementId ?? "turnkey-default-iframe-element-id";
            this.stamper = new _turnkey_iframe_stamper__WEBPACK_IMPORTED_MODULE_1__.IframeStamper({
                iframeContainer: params.iframeContainer,
                iframeUrl: params.iframeUrl,
                iframeElementId: TurnkeyIframeElementId,
            });
            await this.stamper.init(params.dangerouslyOverrideIframeKeyTtl ?? undefined);
            return new _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyIframeClient({
                stamper: this.stamper,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.walletClient = (wallet) => {
            return new _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyWalletClient({
                stamper: new _turnkey_wallet_stamper__WEBPACK_IMPORTED_MODULE_0__.WalletStamper(wallet),
                wallet,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.indexedDbClient = async () => {
            this.stamper = new _turnkey_indexed_db_stamper__WEBPACK_IMPORTED_MODULE_8__.IndexedDbStamper();
            return new _clients_browser_clients_mjs__WEBPACK_IMPORTED_MODULE_6__.TurnkeyIndexedDbClient({
                stamper: this.stamper,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.serverSign = async (methodName, params, serverSignUrl) => {
            const targetServerSignUrl = serverSignUrl ?? this.config.serverSignUrl;
            if (!targetServerSignUrl) {
                throw new Error("Tried to call serverSign with no serverSignUrl defined");
            }
            const stringifiedBody = JSON.stringify({
                methodName: methodName,
                params: params,
            });
            const response = await fetch(targetServerSignUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Client-Version": _generated_version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION,
                },
                body: stringifiedBody,
                redirect: "follow",
            });
            if (!response.ok) {
                let res;
                try {
                    res = await response.json();
                }
                catch (_) {
                    throw new Error(`${response.status} ${response.statusText}`);
                }
                throw new _types_base_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyRequestError(res);
            }
            const data = await response.json();
            return data;
        };
        /**
         * If there is a valid, active session, this will parse it and return it
         *
         * @returns {Promise<Session | undefined>}
         */
        this.getSession = async () => {
            const currentSession = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Session);
            let session;
            if (typeof currentSession === "string") {
                session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.parseSession)(currentSession);
            }
            else {
                session = currentSession;
            }
            if (session && session.expiry * 1000 > Date.now()) {
                return session;
            }
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.removeStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Session);
            return undefined;
        };
        /**
         * If there is a valid, active session, this will return it without parsing it
         *
         * @returns {Promise<Session | undefined>}
         */
        this.getRawSession = async () => {
            const currentSession = await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.getStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Session);
            let session;
            if (typeof currentSession === "string") {
                session = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.parseSession)(currentSession);
                if (session && session.expiry * 1000 > Date.now()) {
                    return currentSession; // return raw JWT string
                }
            }
            else if (currentSession && currentSession.expiry * 1000 > Date.now()) {
                return JSON.stringify(currentSession);
            }
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.removeStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Session);
            return undefined;
        };
        /**
         * Clears out all data pertaining to an end user session.
         *
         * @returns {Promise<boolean>}
         */
        this.logout = async () => {
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.removeStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Client);
            await (0,_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.removeStorageValue)(_storage_mjs__WEBPACK_IMPORTED_MODULE_5__.StorageKeys.Session);
            return true;
        };
        this.config = config;
    }
}


//# sourceMappingURL=sdk-client.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/storage.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/storage.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StorageKeys: () => (/* binding */ StorageKeys),
/* harmony export */   getStorageValue: () => (/* binding */ getStorageValue),
/* harmony export */   removeStorageValue: () => (/* binding */ removeStorageValue),
/* harmony export */   setStorageValue: () => (/* binding */ setStorageValue),
/* harmony export */   storeSession: () => (/* binding */ storeSession)
/* harmony export */ });
/* harmony import */ var _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__polyfills__/window.mjs */ "./node_modules/@turnkey/sdk-browser/dist/__polyfills__/window.mjs");


var StorageKeys;
(function (StorageKeys) {
    StorageKeys["Session"] = "@turnkey/session/v2";
    StorageKeys["Client"] = "@turnkey/client";
})(StorageKeys || (StorageKeys = {}));
var StorageLocation;
(function (StorageLocation) {
    StorageLocation["Local"] = "local";
    StorageLocation["Secure"] = "secure";
    StorageLocation["Session"] = "session";
})(StorageLocation || (StorageLocation = {}));
const STORAGE_VALUE_LOCATIONS = {
    [StorageKeys.Session]: StorageLocation.Session,
    [StorageKeys.Client]: StorageLocation.Session,
};
const STORAGE_LOCATIONS = {
    [StorageLocation.Local]: _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].localStorage,
    [StorageLocation.Secure]: _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].localStorage,
    [StorageLocation.Session]: _polyfills_window_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].localStorage,
};
const getStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    const storageItem = browserStorageLocation.getItem(storageKey);
    return storageItem ? JSON.parse(storageItem) : undefined;
};
const setStorageValue = async (storageKey, storageValue) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.setItem(storageKey, JSON.stringify(storageValue));
};
const removeStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.removeItem(storageKey);
};
/**
 * Saves a session and client to storage.
 *
 * @param {Session} session - The session response containing session details.
 * @param {AuthClient} authClient - The authentication client used for the session.
 * @throws Will throw an error if the authentication client is not set.
 * @returns {Promise<void>} A promise that resolves when the session is saved.
 */
const storeSession = async (session, client) => {
    await setStorageValue(StorageKeys.Session, session);
    if (client) {
        await setStorageValue(StorageKeys.Client, client);
    }
};


//# sourceMappingURL=storage.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/turnkey-helpers.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/turnkey-helpers.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_APTOS_ACCOUNTS: () => (/* binding */ DEFAULT_APTOS_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2SH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_SIGNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS),
/* harmony export */   DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS: () => (/* binding */ DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS),
/* harmony export */   DEFAULT_COSMOS_ACCOUNTS: () => (/* binding */ DEFAULT_COSMOS_ACCOUNTS),
/* harmony export */   DEFAULT_DOGE_MAINNET_ACCOUNTS: () => (/* binding */ DEFAULT_DOGE_MAINNET_ACCOUNTS),
/* harmony export */   DEFAULT_DOGE_TESTNET_ACCOUNTS: () => (/* binding */ DEFAULT_DOGE_TESTNET_ACCOUNTS),
/* harmony export */   DEFAULT_ETHEREUM_ACCOUNTS: () => (/* binding */ DEFAULT_ETHEREUM_ACCOUNTS),
/* harmony export */   DEFAULT_SEI_ACCOUNTS: () => (/* binding */ DEFAULT_SEI_ACCOUNTS),
/* harmony export */   DEFAULT_SOLANA_ACCOUNTS: () => (/* binding */ DEFAULT_SOLANA_ACCOUNTS),
/* harmony export */   DEFAULT_SUI_ACCOUNTS: () => (/* binding */ DEFAULT_SUI_ACCOUNTS),
/* harmony export */   DEFAULT_TON_V3R2_ACCOUNTS: () => (/* binding */ DEFAULT_TON_V3R2_ACCOUNTS),
/* harmony export */   DEFAULT_TON_V4R2_ACCOUNTS: () => (/* binding */ DEFAULT_TON_V4R2_ACCOUNTS),
/* harmony export */   DEFAULT_TRON_ACCOUNTS: () => (/* binding */ DEFAULT_TRON_ACCOUNTS),
/* harmony export */   DEFAULT_XLM_ACCOUNTS: () => (/* binding */ DEFAULT_XLM_ACCOUNTS),
/* harmony export */   defaultAptosAccountAtIndex: () => (/* binding */ defaultAptosAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2PKHAccountAtIndex: () => (/* binding */ defaultBitcoinMainnetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2SHAccountAtIndex: () => (/* binding */ defaultBitcoinMainnetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2TRAccountAtIndex: () => (/* binding */ defaultBitcoinMainnetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2WPKHAccountAtIndex: () => (/* binding */ defaultBitcoinMainnetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinMainnetP2WSHAccountAtIndex: () => (/* binding */ defaultBitcoinMainnetP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2PKHAccountAtIndex: () => (/* binding */ defaultBitcoinRegtestP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2SHAccountAtIndex: () => (/* binding */ defaultBitcoinRegtestP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2TRAccountAtIndex: () => (/* binding */ defaultBitcoinRegtestP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2WPKHAccountAtIndex: () => (/* binding */ defaultBitcoinRegtestP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinRegtestP2WSHAccountAtIndex: () => (/* binding */ defaultBitcoinRegtestP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2PKHAccountAtIndex: () => (/* binding */ defaultBitcoinSignetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2SHAccountAtIndex: () => (/* binding */ defaultBitcoinSignetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2TRAccountAtIndex: () => (/* binding */ defaultBitcoinSignetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2WPKHAccountAtIndex: () => (/* binding */ defaultBitcoinSignetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinSignetP2WSHAccountAtIndex: () => (/* binding */ defaultBitcoinSignetP2WSHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2PKHAccountAtIndex: () => (/* binding */ defaultBitcoinTestnetP2PKHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2SHAccountAtIndex: () => (/* binding */ defaultBitcoinTestnetP2SHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2TRAccountAtIndex: () => (/* binding */ defaultBitcoinTestnetP2TRAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2WPKHAccountAtIndex: () => (/* binding */ defaultBitcoinTestnetP2WPKHAccountAtIndex),
/* harmony export */   defaultBitcoinTestnetP2WSHAccountAtIndex: () => (/* binding */ defaultBitcoinTestnetP2WSHAccountAtIndex),
/* harmony export */   defaultCosmosAccountAtIndex: () => (/* binding */ defaultCosmosAccountAtIndex),
/* harmony export */   defaultDogeMainnetAccountAtIndex: () => (/* binding */ defaultDogeMainnetAccountAtIndex),
/* harmony export */   defaultDogeTestnetAccountAtIndex: () => (/* binding */ defaultDogeTestnetAccountAtIndex),
/* harmony export */   defaultEthereumAccountAtIndex: () => (/* binding */ defaultEthereumAccountAtIndex),
/* harmony export */   defaultSeiAccountAtIndex: () => (/* binding */ defaultSeiAccountAtIndex),
/* harmony export */   defaultSolanaAccountAtIndex: () => (/* binding */ defaultSolanaAccountAtIndex),
/* harmony export */   defaultSuiAccountAtIndex: () => (/* binding */ defaultSuiAccountAtIndex),
/* harmony export */   defaultTonV3r2AccountAtIndex: () => (/* binding */ defaultTonV3r2AccountAtIndex),
/* harmony export */   defaultTonV4r2AccountAtIndex: () => (/* binding */ defaultTonV4r2AccountAtIndex),
/* harmony export */   defaultTronAccountAtIndex: () => (/* binding */ defaultTronAccountAtIndex),
/* harmony export */   defaultXlmAccountAtIndex: () => (/* binding */ defaultXlmAccountAtIndex),
/* harmony export */   defaultXrpAccountAtIndex: () => (/* binding */ defaultXrpAccountAtIndex)
/* harmony export */ });
// ----------------------------
// CURVE_SECP256K1 Accounts
// ----------------------------
// Ethereum
const defaultEthereumAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/60'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_ETHEREUM",
    };
};
const DEFAULT_ETHEREUM_ACCOUNTS = [
    defaultEthereumAccountAtIndex(0),
];
// Cosmos
const defaultCosmosAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/118'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_COSMOS",
    };
};
const DEFAULT_COSMOS_ACCOUNTS = [
    defaultCosmosAccountAtIndex(0),
];
// Tron
const defaultTronAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/195'/${pathIndex}'`,
        addressFormat: "ADDRESS_FORMAT_TRON",
    };
};
const DEFAULT_TRON_ACCOUNTS = [
    defaultTronAccountAtIndex(0),
];
// Bitcoin Mainnet P2PKH
const defaultBitcoinMainnetP2PKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/0'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
    };
};
const DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS = [
    defaultBitcoinMainnetP2PKHAccountAtIndex(0),
];
// Bitcoin Mainnet P2WPKH
const defaultBitcoinMainnetP2WPKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/84'/0'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
    };
};
const DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS = [
    defaultBitcoinMainnetP2WPKHAccountAtIndex(0),
];
// Bitcoin Mainnet P2WSH
const defaultBitcoinMainnetP2WSHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/48'/0'/${pathIndex}'/2'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
    };
};
const DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS = [
    defaultBitcoinMainnetP2WSHAccountAtIndex(0),
];
// Bitcoin Mainnet P2TR
const defaultBitcoinMainnetP2TRAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/86'/0'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
    };
};
const DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS = [
    defaultBitcoinMainnetP2TRAccountAtIndex(0),
];
// Bitcoin Mainnet P2SH
const defaultBitcoinMainnetP2SHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/0'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
    };
};
const DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS = [
    defaultBitcoinMainnetP2SHAccountAtIndex(0),
];
// Bitcoin Testnet P2PKH
const defaultBitcoinTestnetP2PKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
    };
};
const DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS = [
    defaultBitcoinTestnetP2PKHAccountAtIndex(0),
];
// Bitcoin Testnet P2WPKH
const defaultBitcoinTestnetP2WPKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/84'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
    };
};
const DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS = [
    defaultBitcoinTestnetP2WPKHAccountAtIndex(0),
];
// Bitcoin Testnet P2WSH
const defaultBitcoinTestnetP2WSHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/48'/1'/${pathIndex}'/2'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
    };
};
const DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS = [
    defaultBitcoinTestnetP2WSHAccountAtIndex(0),
];
// Bitcoin Testnet P2TR
const defaultBitcoinTestnetP2TRAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/86'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
    };
};
const DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS = [
    defaultBitcoinTestnetP2TRAccountAtIndex(0),
];
// Bitcoin Testnet P2SH
const defaultBitcoinTestnetP2SHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
    };
};
const DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS = [
    defaultBitcoinTestnetP2SHAccountAtIndex(0),
];
// Bitcoin Signet P2PKH
const defaultBitcoinSignetP2PKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
    };
};
const DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS = [
    defaultBitcoinSignetP2PKHAccountAtIndex(0),
];
// Bitcoin Signet P2WPKH
const defaultBitcoinSignetP2WPKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/84'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
    };
};
const DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS = [
    defaultBitcoinSignetP2WPKHAccountAtIndex(0),
];
// Bitcoin Signet P2WSH
const defaultBitcoinSignetP2WSHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/48'/1'/${pathIndex}'/2'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
    };
};
const DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS = [
    defaultBitcoinSignetP2WSHAccountAtIndex(0),
];
// Bitcoin Signet P2TR
const defaultBitcoinSignetP2TRAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/86'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
    };
};
const DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS = [
    defaultBitcoinSignetP2TRAccountAtIndex(0),
];
// Bitcoin Signet P2SH
const defaultBitcoinSignetP2SHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
    };
};
const DEFAULT_BITCOIN_SIGNET_P2SH_ACCOUNTS = [
    defaultBitcoinSignetP2SHAccountAtIndex(0),
];
// Bitcoin Regtest P2PKH
const defaultBitcoinRegtestP2PKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
    };
};
const DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS = [
    defaultBitcoinRegtestP2PKHAccountAtIndex(0),
];
// Bitcoin Regtest P2WPKH
const defaultBitcoinRegtestP2WPKHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/84'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
    };
};
const DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS = [
    defaultBitcoinRegtestP2WPKHAccountAtIndex(0),
];
// Bitcoin Regtest P2WSH
const defaultBitcoinRegtestP2WSHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/48'/1'/${pathIndex}'/2'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
    };
};
const DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS = [
    defaultBitcoinRegtestP2WSHAccountAtIndex(0),
];
// Bitcoin Regtest P2TR
const defaultBitcoinRegtestP2TRAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/86'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
    };
};
const DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS = [
    defaultBitcoinRegtestP2TRAccountAtIndex(0),
];
// Bitcoin Regtest P2SH
const defaultBitcoinRegtestP2SHAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/1'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
    };
};
const DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS = [
    defaultBitcoinRegtestP2SHAccountAtIndex(0),
];
// Dogecoin Mainnet
const defaultDogeMainnetAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/3'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_DOGE_MAINNET",
    };
};
const DEFAULT_DOGE_MAINNET_ACCOUNTS = [
    defaultDogeMainnetAccountAtIndex(0),
];
// Dogecoin Testnet
const defaultDogeTestnetAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/3'/${pathIndex}'/0/0`,
        addressFormat: "ADDRESS_FORMAT_DOGE_TESTNET",
    };
};
const DEFAULT_DOGE_TESTNET_ACCOUNTS = [
    defaultDogeTestnetAccountAtIndex(0),
];
// Sei
const defaultSeiAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/118'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_SEI",
    };
};
// Xrp
const defaultXrpAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/144'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_XRP",
    };
};
const DEFAULT_SEI_ACCOUNTS = [
    defaultSeiAccountAtIndex(0),
];
// ----------------------------
// CURVE_ED25519 Accounts
// ----------------------------
// Solana
const defaultSolanaAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/501'/${pathIndex}'/0'`,
        addressFormat: "ADDRESS_FORMAT_SOLANA",
    };
};
const DEFAULT_SOLANA_ACCOUNTS = [
    defaultSolanaAccountAtIndex(0),
];
// SUI
const defaultSuiAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/784'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_SUI",
    };
};
const DEFAULT_SUI_ACCOUNTS = [
    defaultSuiAccountAtIndex(0),
];
// Aptos
const defaultAptosAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/637'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_APTOS",
    };
};
const DEFAULT_APTOS_ACCOUNTS = [
    defaultAptosAccountAtIndex(0),
];
// Stellar (XLM)
const defaultXlmAccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/148'/${pathIndex}'`,
        addressFormat: "ADDRESS_FORMAT_XLM",
    };
};
const DEFAULT_XLM_ACCOUNTS = [
    defaultXlmAccountAtIndex(0),
];
// TON V3R2
const defaultTonV3r2AccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/607'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_TON_V3R2",
    };
};
const DEFAULT_TON_V3R2_ACCOUNTS = [
    defaultTonV3r2AccountAtIndex(0),
];
// TON V4R2
const defaultTonV4r2AccountAtIndex = (pathIndex) => {
    return {
        curve: "CURVE_ED25519",
        pathFormat: "PATH_FORMAT_BIP32",
        path: `m/44'/607'/${pathIndex}'/0'/0'`,
        addressFormat: "ADDRESS_FORMAT_TON_V4R2",
    };
};
const DEFAULT_TON_V4R2_ACCOUNTS = [
    defaultTonV4r2AccountAtIndex(0),
];


//# sourceMappingURL=turnkey-helpers.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-browser/dist/utils.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@turnkey/sdk-browser/dist/utils.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   base64UrlEncode: () => (/* binding */ base64UrlEncode),
/* harmony export */   generateRandomBuffer: () => (/* binding */ generateRandomBuffer),
/* harmony export */   parseSession: () => (/* binding */ parseSession)
/* harmony export */ });
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _turnkey_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/crypto */ "./node_modules/@turnkey/crypto/dist/index.mjs");
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
/* harmony import */ var bs58check__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bs58check */ "./node_modules/bs58check/src/esm/index.js");
/* harmony import */ var hpke_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hpke-js */ "./node_modules/hpke-js/esm/mod.js");
/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @turnkey/api-key-stamper */ "./node_modules/@turnkey/api-key-stamper/dist/index.mjs");







const generateRandomBuffer = () => {
    const arr = new Uint8Array(32);
    crypto.getRandomValues(arr);
    return arr.buffer;
};
const base64UrlEncode = (challenge) => {
    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(challenge)
        .toString("base64")
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=/g, "");
};
Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function parseSession(token) {
    if (typeof token !== "string") {
        return token;
    }
    const [, payload] = token.split(".");
    if (!payload) {
        throw new Error("Invalid JWT: Missing payload");
    }
    const decoded = JSON.parse(atob(payload));
    const { exp, public_key: publicKey, session_type: sessionType, user_id: userId, organization_id: organizationId, } = decoded;
    if (!exp || !publicKey || !sessionType || !userId || !organizationId) {
        throw new Error("JWT payload missing required fields");
    }
    return {
        sessionType,
        userId,
        organizationId,
        expiry: exp,
        token: publicKey,
    };
}


//# sourceMappingURL=utils.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/sdk-types/dist/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@turnkey/sdk-types/dist/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FiatOnRampBlockchainNetwork: () => (/* binding */ FiatOnRampBlockchainNetwork),
/* harmony export */   FiatOnRampCryptoCurrency: () => (/* binding */ FiatOnRampCryptoCurrency),
/* harmony export */   FiatOnRampCurrency: () => (/* binding */ FiatOnRampCurrency),
/* harmony export */   FiatOnRampPaymentMethod: () => (/* binding */ FiatOnRampPaymentMethod),
/* harmony export */   FiatOnRampProvider: () => (/* binding */ FiatOnRampProvider),
/* harmony export */   SessionType: () => (/* binding */ SessionType)
/* harmony export */ });
var SessionType;
(function (SessionType) {
    SessionType["READ_ONLY"] = "SESSION_TYPE_READ_ONLY";
    SessionType["READ_WRITE"] = "SESSION_TYPE_READ_WRITE";
})(SessionType || (SessionType = {}));
var FiatOnRampProvider;
(function (FiatOnRampProvider) {
    FiatOnRampProvider["COINBASE"] = "FIAT_ON_RAMP_PROVIDER_COINBASE";
    FiatOnRampProvider["MOONPAY"] = "FIAT_ON_RAMP_PROVIDER_MOONPAY";
})(FiatOnRampProvider || (FiatOnRampProvider = {}));
var FiatOnRampCryptoCurrency;
(function (FiatOnRampCryptoCurrency) {
    FiatOnRampCryptoCurrency["BITCOIN"] = "FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC";
    FiatOnRampCryptoCurrency["ETHEREUM"] = "FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH";
    FiatOnRampCryptoCurrency["SOLANA"] = "FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL";
    FiatOnRampCryptoCurrency["USDC"] = "FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC";
})(FiatOnRampCryptoCurrency || (FiatOnRampCryptoCurrency = {}));
var FiatOnRampCurrency;
(function (FiatOnRampCurrency) {
    FiatOnRampCurrency["AUD"] = "FIAT_ON_RAMP_CURRENCY_AUD";
    FiatOnRampCurrency["BGN"] = "FIAT_ON_RAMP_CURRENCY_BGN";
    FiatOnRampCurrency["BRL"] = "FIAT_ON_RAMP_CURRENCY_BRL";
    FiatOnRampCurrency["CAD"] = "FIAT_ON_RAMP_CURRENCY_CAD";
    FiatOnRampCurrency["CHF"] = "FIAT_ON_RAMP_CURRENCY_CHF";
    FiatOnRampCurrency["COP"] = "FIAT_ON_RAMP_CURRENCY_COP";
    FiatOnRampCurrency["CZK"] = "FIAT_ON_RAMP_CURRENCY_CZK";
    FiatOnRampCurrency["DKK"] = "FIAT_ON_RAMP_CURRENCY_DKK";
    FiatOnRampCurrency["DOP"] = "FIAT_ON_RAMP_CURRENCY_DOP";
    FiatOnRampCurrency["EGP"] = "FIAT_ON_RAMP_CURRENCY_EGP";
    FiatOnRampCurrency["EUR"] = "FIAT_ON_RAMP_CURRENCY_EUR";
    FiatOnRampCurrency["GBP"] = "FIAT_ON_RAMP_CURRENCY_GBP";
    FiatOnRampCurrency["HKD"] = "FIAT_ON_RAMP_CURRENCY_HKD";
    FiatOnRampCurrency["IDR"] = "FIAT_ON_RAMP_CURRENCY_IDR";
    FiatOnRampCurrency["ILS"] = "FIAT_ON_RAMP_CURRENCY_ILS";
    FiatOnRampCurrency["JOD"] = "FIAT_ON_RAMP_CURRENCY_JOD";
    FiatOnRampCurrency["KES"] = "FIAT_ON_RAMP_CURRENCY_KES";
    FiatOnRampCurrency["KWD"] = "FIAT_ON_RAMP_CURRENCY_KWD";
    FiatOnRampCurrency["LKR"] = "FIAT_ON_RAMP_CURRENCY_LKR";
    FiatOnRampCurrency["MXN"] = "FIAT_ON_RAMP_CURRENCY_MXN";
    FiatOnRampCurrency["NGN"] = "FIAT_ON_RAMP_CURRENCY_NGN";
    FiatOnRampCurrency["NOK"] = "FIAT_ON_RAMP_CURRENCY_NOK";
    FiatOnRampCurrency["NZD"] = "FIAT_ON_RAMP_CURRENCY_NZD";
    FiatOnRampCurrency["OMR"] = "FIAT_ON_RAMP_CURRENCY_OMR";
    FiatOnRampCurrency["PEN"] = "FIAT_ON_RAMP_CURRENCY_PEN";
    FiatOnRampCurrency["PLN"] = "FIAT_ON_RAMP_CURRENCY_PLN";
    FiatOnRampCurrency["RON"] = "FIAT_ON_RAMP_CURRENCY_RON";
    FiatOnRampCurrency["SEK"] = "FIAT_ON_RAMP_CURRENCY_SEK";
    FiatOnRampCurrency["THB"] = "FIAT_ON_RAMP_CURRENCY_THB";
    FiatOnRampCurrency["TRY"] = "FIAT_ON_RAMP_CURRENCY_TRY";
    FiatOnRampCurrency["TWD"] = "FIAT_ON_RAMP_CURRENCY_TWD";
    FiatOnRampCurrency["USD"] = "FIAT_ON_RAMP_CURRENCY_USD";
    FiatOnRampCurrency["VND"] = "FIAT_ON_RAMP_CURRENCY_VND";
    FiatOnRampCurrency["ZAR"] = "FIAT_ON_RAMP_CURRENCY_ZAR";
})(FiatOnRampCurrency || (FiatOnRampCurrency = {}));
var FiatOnRampBlockchainNetwork;
(function (FiatOnRampBlockchainNetwork) {
    FiatOnRampBlockchainNetwork["BITCOIN"] = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN";
    FiatOnRampBlockchainNetwork["ETHEREUM"] = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM";
    FiatOnRampBlockchainNetwork["SOLANA"] = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA";
    FiatOnRampBlockchainNetwork["BASE"] = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE";
})(FiatOnRampBlockchainNetwork || (FiatOnRampBlockchainNetwork = {}));
var FiatOnRampPaymentMethod;
(function (FiatOnRampPaymentMethod) {
    // Shared methods (supported by both MoonPay and Coinbase)
    FiatOnRampPaymentMethod["CREDIT_DEBIT_CARD"] = "FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD";
    FiatOnRampPaymentMethod["APPLE_PAY"] = "FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY";
    // MoonPay-specific methods
    FiatOnRampPaymentMethod["GBP_BANK_TRANSFER"] = "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER";
    FiatOnRampPaymentMethod["GBP_OPEN_BANKING_PAYMENT"] = "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT";
    FiatOnRampPaymentMethod["GOOGLE_PAY"] = "FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY";
    FiatOnRampPaymentMethod["SEPA_BANK_TRANSFER"] = "FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER";
    FiatOnRampPaymentMethod["PIX_INSTANT_PAYMENT"] = "FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT";
    FiatOnRampPaymentMethod["PAYPAL"] = "FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL";
    FiatOnRampPaymentMethod["VENMO"] = "FIAT_ON_RAMP_PAYMENT_METHOD_VENMO";
    FiatOnRampPaymentMethod["MOONPAY_BALANCE"] = "FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE";
    // Coinbase-specific methods
    FiatOnRampPaymentMethod["CRYPTO_ACCOUNT"] = "FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT";
    FiatOnRampPaymentMethod["FIAT_WALLET"] = "FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET";
    FiatOnRampPaymentMethod["ACH_BANK_ACCOUNT"] = "FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT";
})(FiatOnRampPaymentMethod || (FiatOnRampPaymentMethod = {}));


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/constants.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/constants.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SIGNATURE_SCHEME_TK_API_ED25519: () => (/* binding */ SIGNATURE_SCHEME_TK_API_ED25519),
/* harmony export */   SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191: () => (/* binding */ SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191),
/* harmony export */   STAMP_HEADER_NAME: () => (/* binding */ STAMP_HEADER_NAME)
/* harmony export */ });
const SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191 = "SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191";
const SIGNATURE_SCHEME_TK_API_ED25519 = "SIGNATURE_SCHEME_TK_API_ED25519";
const STAMP_HEADER_NAME = "X-Stamp";


//# sourceMappingURL=constants.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/errors.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/errors.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WalletStamperError: () => (/* binding */ WalletStamperError)
/* harmony export */ });
class WalletStamperError extends Error {
    constructor(message, originalError = null) {
        super(`${message}${originalError ? ` - error: ${originalError.message}` : ""}`);
        this.originalError = originalError;
        this.name = "WalletStamperError";
    }
}


//# sourceMappingURL=errors.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/ethereum.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/ethereum.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseEthereumWallet: () => (/* binding */ BaseEthereumWallet),
/* harmony export */   EthereumWallet: () => (/* binding */ EthereumWallet),
/* harmony export */   getCompressedPublicKey: () => (/* binding */ getCompressedPublicKey)
/* harmony export */ });
/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/types.mjs");
/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ "./node_modules/viem/_esm/utils/signature/recoverPublicKey.js");
/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ "./node_modules/viem/_esm/utils/signature/hashMessage.js");
/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/errors.mjs");
/* harmony import */ var _turnkey_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @turnkey/crypto */ "./node_modules/@turnkey/crypto/dist/index.mjs");






/**
 * Abstract class representing a base Ethereum wallet.
 * This class is used for stamping requests with an Ethereum wallet.
 *
 * To use this class, extend it and implement the `signMessage` method
 * to provide a custom signing function. The `signMessage` method should
 * return a promise that resolves to a hexadecimal string representing
 * the signature of the provided message.
 */
class BaseEthereumWallet {
    constructor() {
        this.type = _types_mjs__WEBPACK_IMPORTED_MODULE_0__.WalletType.Ethereum;
    }
    /**
     * Retrieves the public key associated with the wallet.
     *
     * @returns A promise that resolves to a string representing the compressed public key.
     */
    async getPublicKey() {
        const message = "GET_PUBLIC_KEY";
        const signature = await this.signMessage(message);
        return getCompressedPublicKey(signature, message);
    }
}
/**
 * EthereumWallet class extends the BaseEthereumWallet to provide
 * specific implementations for Ethereum-based wallets.
 *
 * This class is responsible for signing messages using the Ethereum
 * provider available in the browser (e.g., MetaMask). It interacts
 * with the Ethereum provider to request account access and sign
 * messages.
 */
class EthereumWallet extends BaseEthereumWallet {
    /**
     * Signs a message using the Ethereum provider.
     *
     * @param message - The message to be signed, either as a string or a Hex.
     * @returns A promise that resolves to a Hex string representing the signature.
     *
     * This method uses the 'personal_sign' method of the Ethereum provider
     * to sign the message with the user's account.
     */
    async signMessage(message) {
        const account = await this.getAccount();
        const signature = await this.getProvider().request({
            method: "personal_sign",
            params: [message, account],
        });
        return signature;
    }
    /**
     * Retrieves the Ethereum provider from the window object.
     *
     * @returns The EIP1193Provider instance.
     *
     * This method checks if the Ethereum provider is available in the
     * window object and throws an error if not found.
     */
    getProvider() {
        if (!window?.ethereum) {
            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.WalletStamperError("No ethereum provider found");
        }
        return window.ethereum;
    }
    /**
     * Requests the user's Ethereum account from the provider.
     *
     * @returns A promise that resolves to the user's Ethereum address.
     *
     * This method uses the 'eth_requestAccounts' method of the Ethereum
     * provider to request access to the user's account. It throws an error
     * if no account is connected.
     */
    async getAccount() {
        const provider = this.getProvider();
        const [connectedAccount] = await provider.request({
            method: "eth_requestAccounts",
        });
        if (!connectedAccount) {
            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.WalletStamperError("No connected account found");
        }
        return connectedAccount;
    }
}
const getCompressedPublicKey = async (signature, message) => {
    const secp256k1PublicKey = await (0,viem__WEBPACK_IMPORTED_MODULE_1__.recoverPublicKey)({
        hash: (0,viem__WEBPACK_IMPORTED_MODULE_2__.hashMessage)(message),
        signature: signature,
    });
    const publicKey = secp256k1PublicKey.replace("0x", "");
    const publicKeyBytes = Uint8Array.from(Buffer.from(publicKey, "hex"));
    return Buffer.from((0,_turnkey_crypto__WEBPACK_IMPORTED_MODULE_4__.compressRawPublicKey)(publicKeyBytes)).toString("hex");
};


//# sourceMappingURL=ethereum.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseEthereumWallet: () => (/* reexport safe */ _ethereum_mjs__WEBPACK_IMPORTED_MODULE_4__.BaseEthereumWallet),
/* harmony export */   EthereumWallet: () => (/* reexport safe */ _ethereum_mjs__WEBPACK_IMPORTED_MODULE_4__.EthereumWallet),
/* harmony export */   SIGNATURE_SCHEME_TK_API_ED25519: () => (/* reexport safe */ _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SIGNATURE_SCHEME_TK_API_ED25519),
/* harmony export */   SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191: () => (/* reexport safe */ _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191),
/* harmony export */   STAMP_HEADER_NAME: () => (/* reexport safe */ _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.STAMP_HEADER_NAME),
/* harmony export */   WalletStamper: () => (/* reexport safe */ _stamper_mjs__WEBPACK_IMPORTED_MODULE_3__.WalletStamper),
/* harmony export */   WalletStamperError: () => (/* reexport safe */ _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.WalletStamperError),
/* harmony export */   WalletType: () => (/* reexport safe */ _types_mjs__WEBPACK_IMPORTED_MODULE_2__.WalletType),
/* harmony export */   getCompressedPublicKey: () => (/* reexport safe */ _ethereum_mjs__WEBPACK_IMPORTED_MODULE_4__.getCompressedPublicKey)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/constants.mjs");
/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/errors.mjs");
/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/types.mjs");
/* harmony import */ var _stamper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stamper.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/stamper.mjs");
/* harmony import */ var _ethereum_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ethereum.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/ethereum.mjs");





//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/stamper.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/stamper.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WalletStamper: () => (/* binding */ WalletStamper)
/* harmony export */ });
/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ "./node_modules/@turnkey/encoding/dist/index.mjs");
/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/errors.mjs");
/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/types.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/@turnkey/wallet-stamper/dist/constants.mjs");





// WalletStamper class implements the TStamper interface to use wallet's signature and public key
// to authenticate requests to Turnkey.
class WalletStamper {
    constructor(wallet) {
        this.wallet = wallet;
    }
    async stamp(payload) {
        let signature;
        try {
            signature = await this.wallet.signMessage(payload);
        }
        catch (error) {
            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.WalletStamperError("Failed to sign the message", error);
        }
        // Determine the signature scheme based on the wallet type.
        const scheme = this.wallet.type === _types_mjs__WEBPACK_IMPORTED_MODULE_2__.WalletType.Solana
            ? _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.SIGNATURE_SCHEME_TK_API_ED25519
            : _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191;
        let publicKey;
        try {
            // For Ethereum, we need to recover the public key from the signature over the payload.
            // This is because recovering the SECP256K1 public key requires a signed message.
            // This avoids an additional call to the wallet to get the public key.
            if (this.wallet.type === _types_mjs__WEBPACK_IMPORTED_MODULE_2__.WalletType.Ethereum) {
                const { recoverPublicKey, hashMessage } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_viem_node_modules_noble_curves_esm_secp256k1_js"), __webpack_require__.e("vendors-node_modules_noble_curves_esm_utils_js"), __webpack_require__.e("vendors-node_modules_viem__esm_index_js")]).then(__webpack_require__.bind(__webpack_require__, /*! viem */ "./node_modules/viem/_esm/index.js"));
                const { compressRawPublicKey, toDerSignature } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @turnkey/crypto */ "./node_modules/@turnkey/crypto/dist/index.mjs"));
                const secp256k1PublicKey = await recoverPublicKey({
                    hash: hashMessage(payload),
                    signature: signature,
                });
                publicKey = secp256k1PublicKey.replace("0x", "");
                const publicKeyBytes = Uint8Array.from(Buffer.from(publicKey, "hex"));
                publicKey = Buffer.from(compressRawPublicKey(publicKeyBytes)).toString("hex");
                // Convert the signature to DER format which is required by the Turnkey API.
                signature = toDerSignature(signature.replace("0x", ""));
            }
            else {
                // For Solana, we can directly use the public key.
                publicKey = await this.wallet.getPublicKey();
            }
        }
        catch (error) {
            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.WalletStamperError("Failed to recover public key", error);
        }
        const stamp = {
            publicKey,
            scheme,
            signature,
        };
        // Return the stamp as a base64url encoded JSON string in the header format.
        return {
            stampHeaderName: _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.STAMP_HEADER_NAME,
            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),
        };
    }
}


//# sourceMappingURL=stamper.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/wallet-stamper/dist/types.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/wallet-stamper/dist/types.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WalletType: () => (/* binding */ WalletType)
/* harmony export */ });
/**
 * Enum representing the type of wallet the user is stamping with.
 */
var WalletType;
(function (WalletType) {
    WalletType["Ethereum"] = "ethereum";
    WalletType["Solana"] = "solana";
})(WalletType || (WalletType = {}));


//# sourceMappingURL=types.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)
/* harmony export */ });
/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs");
/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha256-uint8array */ "./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs");



/// <reference lib="dom" />
// Header name for a webauthn stamp
const stampHeaderName = "X-Stamp-Webauthn";
const defaultTimeout = 5 * 60 * 1000; // five minutes
const defaultUserVerification = "preferred";
/**
 * Stamper to use with `@turnkey/http`'s `TurnkeyClient`
 */
class WebauthnStamper {
    constructor(config) {
        this.rpId = config.rpId;
        this.timeout = config.timeout || defaultTimeout;
        this.userVerification = config.userVerification || defaultUserVerification;
        this.allowCredentials = config.allowCredentials || [];
    }
    async stamp(payload) {
        const challenge = getChallengeFromPayload(payload);
        const signingOptions = {
            publicKey: {
                rpId: this.rpId,
                challenge: challenge,
                allowCredentials: this.allowCredentials,
                timeout: this.timeout,
                userVerification: this.userVerification,
            },
        };
        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);
        const assertion = clientGetResult.toJSON();
        const stamp = {
            authenticatorData: assertion.response.authenticatorData,
            clientDataJson: assertion.response.clientDataJSON,
            credentialId: assertion.id,
            signature: assertion.response.signature,
        };
        return {
            stampHeaderName: stampHeaderName,
            stampHeaderValue: JSON.stringify(stamp),
        };
    }
}
function getChallengeFromPayload(payload) {
    const hexString = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__.createHash)().update(payload).digest("hex");
    return new TextEncoder().encode(hexString);
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)
/* harmony export */ });
/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs");
/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs");
/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs");




function getResponseToJSON(credential) {
    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);
}


//# sourceMappingURL=api.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)
/* harmony export */ });
function bufferToBase64url(buffer) {
    // Buffer to binary string
    const byteView = new Uint8Array(buffer);
    let str = "";
    for (const charCode of byteView) {
        str += String.fromCharCode(charCode);
    }
    // Binary string to base64
    const base64String = btoa(str);
    // Base64 to base64url
    // We assume that the base64url string is well-formed.
    const base64urlString = base64String
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=/g, "");
    return base64urlString;
}


//# sourceMappingURL=base64url.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convert: () => (/* binding */ convert),
/* harmony export */   convertValue: () => (/* binding */ convertValue),
/* harmony export */   copyValue: () => (/* binding */ copyValue),
/* harmony export */   derived: () => (/* binding */ derived),
/* harmony export */   optional: () => (/* binding */ optional),
/* harmony export */   required: () => (/* binding */ required)
/* harmony export */ });
// We export these values in order so that they can be used to deduplicate
// schema definitions in minified JS code.
// TODO: Parcel isn't deduplicating these values.
const copyValue = "copy";
const convertValue = "convert";
function convert(conversionFn, schema, input) {
    if (schema === copyValue) {
        return input;
    }
    if (schema === convertValue) {
        return conversionFn(input);
    }
    if (schema instanceof Array) {
        return input.map((v) => convert(conversionFn, schema[0], v));
    }
    if (schema instanceof Object) {
        const output = {};
        for (const [key, schemaField] of Object.entries(schema)) {
            if (schemaField.derive) {
                const v = schemaField.derive(input);
                if (v !== undefined) {
                    input[key] = v;
                }
            }
            if (!(key in input)) {
                if (schemaField.required) {
                    throw new Error(`Missing key: ${key}`);
                }
                continue;
            }
            // Fields can be null (rather than missing or `undefined`), e.g. the
            // `userHandle` field of the `AuthenticatorAssertionResponse`:
            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse
            if (input[key] == null) {
                output[key] = null;
                continue;
            }
            output[key] = convert(conversionFn, schemaField.schema, input[key]);
        }
        return output;
    }
}
function derived(schema, derive) {
    return {
        required: true,
        schema,
        derive,
    };
}
function required(schema) {
    return {
        required: true,
        schema,
    };
}
function optional(schema) {
    return {
        required: false,
        schema,
    };
}


//# sourceMappingURL=convert.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   get: () => (/* binding */ get)
/* harmony export */ });
/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs");


async function get(options) {
    const response = (await navigator.credentials.get(options));
    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);
    return response;
}


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)
/* harmony export */ });
/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ "./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs");


const simplifiedClientExtensionResultsSchema = {
    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
};
// `navigator.get()` response
const publicKeyCredentialWithAssertion = {
    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),
    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({
        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),
    }),
    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),
};


//# sourceMappingURL=schema.mjs.map


/***/ }),

/***/ "./node_modules/base-x/src/esm/index.js":
/*!**********************************************!*\
  !*** ./node_modules/base-x/src/esm/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
function base (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  const BASE_MAP = new Uint8Array(256)
  for (let j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255
  }
  for (let i = 0; i < ALPHABET.length; i++) {
    const x = ALPHABET.charAt(i)
    const xc = x.charCodeAt(0)
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i
  }
  const BASE = ALPHABET.length
  const LEADER = ALPHABET.charAt(0)
  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
  function encode (source) {
    // eslint-disable-next-line no-empty
    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source)
    }
    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
    if (source.length === 0) { return '' }
    // Skip & count leading zeroes.
    let zeroes = 0
    let length = 0
    let pbegin = 0
    const pend = source.length
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++
      zeroes++
    }
    // Allocate enough space in big-endian base58 representation.
    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0
    const b58 = new Uint8Array(size)
    // Process the bytes.
    while (pbegin !== pend) {
      let carry = source[pbegin]
      // Apply "b58 = b58 * 256 + ch".
      let i = 0
      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0
        b58[it1] = (carry % BASE) >>> 0
        carry = (carry / BASE) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      pbegin++
    }
    // Skip leading zeroes in base58 result.
    let it2 = size - length
    while (it2 !== size && b58[it2] === 0) {
      it2++
    }
    // Translate the result into a string.
    let str = LEADER.repeat(zeroes)
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return new Uint8Array() }
    let psz = 0
    // Skip and count leading '1's.
    let zeroes = 0
    let length = 0
    while (source[psz] === LEADER) {
      zeroes++
      psz++
    }
    // Allocate enough space in big-endian base256 representation.
    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
    const b256 = new Uint8Array(size)
    // Process the characters.
    while (psz < source.length) {
      // Find code of next character
      const charCode = source.charCodeAt(psz)
      // Base map can not be indexed using char code
      if (charCode > 255) { return }
      // Decode character
      let carry = BASE_MAP[charCode]
      // Invalid character
      if (carry === 255) { return }
      let i = 0
      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0
        b256[it3] = (carry % 256) >>> 0
        carry = (carry / 256) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      psz++
    }
    // Skip leading zeroes in b256.
    let it4 = size - length
    while (it4 !== size && b256[it4] === 0) {
      it4++
    }
    const vch = new Uint8Array(zeroes + (size - it4))
    let j = zeroes
    while (it4 !== size) {
      vch[j++] = b256[it4++]
    }
    return vch
  }
  function decode (string) {
    const buffer = decodeUnsafe(string)
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode,
    decodeUnsafe,
    decode
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (base);


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/bs58/src/esm/index.js":
/*!********************************************!*\
  !*** ./node_modules/bs58/src/esm/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var base_x__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base-x */ "./node_modules/base-x/src/esm/index.js");

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,base_x__WEBPACK_IMPORTED_MODULE_0__["default"])(ALPHABET));


/***/ }),

/***/ "./node_modules/bs58check/src/esm/base.js":
/*!************************************************!*\
  !*** ./node_modules/bs58check/src/esm/base.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs58 */ "./node_modules/bs58/src/esm/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(checksumFn) {
    // Encode a buffer as a base58-check encoded string
    function encode(payload) {
        var payloadU8 = Uint8Array.from(payload);
        var checksum = checksumFn(payloadU8);
        var length = payloadU8.length + 4;
        var both = new Uint8Array(length);
        both.set(payloadU8, 0);
        both.set(checksum.subarray(0, 4), payloadU8.length);
        return bs58__WEBPACK_IMPORTED_MODULE_0__["default"].encode(both);
    }
    function decodeRaw(buffer) {
        var payload = buffer.slice(0, -4);
        var checksum = buffer.slice(-4);
        var newChecksum = checksumFn(payload);
        // eslint-disable-next-line
        if (checksum[0] ^ newChecksum[0] |
            checksum[1] ^ newChecksum[1] |
            checksum[2] ^ newChecksum[2] |
            checksum[3] ^ newChecksum[3])
            return;
        return payload;
    }
    // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
    function decodeUnsafe(str) {
        var buffer = bs58__WEBPACK_IMPORTED_MODULE_0__["default"].decodeUnsafe(str);
        if (buffer == null)
            return;
        return decodeRaw(buffer);
    }
    function decode(str) {
        var buffer = bs58__WEBPACK_IMPORTED_MODULE_0__["default"].decode(str);
        var payload = decodeRaw(buffer);
        if (payload == null)
            throw new Error('Invalid checksum');
        return payload;
    }
    return {
        encode: encode,
        decode: decode,
        decodeUnsafe: decodeUnsafe
    };
}


/***/ }),

/***/ "./node_modules/bs58check/src/esm/index.js":
/*!*************************************************!*\
  !*** ./node_modules/bs58check/src/esm/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha256 */ "./node_modules/@noble/hashes/esm/sha256.js");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/bs58check/src/esm/base.js");



// SHA256(SHA256(buffer))
function sha256x2(buffer) {
    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)(buffer));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_base_js__WEBPACK_IMPORTED_MODULE_1__["default"])(sha256x2));


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

// Save global object in a variable
var __global__ =
(typeof globalThis !== 'undefined' && globalThis) ||
(typeof self !== 'undefined' && self) ||
(typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g);
// Create an object that extends from __global__ without the fetch function
var __globalThis__ = (function () {
function F() {
this.fetch = false;
this.DOMException = __global__.DOMException
}
F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
return new F();
})();
// Wraps whatwg-fetch with a function scope to hijack the global object
// "globalThis" that's going to be patched
(function(globalThis) {

var irrelevant = (function (exports) {

  /* eslint-disable no-prototype-builtins */
  var g =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    // eslint-disable-next-line no-undef
    (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g) ||
    {};

  var support = {
    searchParams: 'URLSearchParams' in g,
    iterable: 'Symbol' in g && 'iterator' in Symbol,
    blob:
      'FileReader' in g &&
      'Blob' in g &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in g,
    arrayBuffer: 'ArrayBuffer' in g
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        if (header.length != 2) {
          throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
        }
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body._noBody) return
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
    var encoding = match ? match[1] : 'utf-8';
    reader.readAsText(blob, encoding);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      // eslint-disable-next-line no-self-assign
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._noBody = true;
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed
        } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else if (support.blob) {
        return this.blob().then(readBlobAsArrayBuffer)
      } else {
        throw new Error('could not read as ArrayBuffer')
      }
    };

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal || (function () {
      if ('AbortController' in g) {
        var ctrl = new AbortController();
        return ctrl.signal;
      }
    }());
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    if (this.status < 200 || this.status > 599) {
      throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
    }
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 200, statusText: ''});
    response.ok = false;
    response.status = 0;
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = g.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        // This check if specifically for when a user fetches a file locally from the file system
        // Only if the status is out of a normal range
        if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
          options.status = 200;
        } else {
          options.status = xhr.status;
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request timed out'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && g.location.href ? g.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
        var names = [];
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          names.push(normalizeName(name));
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
        request.headers.forEach(function(value, name) {
          if (names.indexOf(name) === -1) {
            xhr.setRequestHeader(name, value);
          }
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!g.fetch) {
    g.fetch = fetch;
    g.Headers = Headers;
    g.Request = Request;
    g.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
})(__globalThis__);
// This is a ponyfill, so...
__globalThis__.fetch.ponyfill = true;
delete __globalThis__.fetch.polyfill;
// Choose between native implementation (__global__) or custom implementation (__globalThis__)
var ctx = __global__.fetch ? __global__ : __globalThis__;
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports["default"] = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports


/***/ }),

/***/ "./node_modules/hpke-js/esm/mod.js":
/*!*****************************************!*\
  !*** ./node_modules/hpke-js/esm/mod.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aead: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_1__.Aead),
/* harmony export */   AeadId: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.AeadId),
/* harmony export */   CipherSuite: () => (/* reexport safe */ _src_cipherSuite_js__WEBPACK_IMPORTED_MODULE_2__.CipherSuite),
/* harmony export */   DecapError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.DecapError),
/* harmony export */   DeriveKeyPairError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.DeriveKeyPairError),
/* harmony export */   DeserializeError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.DeserializeError),
/* harmony export */   EncapError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.EncapError),
/* harmony export */   ExportError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.ExportError),
/* harmony export */   HpkeError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.HpkeError),
/* harmony export */   InvalidParamError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError),
/* harmony export */   Kdf: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_1__.Kdf),
/* harmony export */   KdfId: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KdfId),
/* harmony export */   Kem: () => (/* reexport safe */ _src_identifiers_js__WEBPACK_IMPORTED_MODULE_1__.Kem),
/* harmony export */   KemId: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId),
/* harmony export */   MessageLimitReachedError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.MessageLimitReachedError),
/* harmony export */   NotSupportedError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.NotSupportedError),
/* harmony export */   OpenError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.OpenError),
/* harmony export */   SealError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.SealError),
/* harmony export */   SerializeError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.SerializeError),
/* harmony export */   ValidationError: () => (/* reexport safe */ _hpke_core__WEBPACK_IMPORTED_MODULE_0__.ValidationError)
/* harmony export */ });
/* harmony import */ var _hpke_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/core */ "./node_modules/@hpke/core/esm/mod.js");
/* harmony import */ var _src_identifiers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/identifiers.js */ "./node_modules/hpke-js/esm/src/identifiers.js");
/* harmony import */ var _src_cipherSuite_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/cipherSuite.js */ "./node_modules/hpke-js/esm/src/cipherSuite.js");





/***/ }),

/***/ "./node_modules/hpke-js/esm/src/cipherSuite.js":
/*!*****************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/cipherSuite.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CipherSuite: () => (/* binding */ CipherSuite)
/* harmony export */ });
/* harmony import */ var _hpke_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/core */ "./node_modules/@hpke/core/esm/mod.js");
/* harmony import */ var _hpke_chacha20poly1305__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hpke/chacha20poly1305 */ "./node_modules/@hpke/chacha20poly1305/esm/mod.js");
/* harmony import */ var _hpke_dhkem_x25519__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hpke/dhkem-x25519 */ "./node_modules/@hpke/dhkem-x25519/esm/mod.js");
/* harmony import */ var _hpke_dhkem_x448__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @hpke/dhkem-x448 */ "./node_modules/@hpke/dhkem-x448/esm/mod.js");
/* harmony import */ var _kdfs_hkdfSha384_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kdfs/hkdfSha384.js */ "./node_modules/hpke-js/esm/src/kdfs/hkdfSha384.js");
/* harmony import */ var _kems_dhkemP256_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kems/dhkemP256.js */ "./node_modules/hpke-js/esm/src/kems/dhkemP256.js");
/* harmony import */ var _kems_dhkemP384_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kems/dhkemP384.js */ "./node_modules/hpke-js/esm/src/kems/dhkemP384.js");
/* harmony import */ var _kems_dhkemP521_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kems/dhkemP521.js */ "./node_modules/hpke-js/esm/src/kems/dhkemP521.js");








/**
 * The Hybrid Public Key Encryption (HPKE) ciphersuite,
 * which supports all of the ciphersuites defined in
 * {@link https://datatracker.ietf.org/doc/html/rfc9180 | RFC9180}.
 *
 * The class consists of the {@link https://jsr.io/@hpke/core/doc | @hpke/core},
 * {@link https://jsr.io/@hpke/chacha20Poly1305/doc | @hpke/chcha20poly1305},
 * {@link https://jsr.io/@hpke/dhkem-x25519/doc | @hpke/dhkem-x25519} and
 * {@link https://jsr.io/@hpke/dhkem-x448/doc | @hpke/dhkem-x448} internally.
 *
 * This class provides following functions:
 *
 * - [DEPRECATED] Generates a key pair for the cipher suite.
 * - [DEPRECATED] Derives a key pair for the cipher suite.
 * - [DEPRECATED] Imports and converts a key to a CryptoKey.
 * - Creates encryption contexts both for senders and recipients.
 *     - {@link createSenderContext}
 *     - {@link createRecipientContext}
 * - Provides single-shot encryption API.
 *     - {@link seal}
 *     - {@link open}
 *
 * The calling of the constructor of this class is the starting
 * point for HPKE operations for both senders and recipients.
 *
 * @example Use only ciphersuites supported internally.
 *
 * ```ts
 * import { AeadId, CipherSuite, KdfId, KemId } from "@hpke/hpke-js";
 *
 * const suite = new CipherSuite({
 *   kem: KemId.DhkemP256HkdfSha256,
 *   kdf: KdfId.HkdfSha256,
 *   aead: AeadId.Aes128Gcm,
 * });
 * ```
 *
 * @example Use a ciphersuite consisting of an external module.
 *
 * ```ts
 * import { AeadId, CipherSuite, KdfId } from "@hpke/hpke-js";
 * // Use an extension module.
 * import {
 *   XWing,
 * } from "@hpke/hybridkem-x-wing";
 *
 * const suite = new CipherSuite({
 *   kem: new XWing(),
 *   kdf: KdfId.HkdfSha256,
 *   aead: AeadId.Aes128Gcm,
 * });
 * ```
 */
class CipherSuite extends _hpke_core__WEBPACK_IMPORTED_MODULE_0__.CipherSuite {
    /**
     * @param params A set of parameters for building a cipher suite.
     * @throws {@link InvalidParamError}
     */
    constructor(params) {
        // KEM
        if (typeof params.kem === "number") {
            switch (params.kem) {
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256:
                    params.kem = new _kems_dhkemP256_js__WEBPACK_IMPORTED_MODULE_5__.DhkemP256HkdfSha256();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384:
                    params.kem = new _kems_dhkemP384_js__WEBPACK_IMPORTED_MODULE_6__.DhkemP384HkdfSha384();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512:
                    params.kem = new _kems_dhkemP521_js__WEBPACK_IMPORTED_MODULE_7__.DhkemP521HkdfSha512();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX25519HkdfSha256:
                    params.kem = new _hpke_dhkem_x25519__WEBPACK_IMPORTED_MODULE_2__.DhkemX25519HkdfSha256();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemX448HkdfSha512:
                    params.kem = new _hpke_dhkem_x448__WEBPACK_IMPORTED_MODULE_3__.DhkemX448HkdfSha512();
                    break;
                default:
                    throw new _hpke_core__WEBPACK_IMPORTED_MODULE_0__.InvalidParamError(`The KEM (${params.kem}) cannot be specified by KemId. Use submodule for the KEM`);
            }
        }
        // KDF
        if (typeof params.kdf === "number") {
            switch (params.kdf) {
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KdfId.HkdfSha256:
                    params.kdf = new _hpke_dhkem_x25519__WEBPACK_IMPORTED_MODULE_2__.HkdfSha256();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.KdfId.HkdfSha384:
                    params.kdf = new _kdfs_hkdfSha384_js__WEBPACK_IMPORTED_MODULE_4__.HkdfSha384();
                    break;
                default:
                    // case KdfId.HkdfSha512:
                    params.kdf = new _hpke_dhkem_x448__WEBPACK_IMPORTED_MODULE_3__.HkdfSha512();
                    break;
            }
        }
        // AEAD
        if (typeof params.aead === "number") {
            switch (params.aead) {
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.AeadId.Aes128Gcm:
                    params.aead = new _hpke_core__WEBPACK_IMPORTED_MODULE_0__.Aes128Gcm();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.AeadId.Aes256Gcm:
                    params.aead = new _hpke_core__WEBPACK_IMPORTED_MODULE_0__.Aes256Gcm();
                    break;
                case _hpke_core__WEBPACK_IMPORTED_MODULE_0__.AeadId.Chacha20Poly1305:
                    params.aead = new _hpke_chacha20poly1305__WEBPACK_IMPORTED_MODULE_1__.Chacha20Poly1305();
                    break;
                default:
                    // case AeadId.ExportOnly:
                    params.aead = new _hpke_core__WEBPACK_IMPORTED_MODULE_0__.ExportOnly();
                    break;
            }
        }
        super(params);
    }
    /**
     * Generates a key pair for the cipher suite.
     *
     * If the error occurred, throws {@link NotSupportedError}.
     *
     * @deprecated Use {@link KemInterface.generateKeyPair} instead.
     *
     * @returns A key pair generated.
     * @throws {@link NotSupportedError}
     */
    async generateKeyPair() {
        await this._setup();
        return await this._kem.generateKeyPair();
    }
    /**
     * Derives a key pair for the cipher suite in the manner
     * defined in [RFC9180 Section 7.1.3](https://www.rfc-editor.org/rfc/rfc9180.html#section-7.1.3).
     *
     * If the error occurred, throws {@link DeriveKeyPairError}.
     *
     * @deprecated Use {@link KemInterface.deriveKeyPair} instead.
     *
     * @param ikm A byte string of input keying material. The maximum length is 128 bytes.
     * @returns A key pair derived.
     * @throws {@link DeriveKeyPairError}
     */
    async deriveKeyPair(ikm) {
        await this._setup();
        return await this._kem.deriveKeyPair(ikm);
    }
    /**
     * Imports a public or private key and converts to a {@link CryptoKey}.
     *
     * Since key parameters for {@link createSenderContext} or {@link createRecipientContext}
     * are {@link CryptoKey} format, you have to use this function to convert provided keys
     * to {@link CryptoKey}.
     *
     * Basically, this is a thin wrapper function of
     * [SubtleCrypto.importKey](https://www.w3.org/TR/WebCryptoAPI/#dfn-SubtleCrypto-method-importKey).
     *
     * If the error occurred, throws {@link DeserializeError}.
     *
     * @deprecated Use {@link KemInterface.generateKeyPair} instead.
     *
     * @param format For now, `'raw'` and `'jwk'` are supported.
     * @param key A byte string of a raw key or A {@link JsonWebKey} object.
     * @param isPublic The indicator whether the provided key is a public key or not, which is used only for `'raw'` format.
     * @returns A public or private CryptoKey.
     * @throws {@link DeserializeError}
     */
    async importKey(format, key, isPublic = true) {
        await this._setup();
        return await this._kem.importKey(format, key, isPublic);
    }
}


/***/ }),

/***/ "./node_modules/hpke-js/esm/src/identifiers.js":
/*!*****************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/identifiers.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aead: () => (/* binding */ Aead),
/* harmony export */   Kdf: () => (/* binding */ Kdf),
/* harmony export */   Kem: () => (/* binding */ Kem)
/* harmony export */ });
/**
 * The supported Key Encapsulation Mechanism (KEM) identifiers.
 *
 * @deprecated Use {@link KdfId} instead.
 */
const Kem = {
    NotAssigned: 0x0000,
    DhkemP256HkdfSha256: 0x0010,
    DhkemP384HkdfSha384: 0x0011,
    DhkemP521HkdfSha512: 0x0012,
    DhkemSecp256k1HkdfSha256: 0x0013,
    DhkemX25519HkdfSha256: 0x0020,
    DhkemX448HkdfSha512: 0x0021,
    HybridkemX25519Kyber768: 0x0030,
};
/**
 * The supported Key Derivation Function (KDF) identifiers.
 *
 * @deprecated Use {@link KdfId} instead.
 */
const Kdf = {
    HkdfSha256: 0x0001,
    HkdfSha384: 0x0002,
    HkdfSha512: 0x0003,
};
/**
 * The supported Authenticated Encryption with Associated Data (AEAD) identifiers.
 *
 * @deprecated Use {@link AeadId} instead.
 */
const Aead = {
    Aes128Gcm: 0x0001,
    Aes256Gcm: 0x0002,
    Chacha20Poly1305: 0x0003,
    ExportOnly: 0xFFFF,
};


/***/ }),

/***/ "./node_modules/hpke-js/esm/src/kdfs/hkdfSha384.js":
/*!*********************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/kdfs/hkdfSha384.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HkdfSha384: () => (/* binding */ HkdfSha384)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");

class HkdfSha384 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.HkdfSha384Native {
    async extract(salt, ikm) {
        await this._setup();
        if (salt.byteLength === 0) {
            salt = new ArrayBuffer(this.hashSize);
        }
        if (salt.byteLength !== this.hashSize) {
            return (0,_hpke_common__WEBPACK_IMPORTED_MODULE_0__.hmac)(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.sha384, new Uint8Array(salt), new Uint8Array(ikm))
                .buffer;
        }
        const key = await this._api.importKey("raw", salt, this.algHash, false, [
            "sign",
        ]);
        return await this._api.sign("HMAC", key, ikm);
    }
}


/***/ }),

/***/ "./node_modules/hpke-js/esm/src/kems/dhkemP256.js":
/*!********************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/kems/dhkemP256.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemP256HkdfSha256: () => (/* binding */ DhkemP256HkdfSha256)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _hpke_dhkem_x25519__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hpke/dhkem-x25519 */ "./node_modules/@hpke/dhkem-x25519/esm/mod.js");


class DhkemP256HkdfSha256 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_dhkem_x25519__WEBPACK_IMPORTED_MODULE_1__.HkdfSha256();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP256HkdfSha256
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 65
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 65
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 32
        });
    }
}


/***/ }),

/***/ "./node_modules/hpke-js/esm/src/kems/dhkemP384.js":
/*!********************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/kems/dhkemP384.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemP384HkdfSha384: () => (/* binding */ DhkemP384HkdfSha384)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _kdfs_hkdfSha384_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kdfs/hkdfSha384.js */ "./node_modules/hpke-js/esm/src/kdfs/hkdfSha384.js");


class DhkemP384HkdfSha384 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _kdfs_hkdfSha384_js__WEBPACK_IMPORTED_MODULE_1__.HkdfSha384();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP384HkdfSha384
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 48
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 97
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 97
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 48
        });
    }
}


/***/ }),

/***/ "./node_modules/hpke-js/esm/src/kems/dhkemP521.js":
/*!********************************************************!*\
  !*** ./node_modules/hpke-js/esm/src/kems/dhkemP521.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DhkemP521HkdfSha512: () => (/* binding */ DhkemP521HkdfSha512)
/* harmony export */ });
/* harmony import */ var _hpke_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hpke/common */ "./node_modules/@hpke/common/esm/mod.js");
/* harmony import */ var _hpke_dhkem_x448__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hpke/dhkem-x448 */ "./node_modules/@hpke/dhkem-x448/esm/mod.js");


class DhkemP521HkdfSha512 extends _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Dhkem {
    constructor() {
        const kdf = new _hpke_dhkem_x448__WEBPACK_IMPORTED_MODULE_1__.HkdfSha512();
        const prim = new _hpke_common__WEBPACK_IMPORTED_MODULE_0__.Ec(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512, kdf);
        super(_hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512, prim, kdf);
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _hpke_common__WEBPACK_IMPORTED_MODULE_0__.KemId.DhkemP521HkdfSha512
        });
        Object.defineProperty(this, "secretSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
        Object.defineProperty(this, "encSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 133
        });
        Object.defineProperty(this, "publicKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 133
        });
        Object.defineProperty(this, "privateKeySize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 64
        });
    }
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash),
/* harmony export */   createHash: () => (/* binding */ createHash)
/* harmony export */ });
/**
 * sha256-uint8array.ts
 */
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311
const K = [
    0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0,
    0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0,
    0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0,
    0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0,
    0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0,
    0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0,
    0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0,
    0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0,
    0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0,
    0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0,
    0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0,
    0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0,
    0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0,
    0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0,
    0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0,
    0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0,
];
const algorithms = {
    sha256: 1,
};
function createHash(algorithm) {
    if (algorithm && !algorithms[algorithm] && !algorithms[algorithm.toLowerCase()]) {
        throw new Error("Digest method not supported");
    }
    return new Hash();
}
class Hash {
    constructor() {
        // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
        this.A = 0x6a09e667 | 0;
        this.B = 0xbb67ae85 | 0;
        this.C = 0x3c6ef372 | 0;
        this.D = 0xa54ff53a | 0;
        this.E = 0x510e527f | 0;
        this.F = 0x9b05688c | 0;
        this.G = 0x1f83d9ab | 0;
        this.H = 0x5be0cd19 | 0;
        this._size = 0;
        this._sp = 0; // surrogate pair
        if (!sharedBuffer || sharedOffset >= 8000 /* N.allocTotal */) {
            sharedBuffer = new ArrayBuffer(8000 /* N.allocTotal */);
            sharedOffset = 0;
        }
        this._byte = new Uint8Array(sharedBuffer, sharedOffset, 80 /* N.allocBytes */);
        this._word = new Int32Array(sharedBuffer, sharedOffset, 20 /* N.allocWords */);
        sharedOffset += 80 /* N.allocBytes */;
    }
    update(data) {
        // data: string
        if ("string" === typeof data) {
            return this._utf8(data);
        }
        // data: undefined
        if (data == null) {
            throw new TypeError("Invalid type: " + typeof data);
        }
        const byteOffset = data.byteOffset;
        const length = data.byteLength;
        let blocks = (length / 64 /* N.inputBytes */) | 0;
        let offset = 0;
        // longer than 1 block
        if (blocks && !(byteOffset & 3) && !(this._size % 64 /* N.inputBytes */)) {
            const block = new Int32Array(data.buffer, byteOffset, blocks * 16 /* N.inputWords */);
            while (blocks--) {
                this._int32(block, offset >> 2);
                offset += 64 /* N.inputBytes */;
            }
            this._size += offset;
        }
        // data: TypedArray | DataView
        const BYTES_PER_ELEMENT = data.BYTES_PER_ELEMENT;
        if (BYTES_PER_ELEMENT !== 1 && data.buffer) {
            const rest = new Uint8Array(data.buffer, byteOffset + offset, length - offset);
            return this._uint8(rest);
        }
        // no more bytes
        if (offset === length)
            return this;
        // data: Uint8Array | Int8Array
        return this._uint8(data, offset);
    }
    _uint8(data, offset) {
        const { _byte, _word } = this;
        const length = data.length;
        offset = offset | 0;
        while (offset < length) {
            const start = this._size % 64 /* N.inputBytes */;
            let index = start;
            while (offset < length && index < 64 /* N.inputBytes */) {
                _byte[index++] = data[offset++];
            }
            if (index >= 64 /* N.inputBytes */) {
                this._int32(_word);
            }
            this._size += index - start;
        }
        return this;
    }
    _utf8(text) {
        const { _byte, _word } = this;
        const length = text.length;
        let surrogate = this._sp;
        for (let offset = 0; offset < length;) {
            const start = this._size % 64 /* N.inputBytes */;
            let index = start;
            while (offset < length && index < 64 /* N.inputBytes */) {
                let code = text.charCodeAt(offset++) | 0;
                if (code < 0x80) {
                    // ASCII characters
                    _byte[index++] = code;
                }
                else if (code < 0x800) {
                    // 2 bytes
                    _byte[index++] = 0xC0 | (code >>> 6);
                    _byte[index++] = 0x80 | (code & 0x3F);
                }
                else if (code < 0xD800 || code > 0xDFFF) {
                    // 3 bytes
                    _byte[index++] = 0xE0 | (code >>> 12);
                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);
                    _byte[index++] = 0x80 | (code & 0x3F);
                }
                else if (surrogate) {
                    // 4 bytes - surrogate pair
                    code = ((surrogate & 0x3FF) << 10) + (code & 0x3FF) + 0x10000;
                    _byte[index++] = 0xF0 | (code >>> 18);
                    _byte[index++] = 0x80 | ((code >>> 12) & 0x3F);
                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);
                    _byte[index++] = 0x80 | (code & 0x3F);
                    surrogate = 0;
                }
                else {
                    surrogate = code;
                }
            }
            if (index >= 64 /* N.inputBytes */) {
                this._int32(_word);
                _word[0] = _word[16 /* N.inputWords */];
            }
            this._size += index - start;
        }
        this._sp = surrogate;
        return this;
    }
    _int32(data, offset) {
        let { A, B, C, D, E, F, G, H } = this;
        let i = 0;
        offset = offset | 0;
        while (i < 16 /* N.inputWords */) {
            W[i++] = swap32(data[offset++]);
        }
        for (i = 16 /* N.inputWords */; i < 64 /* N.workWords */; i++) {
            W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;
        }
        for (i = 0; i < 64 /* N.workWords */; i++) {
            const T1 = (H + sigma1(E) + ch(E, F, G) + K[i] + W[i]) | 0;
            const T2 = (sigma0(A) + maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        this.A = (A + this.A) | 0;
        this.B = (B + this.B) | 0;
        this.C = (C + this.C) | 0;
        this.D = (D + this.D) | 0;
        this.E = (E + this.E) | 0;
        this.F = (F + this.F) | 0;
        this.G = (G + this.G) | 0;
        this.H = (H + this.H) | 0;
    }
    digest(encoding) {
        const { _byte, _word } = this;
        let i = (this._size % 64 /* N.inputBytes */) | 0;
        _byte[i++] = 0x80;
        // pad 0 for current word
        while (i & 3) {
            _byte[i++] = 0;
        }
        i >>= 2;
        if (i > 14 /* N.highIndex */) {
            while (i < 16 /* N.inputWords */) {
                _word[i++] = 0;
            }
            i = 0;
            this._int32(_word);
        }
        // pad 0 for rest words
        while (i < 16 /* N.inputWords */) {
            _word[i++] = 0;
        }
        // input size
        const bits64 = this._size * 8;
        const low32 = (bits64 & 0xffffffff) >>> 0;
        const high32 = (bits64 - low32) / 0x100000000;
        if (high32)
            _word[14 /* N.highIndex */] = swap32(high32);
        if (low32)
            _word[15 /* N.lowIndex */] = swap32(low32);
        this._int32(_word);
        return (encoding === "hex") ? this._hex() : this._bin();
    }
    _hex() {
        const { A, B, C, D, E, F, G, H } = this;
        return hex32(A) + hex32(B) + hex32(C) + hex32(D) + hex32(E) + hex32(F) + hex32(G) + hex32(H);
    }
    _bin() {
        const { A, B, C, D, E, F, G, H, _byte, _word } = this;
        _word[0] = swap32(A);
        _word[1] = swap32(B);
        _word[2] = swap32(C);
        _word[3] = swap32(D);
        _word[4] = swap32(E);
        _word[5] = swap32(F);
        _word[6] = swap32(G);
        _word[7] = swap32(H);
        return _byte.slice(0, 32);
    }
}
const W = new Int32Array(64 /* N.workWords */);
let sharedBuffer;
let sharedOffset = 0;
const hex32 = num => (num + 0x100000000).toString(16).substr(-8);
const swapLE = (c => (((c << 24) & 0xff000000) | ((c << 8) & 0xff0000) | ((c >> 8) & 0xff00) | ((c >> 24) & 0xff)));
const swapBE = (c => c);
const swap32 = isBE() ? swapBE : swapLE;
const ch = (x, y, z) => (z ^ (x & (y ^ z)));
const maj = (x, y, z) => ((x & y) | (z & (x | y)));
const sigma0 = x => ((x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10));
const sigma1 = x => ((x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7));
const gamma0 = x => ((x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3));
const gamma1 = x => ((x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10));
function isBE() {
    const buf = new Uint8Array(new Uint16Array([0xFEFF]).buffer); // BOM
    return (buf[0] === 0xFE);
}


/***/ }),

/***/ "./node_modules/viem/_esm/constants/strings.js":
/*!*****************************************************!*\
  !*** ./node_modules/viem/_esm/constants/strings.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   presignMessagePrefix: () => (/* binding */ presignMessagePrefix)
/* harmony export */ });
const presignMessagePrefix = '\x19Ethereum Signed Message:\n';
//# sourceMappingURL=strings.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/errors/base.js":
/*!***********************************************!*\
  !*** ./node_modules/viem/_esm/errors/base.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseError: () => (/* binding */ BaseError),
/* harmony export */   setErrorConfig: () => (/* binding */ setErrorConfig)
/* harmony export */ });
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ "./node_modules/viem/_esm/errors/version.js");

let errorConfig = {
    getDocsUrl: ({ docsBaseUrl, docsPath = '', docsSlug, }) => docsPath
        ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${docsSlug ? `#${docsSlug}` : ''}`
        : undefined,
    version: `viem@${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`,
};
function setErrorConfig(config) {
    errorConfig = config;
}
class BaseError extends Error {
    constructor(shortMessage, args = {}) {
        const details = (() => {
            if (args.cause instanceof BaseError)
                return args.cause.details;
            if (args.cause?.message)
                return args.cause.message;
            return args.details;
        })();
        const docsPath = (() => {
            if (args.cause instanceof BaseError)
                return args.cause.docsPath || args.docsPath;
            return args.docsPath;
        })();
        const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath });
        const message = [
            shortMessage || 'An error occurred.',
            '',
            ...(args.metaMessages ? [...args.metaMessages, ''] : []),
            ...(docsUrl ? [`Docs: ${docsUrl}`] : []),
            ...(details ? [`Details: ${details}`] : []),
            ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),
        ].join('\n');
        super(message, args.cause ? { cause: args.cause } : undefined);
        Object.defineProperty(this, "details", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "docsPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'BaseError'
        });
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.name = args.name ?? this.name;
        this.shortMessage = shortMessage;
        this.version = _version_js__WEBPACK_IMPORTED_MODULE_0__.version;
    }
    walk(fn) {
        return walk(this, fn);
    }
}
function walk(err, fn) {
    if (fn?.(err))
        return err;
    if (err &&
        typeof err === 'object' &&
        'cause' in err &&
        err.cause !== undefined)
        return walk(err.cause, fn);
    return fn ? null : err;
}
//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/errors/data.js":
/*!***********************************************!*\
  !*** ./node_modules/viem/_esm/errors/data.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InvalidBytesLengthError: () => (/* binding */ InvalidBytesLengthError),
/* harmony export */   SizeExceedsPaddingSizeError: () => (/* binding */ SizeExceedsPaddingSizeError),
/* harmony export */   SliceOffsetOutOfBoundsError: () => (/* binding */ SliceOffsetOutOfBoundsError)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/viem/_esm/errors/base.js");

class SliceOffsetOutOfBoundsError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor({ offset, position, size, }) {
        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset "${offset}" is out-of-bounds (size: ${size}).`, { name: 'SliceOffsetOutOfBoundsError' });
    }
}
class SizeExceedsPaddingSizeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor({ size, targetSize, type, }) {
        super(`${type.charAt(0).toUpperCase()}${type
            .slice(1)
            .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`, { name: 'SizeExceedsPaddingSizeError' });
    }
}
class InvalidBytesLengthError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor({ size, targetSize, type, }) {
        super(`${type.charAt(0).toUpperCase()}${type
            .slice(1)
            .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`, { name: 'InvalidBytesLengthError' });
    }
}
//# sourceMappingURL=data.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/errors/encoding.js":
/*!***************************************************!*\
  !*** ./node_modules/viem/_esm/errors/encoding.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IntegerOutOfRangeError: () => (/* binding */ IntegerOutOfRangeError),
/* harmony export */   InvalidBytesBooleanError: () => (/* binding */ InvalidBytesBooleanError),
/* harmony export */   InvalidHexBooleanError: () => (/* binding */ InvalidHexBooleanError),
/* harmony export */   InvalidHexValueError: () => (/* binding */ InvalidHexValueError),
/* harmony export */   SizeOverflowError: () => (/* binding */ SizeOverflowError)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/viem/_esm/errors/base.js");

class IntegerOutOfRangeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor({ max, min, signed, size, value, }) {
        super(`Number "${value}" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: 'IntegerOutOfRangeError' });
    }
}
class InvalidBytesBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor(bytes) {
        super(`Bytes value "${bytes}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {
            name: 'InvalidBytesBooleanError',
        });
    }
}
class InvalidHexBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor(hex) {
        super(`Hex value "${hex}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`, { name: 'InvalidHexBooleanError' });
    }
}
class InvalidHexValueError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor(value) {
        super(`Hex value "${value}" is an odd length (${value.length}). It must be an even length.`, { name: 'InvalidHexValueError' });
    }
}
class SizeOverflowError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {
    constructor({ givenSize, maxSize }) {
        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: 'SizeOverflowError' });
    }
}
//# sourceMappingURL=encoding.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/errors/version.js":
/*!**************************************************!*\
  !*** ./node_modules/viem/_esm/errors/version.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   version: () => (/* binding */ version)
/* harmony export */ });
const version = '2.34.0';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/data/concat.js":
/*!*****************************************************!*\
  !*** ./node_modules/viem/_esm/utils/data/concat.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   concat: () => (/* binding */ concat),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   concatHex: () => (/* binding */ concatHex)
/* harmony export */ });
function concat(values) {
    if (typeof values[0] === 'string')
        return concatHex(values);
    return concatBytes(values);
}
function concatBytes(values) {
    let length = 0;
    for (const arr of values) {
        length += arr.length;
    }
    const result = new Uint8Array(length);
    let offset = 0;
    for (const arr of values) {
        result.set(arr, offset);
        offset += arr.length;
    }
    return result;
}
function concatHex(values) {
    return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;
}
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/data/isHex.js":
/*!****************************************************!*\
  !*** ./node_modules/viem/_esm/utils/data/isHex.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isHex: () => (/* binding */ isHex)
/* harmony export */ });
function isHex(value, { strict = true } = {}) {
    if (!value)
        return false;
    if (typeof value !== 'string')
        return false;
    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x');
}
//# sourceMappingURL=isHex.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/data/pad.js":
/*!**************************************************!*\
  !*** ./node_modules/viem/_esm/utils/data/pad.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pad: () => (/* binding */ pad),
/* harmony export */   padBytes: () => (/* binding */ padBytes),
/* harmony export */   padHex: () => (/* binding */ padHex)
/* harmony export */ });
/* harmony import */ var _errors_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/data.js */ "./node_modules/viem/_esm/errors/data.js");

function pad(hexOrBytes, { dir, size = 32 } = {}) {
    if (typeof hexOrBytes === 'string')
        return padHex(hexOrBytes, { dir, size });
    return padBytes(hexOrBytes, { dir, size });
}
function padHex(hex_, { dir, size = 32 } = {}) {
    if (size === null)
        return hex_;
    const hex = hex_.replace('0x', '');
    if (hex.length > size * 2)
        throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({
            size: Math.ceil(hex.length / 2),
            targetSize: size,
            type: 'hex',
        });
    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;
}
function padBytes(bytes, { dir, size = 32 } = {}) {
    if (size === null)
        return bytes;
    if (bytes.length > size)
        throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({
            size: bytes.length,
            targetSize: size,
            type: 'bytes',
        });
    const paddedBytes = new Uint8Array(size);
    for (let i = 0; i < size; i++) {
        const padEnd = dir === 'right';
        paddedBytes[padEnd ? i : size - i - 1] =
            bytes[padEnd ? i : bytes.length - i - 1];
    }
    return paddedBytes;
}
//# sourceMappingURL=pad.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/data/size.js":
/*!***************************************************!*\
  !*** ./node_modules/viem/_esm/utils/data/size.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   size: () => (/* binding */ size)
/* harmony export */ });
/* harmony import */ var _isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isHex.js */ "./node_modules/viem/_esm/utils/data/isHex.js");

/**
 * @description Retrieves the size of the value (in bytes).
 *
 * @param value The value (hex or byte array) to retrieve the size of.
 * @returns The size of the value (in bytes).
 */
function size(value) {
    if ((0,_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value, { strict: false }))
        return Math.ceil((value.length - 2) / 2);
    return value.length;
}
//# sourceMappingURL=size.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/data/trim.js":
/*!***************************************************!*\
  !*** ./node_modules/viem/_esm/utils/data/trim.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
function trim(hexOrBytes, { dir = 'left' } = {}) {
    let data = typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes;
    let sliceLength = 0;
    for (let i = 0; i < data.length - 1; i++) {
        if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')
            sliceLength++;
        else
            break;
    }
    data =
        dir === 'left'
            ? data.slice(sliceLength)
            : data.slice(0, data.length - sliceLength);
    if (typeof hexOrBytes === 'string') {
        if (data.length === 1 && dir === 'right')
            data = `${data}0`;
        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
    }
    return data;
}
//# sourceMappingURL=trim.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/encoding/fromHex.js":
/*!**********************************************************!*\
  !*** ./node_modules/viem/_esm/utils/encoding/fromHex.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertSize: () => (/* binding */ assertSize),
/* harmony export */   fromHex: () => (/* binding */ fromHex),
/* harmony export */   hexToBigInt: () => (/* binding */ hexToBigInt),
/* harmony export */   hexToBool: () => (/* binding */ hexToBool),
/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),
/* harmony export */   hexToString: () => (/* binding */ hexToString)
/* harmony export */ });
/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/encoding.js */ "./node_modules/viem/_esm/errors/encoding.js");
/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/size.js */ "./node_modules/viem/_esm/utils/data/size.js");
/* harmony import */ var _data_trim_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/trim.js */ "./node_modules/viem/_esm/utils/data/trim.js");
/* harmony import */ var _toBytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toBytes.js */ "./node_modules/viem/_esm/utils/encoding/toBytes.js");




function assertSize(hexOrBytes, { size }) {
    if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_1__.size)(hexOrBytes) > size)
        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_0__.SizeOverflowError({
            givenSize: (0,_data_size_js__WEBPACK_IMPORTED_MODULE_1__.size)(hexOrBytes),
            maxSize: size,
        });
}
/**
 * Decodes a hex string into a string, number, bigint, boolean, or byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/fromHex
 * - Example: https://viem.sh/docs/utilities/fromHex#usage
 *
 * @param hex Hex string to decode.
 * @param toOrOpts Type to convert to or options.
 * @returns Decoded value.
 *
 * @example
 * import { fromHex } from 'viem'
 * const data = fromHex('0x1a4', 'number')
 * // 420
 *
 * @example
 * import { fromHex } from 'viem'
 * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')
 * // 'Hello world'
 *
 * @example
 * import { fromHex } from 'viem'
 * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {
 *   size: 32,
 *   to: 'string'
 * })
 * // 'Hello world'
 */
function fromHex(hex, toOrOpts) {
    const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts;
    const to = opts.to;
    if (to === 'number')
        return hexToNumber(hex, opts);
    if (to === 'bigint')
        return hexToBigInt(hex, opts);
    if (to === 'string')
        return hexToString(hex, opts);
    if (to === 'boolean')
        return hexToBool(hex, opts);
    return (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(hex, opts);
}
/**
 * Decodes a hex value into a bigint.
 *
 * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint
 *
 * @param hex Hex value to decode.
 * @param opts Options.
 * @returns BigInt value.
 *
 * @example
 * import { hexToBigInt } from 'viem'
 * const data = hexToBigInt('0x1a4', { signed: true })
 * // 420n
 *
 * @example
 * import { hexToBigInt } from 'viem'
 * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })
 * // 420n
 */
function hexToBigInt(hex, opts = {}) {
    const { signed } = opts;
    if (opts.size)
        assertSize(hex, { size: opts.size });
    const value = BigInt(hex);
    if (!signed)
        return value;
    const size = (hex.length - 2) / 2;
    const max = (1n << (BigInt(size) * 8n - 1n)) - 1n;
    if (value <= max)
        return value;
    return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n;
}
/**
 * Decodes a hex value into a boolean.
 *
 * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool
 *
 * @param hex Hex value to decode.
 * @param opts Options.
 * @returns Boolean value.
 *
 * @example
 * import { hexToBool } from 'viem'
 * const data = hexToBool('0x01')
 * // true
 *
 * @example
 * import { hexToBool } from 'viem'
 * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })
 * // true
 */
function hexToBool(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
        assertSize(hex, { size: opts.size });
        hex = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_2__.trim)(hex);
    }
    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_2__.trim)(hex) === '0x00')
        return false;
    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_2__.trim)(hex) === '0x01')
        return true;
    throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_0__.InvalidHexBooleanError(hex);
}
/**
 * Decodes a hex string into a number.
 *
 * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber
 *
 * @param hex Hex value to decode.
 * @param opts Options.
 * @returns Number value.
 *
 * @example
 * import { hexToNumber } from 'viem'
 * const data = hexToNumber('0x1a4')
 * // 420
 *
 * @example
 * import { hexToNumber } from 'viem'
 * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })
 * // 420
 */
function hexToNumber(hex, opts = {}) {
    return Number(hexToBigInt(hex, opts));
}
/**
 * Decodes a hex value into a UTF-8 string.
 *
 * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring
 *
 * @param hex Hex value to decode.
 * @param opts Options.
 * @returns String value.
 *
 * @example
 * import { hexToString } from 'viem'
 * const data = hexToString('0x48656c6c6f20576f726c6421')
 * // 'Hello world!'
 *
 * @example
 * import { hexToString } from 'viem'
 * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {
 *  size: 32,
 * })
 * // 'Hello world'
 */
function hexToString(hex, opts = {}) {
    let bytes = (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(hex);
    if (opts.size) {
        assertSize(bytes, { size: opts.size });
        bytes = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_2__.trim)(bytes, { dir: 'right' });
    }
    return new TextDecoder().decode(bytes);
}
//# sourceMappingURL=fromHex.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/encoding/toBytes.js":
/*!**********************************************************!*\
  !*** ./node_modules/viem/_esm/utils/encoding/toBytes.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boolToBytes: () => (/* binding */ boolToBytes),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   numberToBytes: () => (/* binding */ numberToBytes),
/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),
/* harmony export */   toBytes: () => (/* binding */ toBytes)
/* harmony export */ });
/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/base.js */ "./node_modules/viem/_esm/errors/base.js");
/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ "./node_modules/viem/_esm/utils/data/isHex.js");
/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pad.js */ "./node_modules/viem/_esm/utils/data/pad.js");
/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromHex.js */ "./node_modules/viem/_esm/utils/encoding/fromHex.js");
/* harmony import */ var _toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toHex.js */ "./node_modules/viem/_esm/utils/encoding/toHex.js");





const encoder = /*#__PURE__*/ new TextEncoder();
/**
 * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/toBytes
 * - Example: https://viem.sh/docs/utilities/toBytes#usage
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Byte array value.
 *
 * @example
 * import { toBytes } from 'viem'
 * const data = toBytes('Hello world')
 * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
 *
 * @example
 * import { toBytes } from 'viem'
 * const data = toBytes(420)
 * // Uint8Array([1, 164])
 *
 * @example
 * import { toBytes } from 'viem'
 * const data = toBytes(420, { size: 4 })
 * // Uint8Array([0, 0, 1, 164])
 */
function toBytes(value, opts = {}) {
    if (typeof value === 'number' || typeof value === 'bigint')
        return numberToBytes(value, opts);
    if (typeof value === 'boolean')
        return boolToBytes(value, opts);
    if ((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value))
        return hexToBytes(value, opts);
    return stringToBytes(value, opts);
}
/**
 * Encodes a boolean into a byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes
 *
 * @param value Boolean value to encode.
 * @param opts Options.
 * @returns Byte array value.
 *
 * @example
 * import { boolToBytes } from 'viem'
 * const data = boolToBytes(true)
 * // Uint8Array([1])
 *
 * @example
 * import { boolToBytes } from 'viem'
 * const data = boolToBytes(true, { size: 32 })
 * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
 */
function boolToBytes(value, opts = {}) {
    const bytes = new Uint8Array(1);
    bytes[0] = Number(value);
    if (typeof opts.size === 'number') {
        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_3__.assertSize)(bytes, { size: opts.size });
        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, { size: opts.size });
    }
    return bytes;
}
// We use very optimized technique to convert hex string to byte array
const charCodeMap = {
    zero: 48,
    nine: 57,
    A: 65,
    F: 70,
    a: 97,
    f: 102,
};
function charCodeToBase16(char) {
    if (char >= charCodeMap.zero && char <= charCodeMap.nine)
        return char - charCodeMap.zero;
    if (char >= charCodeMap.A && char <= charCodeMap.F)
        return char - (charCodeMap.A - 10);
    if (char >= charCodeMap.a && char <= charCodeMap.f)
        return char - (charCodeMap.a - 10);
    return undefined;
}
/**
 * Encodes a hex string into a byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes
 *
 * @param hex Hex string to encode.
 * @param opts Options.
 * @returns Byte array value.
 *
 * @example
 * import { hexToBytes } from 'viem'
 * const data = hexToBytes('0x48656c6c6f20776f726c6421')
 * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
 *
 * @example
 * import { hexToBytes } from 'viem'
 * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })
 * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 */
function hexToBytes(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_3__.assertSize)(hex, { size: opts.size });
        hex = (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(hex, { dir: 'right', size: opts.size });
    }
    let hexString = hex.slice(2);
    if (hexString.length % 2)
        hexString = `0${hexString}`;
    const length = hexString.length / 2;
    const bytes = new Uint8Array(length);
    for (let index = 0, j = 0; index < length; index++) {
        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));
        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));
        if (nibbleLeft === undefined || nibbleRight === undefined) {
            throw new _errors_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
        }
        bytes[index] = nibbleLeft * 16 + nibbleRight;
    }
    return bytes;
}
/**
 * Encodes a number into a byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes
 *
 * @param value Number to encode.
 * @param opts Options.
 * @returns Byte array value.
 *
 * @example
 * import { numberToBytes } from 'viem'
 * const data = numberToBytes(420)
 * // Uint8Array([1, 164])
 *
 * @example
 * import { numberToBytes } from 'viem'
 * const data = numberToBytes(420, { size: 4 })
 * // Uint8Array([0, 0, 1, 164])
 */
function numberToBytes(value, opts) {
    const hex = (0,_toHex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(value, opts);
    return hexToBytes(hex);
}
/**
 * Encodes a UTF-8 string into a byte array.
 *
 * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes
 *
 * @param value String to encode.
 * @param opts Options.
 * @returns Byte array value.
 *
 * @example
 * import { stringToBytes } from 'viem'
 * const data = stringToBytes('Hello world!')
 * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])
 *
 * @example
 * import { stringToBytes } from 'viem'
 * const data = stringToBytes('Hello world!', { size: 32 })
 * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 */
function stringToBytes(value, opts = {}) {
    const bytes = encoder.encode(value);
    if (typeof opts.size === 'number') {
        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_3__.assertSize)(bytes, { size: opts.size });
        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, { dir: 'right', size: opts.size });
    }
    return bytes;
}
//# sourceMappingURL=toBytes.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/encoding/toHex.js":
/*!********************************************************!*\
  !*** ./node_modules/viem/_esm/utils/encoding/toHex.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boolToHex: () => (/* binding */ boolToHex),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   numberToHex: () => (/* binding */ numberToHex),
/* harmony export */   stringToHex: () => (/* binding */ stringToHex),
/* harmony export */   toHex: () => (/* binding */ toHex)
/* harmony export */ });
/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/encoding.js */ "./node_modules/viem/_esm/errors/encoding.js");
/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/pad.js */ "./node_modules/viem/_esm/utils/data/pad.js");
/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromHex.js */ "./node_modules/viem/_esm/utils/encoding/fromHex.js");



const hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
/**
 * Encodes a string, number, bigint, or ByteArray into a hex string
 *
 * - Docs: https://viem.sh/docs/utilities/toHex
 * - Example: https://viem.sh/docs/utilities/toHex#usage
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Hex value.
 *
 * @example
 * import { toHex } from 'viem'
 * const data = toHex('Hello world')
 * // '0x48656c6c6f20776f726c6421'
 *
 * @example
 * import { toHex } from 'viem'
 * const data = toHex(420)
 * // '0x1a4'
 *
 * @example
 * import { toHex } from 'viem'
 * const data = toHex('Hello world', { size: 32 })
 * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'
 */
function toHex(value, opts = {}) {
    if (typeof value === 'number' || typeof value === 'bigint')
        return numberToHex(value, opts);
    if (typeof value === 'string') {
        return stringToHex(value, opts);
    }
    if (typeof value === 'boolean')
        return boolToHex(value, opts);
    return bytesToHex(value, opts);
}
/**
 * Encodes a boolean into a hex string
 *
 * - Docs: https://viem.sh/docs/utilities/toHex#booltohex
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Hex value.
 *
 * @example
 * import { boolToHex } from 'viem'
 * const data = boolToHex(true)
 * // '0x1'
 *
 * @example
 * import { boolToHex } from 'viem'
 * const data = boolToHex(false)
 * // '0x0'
 *
 * @example
 * import { boolToHex } from 'viem'
 * const data = boolToHex(true, { size: 32 })
 * // '0x0000000000000000000000000000000000000000000000000000000000000001'
 */
function boolToHex(value, opts = {}) {
    const hex = `0x${Number(value)}`;
    if (typeof opts.size === 'number') {
        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.assertSize)(hex, { size: opts.size });
        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { size: opts.size });
    }
    return hex;
}
/**
 * Encodes a bytes array into a hex string
 *
 * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Hex value.
 *
 * @example
 * import { bytesToHex } from 'viem'
 * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
 * // '0x48656c6c6f20576f726c6421'
 *
 * @example
 * import { bytesToHex } from 'viem'
 * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })
 * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'
 */
function bytesToHex(value, opts = {}) {
    let string = '';
    for (let i = 0; i < value.length; i++) {
        string += hexes[value[i]];
    }
    const hex = `0x${string}`;
    if (typeof opts.size === 'number') {
        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.assertSize)(hex, { size: opts.size });
        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { dir: 'right', size: opts.size });
    }
    return hex;
}
/**
 * Encodes a number or bigint into a hex string
 *
 * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Hex value.
 *
 * @example
 * import { numberToHex } from 'viem'
 * const data = numberToHex(420)
 * // '0x1a4'
 *
 * @example
 * import { numberToHex } from 'viem'
 * const data = numberToHex(420, { size: 32 })
 * // '0x00000000000000000000000000000000000000000000000000000000000001a4'
 */
function numberToHex(value_, opts = {}) {
    const { signed, size } = opts;
    const value = BigInt(value_);
    let maxValue;
    if (size) {
        if (signed)
            maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n;
        else
            maxValue = 2n ** (BigInt(size) * 8n) - 1n;
    }
    else if (typeof value_ === 'number') {
        maxValue = BigInt(Number.MAX_SAFE_INTEGER);
    }
    const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;
    if ((maxValue && value > maxValue) || value < minValue) {
        const suffix = typeof value_ === 'bigint' ? 'n' : '';
        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_0__.IntegerOutOfRangeError({
            max: maxValue ? `${maxValue}${suffix}` : undefined,
            min: `${minValue}${suffix}`,
            signed,
            size,
            value: `${value_}${suffix}`,
        });
    }
    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;
    if (size)
        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { size });
    return hex;
}
const encoder = /*#__PURE__*/ new TextEncoder();
/**
 * Encodes a UTF-8 string into a hex string
 *
 * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex
 *
 * @param value Value to encode.
 * @param opts Options.
 * @returns Hex value.
 *
 * @example
 * import { stringToHex } from 'viem'
 * const data = stringToHex('Hello World!')
 * // '0x48656c6c6f20576f726c6421'
 *
 * @example
 * import { stringToHex } from 'viem'
 * const data = stringToHex('Hello World!', { size: 32 })
 * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'
 */
function stringToHex(value_, opts = {}) {
    const value = encoder.encode(value_);
    return bytesToHex(value, opts);
}
//# sourceMappingURL=toHex.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/hash/keccak256.js":
/*!********************************************************!*\
  !*** ./node_modules/viem/_esm/utils/hash/keccak256.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   keccak256: () => (/* binding */ keccak256)
/* harmony export */ });
/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ "./node_modules/@noble/hashes/esm/sha3.js");
/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ "./node_modules/viem/_esm/utils/data/isHex.js");
/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ "./node_modules/viem/_esm/utils/encoding/toBytes.js");
/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ "./node_modules/viem/_esm/utils/encoding/toHex.js");




function keccak256(value, to_) {
    const to = to_ || 'hex';
    const bytes = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value, { strict: false }) ? (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value) : value);
    if (to === 'bytes')
        return bytes;
    return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(bytes);
}
//# sourceMappingURL=keccak256.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/signature/hashMessage.js":
/*!***************************************************************!*\
  !*** ./node_modules/viem/_esm/utils/signature/hashMessage.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hashMessage: () => (/* binding */ hashMessage)
/* harmony export */ });
/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hash/keccak256.js */ "./node_modules/viem/_esm/utils/hash/keccak256.js");
/* harmony import */ var _toPrefixedMessage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrefixedMessage.js */ "./node_modules/viem/_esm/utils/signature/toPrefixedMessage.js");


function hashMessage(message, to_) {
    return (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_toPrefixedMessage_js__WEBPACK_IMPORTED_MODULE_1__.toPrefixedMessage)(message), to_);
}
//# sourceMappingURL=hashMessage.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/signature/recoverPublicKey.js":
/*!********************************************************************!*\
  !*** ./node_modules/viem/_esm/utils/signature/recoverPublicKey.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey)
/* harmony export */ });
/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ "./node_modules/viem/_esm/utils/data/isHex.js");
/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/size.js */ "./node_modules/viem/_esm/utils/data/size.js");
/* harmony import */ var _encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/fromHex.js */ "./node_modules/viem/_esm/utils/encoding/fromHex.js");
/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ "./node_modules/viem/_esm/utils/encoding/toHex.js");




async function recoverPublicKey({ hash, signature, }) {
    const hashHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(hash) ? hash : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(hash);
    const { secp256k1 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_viem_node_modules_noble_curves_esm_secp256k1_js").then(__webpack_require__.bind(__webpack_require__, /*! @noble/curves/secp256k1 */ "./node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js"));
    const signature_ = (() => {
        // typeof signature: `Signature`
        if (typeof signature === 'object' && 'r' in signature && 's' in signature) {
            const { r, s, v, yParity } = signature;
            const yParityOrV = Number(yParity ?? v);
            const recoveryBit = toRecoveryBit(yParityOrV);
            return new secp256k1.Signature((0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(r), (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(s)).addRecoveryBit(recoveryBit);
        }
        // typeof signature: `Hex | ByteArray`
        const signatureHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(signature) ? signature : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(signature);
        if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_1__.size)(signatureHex) !== 65)
            throw new Error('invalid signature length');
        const yParityOrV = (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToNumber)(`0x${signatureHex.slice(130)}`);
        const recoveryBit = toRecoveryBit(yParityOrV);
        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
    })();
    const publicKey = signature_
        .recoverPublicKey(hashHex.substring(2))
        .toHex(false);
    return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
    if (yParityOrV === 0 || yParityOrV === 1)
        return yParityOrV;
    if (yParityOrV === 27)
        return 0;
    if (yParityOrV === 28)
        return 1;
    throw new Error('Invalid yParityOrV value');
}
//# sourceMappingURL=recoverPublicKey.js.map

/***/ }),

/***/ "./node_modules/viem/_esm/utils/signature/toPrefixedMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/viem/_esm/utils/signature/toPrefixedMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toPrefixedMessage: () => (/* binding */ toPrefixedMessage)
/* harmony export */ });
/* harmony import */ var _constants_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants/strings.js */ "./node_modules/viem/_esm/constants/strings.js");
/* harmony import */ var _data_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/concat.js */ "./node_modules/viem/_esm/utils/data/concat.js");
/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/size.js */ "./node_modules/viem/_esm/utils/data/size.js");
/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ "./node_modules/viem/_esm/utils/encoding/toHex.js");




function toPrefixedMessage(message_) {
    const message = (() => {
        if (typeof message_ === 'string')
            return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.stringToHex)(message_);
        if (typeof message_.raw === 'string')
            return message_.raw;
        return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(message_.raw);
    })();
    const prefix = (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.stringToHex)(`${_constants_strings_js__WEBPACK_IMPORTED_MODULE_0__.presignMessagePrefix}${(0,_data_size_js__WEBPACK_IMPORTED_MODULE_2__.size)(message)}`);
    return (0,_data_concat_js__WEBPACK_IMPORTED_MODULE_1__.concat)([prefix, message]);
}
//# sourceMappingURL=toPrefixedMessage.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".turnkey.bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "mintpop-extension:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkmintpop_extension"] = self["webpackChunkmintpop_extension"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*******************************!*\
  !*** ./src/turnkey-bundle.js ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/sdk-browser */ "./node_modules/@turnkey/sdk-browser/dist/index.mjs");
// Bundle Turnkey SDK for Chrome extension use


console.log('XOFE Bundle: Starting to set up Turnkey SDK...');
console.log('XOFE Bundle: TurnkeyBrowserClient imported:', !!_turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.TurnkeyBrowserClient);
console.log('XOFE Bundle: TurnkeyPasskeyClient imported:', !!_turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.TurnkeyPasskeyClient);
console.log('XOFE Bundle: WebauthnStamper imported:', !!_turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.WebauthnStamper);

// Export Turnkey to global window object for use in extension
window.TurnkeySDK = {
  TurnkeyBrowserClient: _turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.TurnkeyBrowserClient,
  TurnkeyPasskeyClient: _turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.TurnkeyPasskeyClient,
  WebauthnStamper: _turnkey_sdk_browser__WEBPACK_IMPORTED_MODULE_0__.WebauthnStamper
};

console.log('XOFE Bundle: window.TurnkeySDK set to:', window.TurnkeySDK);
console.log('Turnkey SDK with Solana support bundled and ready for Chrome extension');

})();

/******/ })()
;